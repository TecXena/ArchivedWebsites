/* 
 lithe 
 @author xiaojue [designsor@gmail.com] 
 @fileoverview a javascript common loader 
 @vserion 0.3.1 
 */
(function(global, undef) {


	var isBrowser = !! (typeof window !== undef && global.navigator && global.document);
	if (isBrowser) {
		//tools function
		var doc = global.document,
		Arr = Array.prototype,
		Obj = Object,
		toString = Obj.prototype.toString,
		//匹配注释
		commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
		//匹配引入的模块路径
		jsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g;

		var forEach = Arr.forEach ? function(arr, fn) {
			arr.forEach(fn);
		}: function(arr, fn) {
			for (var i = 0; i < arr.length; i++) fn(arr[i], i, arr);
		};

		var filter = Arr.filter ? function(arr, fn) {
			return arr.filter(fn);
		}: function(arr,fn) {
			var ret = [];
			forEach(arr, function(item, i, arr) {
				if (fn(item, i, arr)) ret.push(item);
			});
			return ret;
		};

		var map = Arr.map ? function(arr, fn) {
			return arr.map(fn);
		}: function(arr, fn) {
			var ret = [];
			forEach(arr, function(item, i, arr) {
				ret.push(fn(item, i, arr));
			});
			return ret;
		};

		var keys = Obj.keys ? Obj.keys: function(o) {
			var ret = [];
			for (var p in o) {
				if (o.hasOwnProperty(p)) ret.push(p);
			}
			return ret;
		};

		var indexOf = Arr.indexOf ? function(arr, selector) {
			return arr.indexOf(selector);
		}: function(arr, selector) {
			for (var i = 0; i < arr.length; i++) {
				if (arr[i] === selector) return i;
			}
			return - 1;
		};
		function getByTagName(tag, ele) {
			ele = ele || doc;
			return ele ? ele.getElementsByTagName(tag) : ele;
		}

		

		function getAttr(ele, ns) {
			return ele.getAttribute(ns);
		}

		function extend(source, options) {
			for (var i in options) {
				if (options.hasOwnProperty(i)) source[i] = options[i];
			}
			return source;
		}

		function isString(v) {
			return toString.call(v) === '[object String]';
		}

		function isFunction(v) {
			return toString.call(v) === '[object Function]';
		}

		function isObject(v) {
			return v === Obj(v);
		}

		function unique(arr) {
			var o = {};
			forEach(arr, function(item) {
				o[item] = 1;
			});
			return keys(o);
		}

		function attr(node, ns) {
			return node.getAttribute(ns);
		}

		//处理依赖部分
		function getDependencies(code) {
			var deps = [];
			//去掉注释
			code.replace(commentRegExp, '').replace(jsRequireRegExp, function(match, dep) {
				//匹配出来的依赖储存到deps里
				deps.push(dep);
			});
			return unique(deps);
		}

		function runModuleContext(fn, mod) {
			var ret = fn(mod.require, mod.exports, mod);
			if (ret !== undef) mod.exports = ret;
		}


		function events() {
			this.map = {};
		}

		extend(events.prototype, {
			trigger: function(name, args) {
				var self = this,
				cbs = this.map[name];
				if (cbs) {
					forEach(cbs, function(fn) {
						fn.apply(this, args);
					});
				}
			},
			on: function(name, cb) {
				if (this.map[name]) {
					this.map[name].push(cb);
				} else {
					this.map[name] = [cb];
				}
			}
		});

		var LEVENTS = new events();


		function getTimeStamp(url) {
			var query = url.slice(url.lastIndexOf('?') + 1).split('&');
			for (var i = 0; i < query.length; i++) {
				var item = query[i].split('='),
				key = item[0],
				val = item[1];
				if (key == 'timestamp') return val;
			}
			return null;
		}

		function isAbsolute(url) {
			return url.indexOf('://') > 0 || url.indexOf('//') === 0;
		}

		function isDir(url) {
			return ! filename(url);
		}

		function dirname(url) {
			var s = url.match(/[^?]*(?=\/.*$)/);
			return (s ? s[0] : '.') + '/';
		}

		function filename(url) {
			return url.slice(url.lastIndexOf('/') + 1).replace(/\?.*$/, '');
		}
		//转换成真正的排期
		function realpath(path) {
			var multiple_slash_re = /([^:\/])\/\/+/g;
			multiple_slash_re.lastIndex = 0;
			//把多余的/去掉
			if (multiple_slash_re.test(path)) {
				path = path.replace(multiple_slash_re, '$1\/');
			}
			if (path.indexOf('.') === - 1) {
				return path;
			}
			var original = path.split('/'),
			ret = [],
			part;
			for (var i = 0; i < original.length; i++) {
				part = original[i];
				if (part === '..') {
					if (ret.length === 0) {
						throw new Error('The path is invalid: ' + path);
					}
					ret.pop();
				}
				else if (part !== '.') {
					ret.push(part);
				}
			}
			return ret.join('/');
		}


		function normalize(url, t) {
			url = realpath(url);
			var lastChar = url.charAt(url.length - 1);
			if (lastChar === '/') {
				return url;
			}
			if (lastChar === '#') {
				url = url.slice(0, - 1);
			}
			else if (url.indexOf('?') === - 1 && ! (/\.(?:js|css)$/).test(url)) {
				url += '.js';
			}
			if (url.indexOf(':80/') > 0) {
				url = url.replace(':80/', '/');
			}
			if (t) url = url.replace(/\?.+$/, '');
			return url;
		}

		function replaceDir(id) {
			//只替换一次,且如果路径包含2个dir，也只替换一次,并且只匹配第一个，之后的不匹配
			// UI:../ -> UI/test = ../test
			// UI:../ -> UI/UI/test = ../UI/test
			// UI:../ -> ../a/UI/test = ../a/UI/test [不会替换]
			// UI:../ -> a/UI/test = a/UI/test [不会替换]
			var locks = {},
			directorys = config.directorys,
			k, path, reg, dir, j;
			for (k = 0; k < directorys.length; k++) {
				if (locks[id]) break;
				dir = directorys[k];
				for (j in dir) {
					path = dir[j];
					reg = new RegExp("^" + j + "\/");
					if (reg.test(id) && ! locks[id]) {
						id = id.replace(reg, path);
						locks[id] = true;
						break;
					}
				}
			}
			return id;
		}

		function replaceId(id) {
			var alias = config.alias;
			if (alias) {
				var newid = alias[id];
				return newid ? newid: replaceDir(id);
			}
			return id;
		}

		function resolve(id, path) {
			//获取文件目录
			path = dirname(path || lithe.basepath);
			//判断是否是绝对路径
			if (isAbsolute(id)) return id;

			if (config.init) id = replaceId(id);
			var url = '';

			if (id.indexOf('./') === 0 || id.indexOf('../') === 0) {
				if (id.indexOf('./') === 0) {
					id = id.substring(2);
				}
				url = path + id;
			} else if (id.charAt(0) === '/' && id.charAt(1) !== '/') {

				url = path + id.substring(1);
			} else {
				url = path + '/' + id;
			}
			return normalize(url);
		}


		var header = doc.head || getByTagName('head')[0] || doc.documentElement,
		CHARSET = 'utf-8',
		scripts = getByTagName('script'),
		currentJs = scripts[scripts.length - 1],
		BASEPATH = attr(currentJs, 'data-path') || currentJs.src || attr(currentJs, 'src'),
		CONFIG = attr(currentJs, 'data-config'),
		DEBUG = attr(currentJs, 'data-debug') === 'true',
		GLOBALTIMESTAMP = getTimeStamp(currentJs.src),
		CONFIGSTMAP = null,
		mainjs = attr(currentJs, 'data-main'),

		fetching = {},
		callbacks = {},
		fetched = {};

		function fetch(url, cb) {
			LEVENTS.trigger('fetch', [url, cb]);
		}

		LEVENTS.on('fetch', function(url, cb) {
			//如果不是.css的后缀
			if (! (/\.css$/).test(url)) {
				//如果在fetched里这个值为真
				if (fetched[url]) {
					cb();
					return;
				}
				//如果在fetching里这个值为真
				if (fetching[url]) {
					callbacks[url].push(cb);
					return;
				}
				fetching[url] = true;
				callbacks[url] = [cb];
				getscript(url, function() {
					//已经获取过这个链接了
					fetched[url] = true;
					//在fetching里删除这个值
					delete fetching[url];
					//把fns储存这个js的回调函数
					var fns = callbacks[url];
					if (fns) {
						//在callbacks数组里删除这个函数
						delete callbacks[url];
						forEach(fns, function(fn) {
							//执行这个回调函数
							fn();
						});
					}
				},
				CHARSET);
			}
		});

		function getscript(url, cb, charset) {
			var node = createNode('script', charset);
			node.onload = node.onerror = node.onreadystatechange = function() {
				if (/loaded|complete|undefined/.test(node.readyState)) {
					node.onload = node.onerror = node.onreadystatechange = null;
					if (node.parentNode && ! DEBUG) node.parentNode.removeChild(node);
					node = undef;
					if (isFunction(cb)) cb();
				}
			};
			node.async = 'async';
			var timestamp = CONFIGSTMAP ? CONFIGSTMAP : GLOBALTIMESTAMP;
			url = timestamp ? url + '?timestamp=' + timestamp : url;
			node.src = url;
			insertscript(node);
		}

		function createNode(tag, charset) {
			var node = doc.createElement(tag);
			if (charset) node.charset = charset;
			return node;
		}

		function insertscript(node) {
			var baseElement = getByTagName('base', header)[0];
			baseElement ? header.insertBefore(node, baseElement) : header.appendChild(node);
		}


		var anonymouse = [],
		config = {},
		STATUS = {
			'created': 0,
			'save': 1,
			'ready': 2,
			'compiling': 3,
			'compiled': 4
		},
		circularStack = [];

		

		function isCircularWaiting(mod) {
			if (!mod || mod.status !== STATUS.save) return false;
			circularStack.push(mod.id);
			var deps = mod.dependencies;
			if (deps.length) {
				if (isOverlap(deps, circularStack)) return true;
				for (var i = 0; i < deps.length; i++) {
					if (isCircularWaiting(lithe.cache[resolve(deps[i])])) return true;
				}
			}
			circularStack.pop();
			return false;
		}
		//help
		function getPureDependencies(mod) {
			var id = mod.id;
			var deps = filter(mod.dependencies, function(dep) {
				circularStack.push(id);
				var isCircular = isCircularWaiting(lithe.cache[resolve(dep)]);
				if (isCircular) {
					//the circular is ready
					circularStack.push(id);
				}
				circularStack.pop();
				return ! isCircular;
			});
			return createUrls(deps);
		}

		function isOverlap(arrA, arrB) {
			var arrC = arrA.concat(arrB);
			return arrC.length > unique(arrC).length;
		}

		function createUrls(urls) {
			isString(urls) && (urls = [urls]);
			return map(urls, function(url) {
				return resolve(url);
			});
		}

		function fetchMods(urls, cb) {
			urls = createUrls(urls);
			LEVENTS.trigger('start', [urls]);
			var loadUris = filter(urls, function(url) {
				//有链接且链接不在缓存区或者在缓存区但是状态码不是ready
				return url && (!lithe.cache[url] || lithe.cache[url].status < STATUS.ready);
			}),
			len = loadUris.length;
			if (len === 0) {
				cb();
				return;
			}
			var queue = len;
			function restart(mod) { (mod || {}).status < STATUS.ready && (mod.status = STATUS.ready); --queue;
				(queue === 0) && cb();
			}
			forEach(loadUris, function(url) {
				var mod = lithe.get(url);
				function success(style) {
					LEVENTS.trigger('fetchsuccess', [mod, style]);
					if (mod.status >= STATUS.save) {
						var deps = getPureDependencies(mod);
						deps.length ? fetchMods(deps, function() {
							restart(mod);
						}) : restart(mod);
					} else if (style) {
						restart(mod);
					} else {
						restart();
					}
				}
				mod.status < STATUS.save ? fetch(url, success) : success();
			});
		}

		function saveAnonymouse() {
			forEach(anonymouse, function(meta) {
				var anonymousemod = lithe.get(meta.id);
				anonymousemod._save(meta);
			});
			anonymouse = [];
		}

		function realUse(urls, cb) {
			fetchMods(urls, function() {
				urls = createUrls(urls);
				var args = map(urls, function(url) {
					return url ? lithe.get(url)._compile() : null;
				});
				if (isFunction(cb)) {
					cb.apply(null, args);
				}
				LEVENTS.trigger('end');
			});
		}

		function setConfig(cg) {
			config = cg;
			config.directorys = [];
			var alias = config.alias,
			i, alia, dir;
			if (alias) {
				for (i in alias) {
					alia = alias[i];
					if (isDir(alia)) {
						dir = {};
						dir[i] = alia;
						config.directorys.push(dir);
					}
				}
			}
			config.init = true;
			if (config.basepath) lithe.basepath = config.basepath;
			lithe.config = config;
			CONFIGSTMAP = config.timestamp;
		};

		function noop() {};

		function module(url) {
			this.id = url;
			this.status = 0;
			this.dependencies = [];
			this.exports = null;
			this.parent = [];
			this.factory = noop;
		}

		extend(module.prototype, {
			_compile: function() {
				var mod = this;
				//已经解析完成时，返回mod.exports
				if (mod.status === STATUS.compiled) return mod.exports;
				//没有储存退出执行
				if (mod.status < STATUS.save) return null;
				//正在编译中
				mod.status = STATUS.compiling;

				function require(id) {
					//转换成绝对路径
					id = normalize(resolve(id), true);
					//放到缓存列表里
					var child = lithe.cache[id];
					//如果已经在lithe的缓存区里的时候
					if (!child) return null;
					//如果状态是正在编译
					if (child.status === STATUS.compiling) return child.exports;
					//如果都不是
					child.parent = mod;
					return child._compile();
				}
				//
				require.cache = lithe.cache;
				mod.require = require;
				mod.exports = {};
				var fun = mod.factory;
				if (isFunction(fun)) runModuleContext(fun, mod);
				mod.status = STATUS.compiled;
				lithe.events.trigger('compiled', [mod]);
				return mod.exports;
			},
			_save: function(meta) {
				if (this.status < STATUS.save) {
					this.id = meta.id;
					this.name = meta.name;
					this.dependencies = meta.deps;
					this.factory = meta.factory;
					this.status = STATUS.save;
				}
			}
		});

		var lithe = extend({
			basepath: BASEPATH,
			events: LEVENTS,
			cache: {},
			get: function(url) {
				url = normalize(url, true);
				//缓存请求到的js
				return lithe.cache[url] || (lithe.cache[url] = new module(url));
			},
			define: function(id, factory) {
				//处理依赖部分
				var deps = getDependencies(factory.toString());
				var meta = {
					id: resolve(id),
					name: id,
					deps: deps,
					factory: factory
				};
				anonymouse.push(meta);
				saveAnonymouse();
			},
			use: function(urls, cb) { (!CONFIG || config.init) ? realUse(urls, cb) : function() {
					realUse(CONFIG, function(cg) {
						setConfig(cg);
						realUse(urls, cb);
					});
				} ();
			}
		});

		if (CONFIG) CONFIG = createUrls(CONFIG);


		global.lithe = lithe;
		global.define = lithe.define;
		lithe.debug = true;

		var started = false;
		lithe.start = function() {
			if(!started){
				global.lithe.use(mainjs);
				started = true;
			}
		};
		if (mainjs) {
			setTimeout(lithe.start);
		}
	} else {
		exports.tool = require('./lib/lithe-tool.js');
		exports.hfs = require('./lib/lithe-hfs.js');
	}
})(this);


define('config',function(require,exports,module){

	var config = {
		alias:{
			'lib':'lib/core/chaos/jquery'
		}
	};

	

	module.exports = config;
});


/**
 * @fileoverview jquery lib 混合文件 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/core/chaos/jquery',function(require,exports,module){

	//jquery modules
	var jQuery = require('lib/core/jquery/jquery');

	//jquery plugin
	require('lib/core/extra/jquery/jquery');
	require('lib/core/extra/jquery/prefixfree');
	require('lib/core/extra/jquery/transform');
	require('lib/core/extra/jquery/hammer');
	require('lib/core/extra/jquery/transit');

	module.exports = jQuery;

});

/**
 * @fileoverview 模板管理器
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 * @example
	var $tpl = require('lib/kit/util/template');
	var TPL = $tpl({
		item : [
			'<div>',
				'<a href="#">test</a>',
			'</div>'
		]
	});
	TPL.get('item');	//'<div><a href="#">test</a></div>'
 */
define('lib/kit/util/template',function(require,exports,module){

	var $ = require('lib');

	module.exports = function(obj){
		var tpl = {};
		var that = {};
		
		that.set = function(object){
			$.extend(that, object);
			$.extend(tpl, object);
		};

		that.get = function(name){
			var str = '';
			var part = tpl[name];
			if(part){
				if(typeof part === 'string'){
					str = part;
				}else if(Array.isArray(part)){
					tpl[name] = str = part.join('');
				}
			}
			return str;
		};

		that.set(obj);

		return that;
	};

});


/**
 * @fileoverview ECMA-SCRIPT兼容处理
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/more/es5-safe',function(require,exports,module){

  // es5-safe
  // ----------------
  // Provides compatibility shims so that legacy JavaScript engines behave as
  // closely as possible to ES5.
  //
  // Thanks to:
  //  - http://es5.github.com/
  //  - http://kangax.github.com/es5-compat-table/
  //  - https://github.com/kriskowal/es5-shim
  //  - http://perfectionkills.com/extending-built-in-native-objects-evil-or-not/
  //  - https://gist.github.com/1120592
  //  - https://code.google.com/p/v8/


  var OP = Object.prototype;
  var AP = Array.prototype;
  var FP = Function.prototype;
  var SP = String.prototype;
  var hasOwnProperty = OP.hasOwnProperty;
  var slice = AP.slice;


  /*---------------------------------------*
   * Function
   *---------------------------------------*/

  // ES-5 15.3.4.5
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind
  FP.bind || (FP.bind = function(that) {
    var target = this;

    // If IsCallable(func) is false, throw a TypeError exception.
    if (typeof target !== 'function') {
      throw new TypeError('Bind must be called on a function');
    }

    var boundArgs = slice.call(arguments, 1);

    function bound() {
      // Called as a constructor.
      if (this instanceof bound) {
        var self = createObject(target.prototype);
        var result = target.apply(
            self,
            boundArgs.concat(slice.call(arguments))
        );
        return Object(result) === result ? result : self;
      }
      // Called as a function.
      else {
        return target.apply(
            that,
            boundArgs.concat(slice.call(arguments))
        );
      }
    }

    // NOTICE: The function.length is not writable.
    //bound.length = Math.max(target.length - boundArgs.length, 0);

    return bound;
  });


  // Helpers
  function createObject(proto) {
    var o;

    if (Object.create) {
      o = Object.create(proto);
    }
    else {
      /** @constructor */
      function F() {
      }

      F.prototype = proto;
      o = new F();
    }

    return o;
  }


  /*---------------------------------------*
   * Object
   *---------------------------------------*/
  // http://ejohn.org/blog/ecmascript-5-objects-and-properties/

  // ES5 15.2.3.14
  // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys
  // https://developer.mozilla.org/en/ECMAScript_DontEnum_attribute
  // http://msdn.microsoft.com/en-us/library/adebfyya(v=vs.94).aspx
  Object.keys || (Object.keys = (function() {
    var hasDontEnumBug = !{toString: ''}.propertyIsEnumerable('toString');
    var DontEnums = [
      'toString',
      'toLocaleString',
      'valueOf',
      'hasOwnProperty',
      'isPrototypeOf',
      'propertyIsEnumerable',
      'constructor'
    ];
    var DontEnumsLength = DontEnums.length;

    return function(o) {
      if (o !== Object(o)) {
        throw new TypeError(o + ' is not an object');
      }

      var result = [];

      for (var name in o) {
        if (hasOwnProperty.call(o, name)) {
          result.push(name);
        }
      }

      if (hasDontEnumBug) {
        for (var i = 0; i < DontEnumsLength; i++) {
          if (hasOwnProperty.call(o, DontEnums[i])) {
            result.push(DontEnums[i]);
          }
        }
      }

      return result;
    };

  })());


  /*---------------------------------------*
   * Array
   *---------------------------------------*/
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array
  // https://github.com/kangax/fabric.js/blob/gh-pages/src/util/lang_array.js

  // ES5 15.4.3.2
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
  Array.isArray || (Array.isArray = function(obj) {
    return OP.toString.call(obj) === '[object Array]';
  });


  // ES5 15.4.4.18
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/foreach
  AP.forEach || (AP.forEach = function(fn, context) {
    for (var i = 0, len = this.length >>> 0; i < len; i++) {
      if (i in this) {
        fn.call(context, this[i], i, this);
      }
    }
  });


  // ES5 15.4.4.19
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
  AP.map || (AP.map = function(fn, context) {
    var len = this.length >>> 0;
    var result = new Array(len);

    for (var i = 0; i < len; i++) {
      if (i in this) {
        result[i] = fn.call(context, this[i], i, this);
      }
    }

    return result;
  });


  // ES5 15.4.4.20
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
  AP.filter || (AP.filter = function(fn, context) {
    var result = [], val;

    for (var i = 0, len = this.length >>> 0; i < len; i++) {
      if (i in this) {
        val = this[i]; // in case fn mutates this
        if (fn.call(context, val, i, this)) {
          result.push(val);
        }
      }
    }

    return result;
  });


  // ES5 15.4.4.16
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every
  AP.every || (AP.every = function(fn, context) {
    for (var i = 0, len = this.length >>> 0; i < len; i++) {
      if (i in this && !fn.call(context, this[i], i, this)) {
        return false;
      }
    }
    return true;
  });


  // ES5 15.4.4.17
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some
  AP.some || (AP.some = function(fn, context) {
    for (var i = 0, len = this.length >>> 0; i < len; i++) {
      if (i in this && fn.call(context, this[i], i, this)) {
        return true;
      }
    }
    return false;
  });


  // ES5 15.4.4.21
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
  AP.reduce || (AP.reduce = function(fn /*, initial*/) {
    if (typeof fn !== 'function') {
      throw new TypeError(fn + ' is not an function');
    }

    var len = this.length >>> 0, i = 0, result;

    if (arguments.length > 1) {
      result = arguments[1];
    }
    else {
      do {
        if (i in this) {
          result = this[i++];
          break;
        }
        // if array contains no values, no initial value to return
        if (++i >= len) {
          throw new TypeError('reduce of empty array with on initial value');
        }
      }
      while (true);
    }

    for (; i < len; i++) {
      if (i in this) {
        result = fn.call(null, result, this[i], i, this);
      }
    }

    return result;
  });


  // ES5 15.4.4.22
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
  AP.reduceRight || (AP.reduceRight = function(fn /*, initial*/) {
    if (typeof fn !== 'function') {
      throw new TypeError(fn + ' is not an function');
    }

    var len = this.length >>> 0, i = len - 1, result;

    if (arguments.length > 1) {
      result = arguments[1];
    }
    else {
      do {
        if (i in this) {
          result = this[i--];
          break;
        }
        // if array contains no values, no initial value to return
        if (--i < 0)
          throw new TypeError('reduce of empty array with on initial value');
      }
      while (true);
    }

    for (; i >= 0; i--) {
      if (i in this) {
        result = fn.call(null, result, this[i], i, this);
      }
    }

    return result;
  });


  // ES5 15.4.4.14
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf
  AP.indexOf || (AP.indexOf = function(value, from) {
    var len = this.length >>> 0;

    from = Number(from) || 0;
    from = Math[from < 0 ? 'ceil' : 'floor'](from);
    if (from < 0) {
      from = Math.max(from + len, 0);
    }

    for (; from < len; from++) {
      if (from in this && this[from] === value) {
        return from;
      }
    }

    return -1;
  });


  // ES5 15.4.4.15
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf
  AP.lastIndexOf || (AP.lastIndexOf = function(value, from) {
    var len = this.length >>> 0;

    from = Number(from) || len - 1;
    from = Math[from < 0 ? 'ceil' : 'floor'](from);
    if (from < 0) {
      from += len;
    }
    from = Math.min(from, len - 1);

    for (; from >= 0; from--) {
      if (from in this && this[from] === value) {
        return from;
      }
    }

    return -1;
  });


  /*---------------------------------------*
   * String
   *---------------------------------------*/

  // ES5 15.5.4.20
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/trim
  // http://blog.stevenlevithan.com/archives/faster-trim-javascript
  // http://jsperf.com/mega-trim-test
  SP.trim || (SP.trim = (function() {

    // http://perfectionkills.com/whitespace-deviations/
    var whiteSpaces = [

      '\\s',
      //'0009', // 'HORIZONTAL TAB'
      //'000A', // 'LINE FEED OR NEW LINE'
      //'000B', // 'VERTICAL TAB'
      //'000C', // 'FORM FEED'
      //'000D', // 'CARRIAGE RETURN'
      //'0020', // 'SPACE'

      '00A0', // 'NO-BREAK SPACE'
      '1680', // 'OGHAM SPACE MARK'
      '180E', // 'MONGOLIAN VOWEL SEPARATOR'

      '2000-\\u200A',
      //'2000', // 'EN QUAD'
      //'2001', // 'EM QUAD'
      //'2002', // 'EN SPACE'
      //'2003', // 'EM SPACE'
      //'2004', // 'THREE-PER-EM SPACE'
      //'2005', // 'FOUR-PER-EM SPACE'
      //'2006', // 'SIX-PER-EM SPACE'
      //'2007', // 'FIGURE SPACE'
      //'2008', // 'PUNCTUATION SPACE'
      //'2009', // 'THIN SPACE'
      //'200A', // 'HAIR SPACE'

      '200B', // 'ZERO WIDTH SPACE (category Cf)
      '2028', // 'LINE SEPARATOR'
      '2029', // 'PARAGRAPH SEPARATOR'
      '202F', // 'NARROW NO-BREAK SPACE'
      '205F', // 'MEDIUM MATHEMATICAL SPACE'
      '3000' //  'IDEOGRAPHIC SPACE'

    ].join('\\u');

    var trimLeftReg = new RegExp('^[' + whiteSpaces + ']+');
    var trimRightReg = new RegExp('[' + whiteSpaces + ']+$');

    return function() {
      return String(this).replace(trimLeftReg, '').replace(trimRightReg, '');
    }

  })());


  /*---------------------------------------*
   * Date
   *---------------------------------------*/

  // ES5 15.9.4.4
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/now
  Date.now || (Date.now = function() {
    return +new Date;
  });

});


/**
 * @fileoverview 类
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/more/class',function(require,exports,module){

  //来自arale js

  // Class
  // -----------------
  // Thanks to:
  //  - http://mootools.net/docs/core/Class/Class
  //  - http://ejohn.org/blog/simple-javascript-inheritance/
  //  - https://github.com/ded/klass
  //  - http://documentcloud.github.com/backbone/#Model-extend
  //  - https://github.com/joyent/node/blob/master/lib/util.js
  //  - https://github.com/kissyteam/kissy/blob/master/src/seed/src/kissy.js


  // The base Class implementation.
  function Class(o) {
    // Convert existed function to Class.
    if (!(this instanceof Class) && isFunction(o)) {
      return classify(o)
    }
  }

  module.exports = Class


  // Create a new Class.
  //
  //  var SuperPig = Class.create({
  //    Extends: Animal,
  //    Implements: Flyable,
  //    initialize: function() {
  //      SuperPig.superclass.initialize.apply(this, arguments)
  //    },
  //    Statics: {
  //      COLOR: 'red'
  //    }
  // })
  //
  Class.create = function(parent, properties) {
    if (!isFunction(parent)) {
      properties = parent
      parent = null
    }

    properties || (properties = {})
    parent || (parent = properties.Extends || Class)
    properties.Extends = parent

    // The created class constructor
    function SubClass() {
      // Call the parent constructor.
      parent.apply(this, arguments)

      // Only call initialize in self constructor.
      if (this.constructor === SubClass && this.initialize) {
        this.initialize.apply(this, arguments)
      }
    }

    // Inherit class (static) properties from parent.
    if (parent !== Class) {
      mix(SubClass, parent, parent.StaticsWhiteList)
    }

    // Add instance properties to the subclass.
    implement.call(SubClass, properties)

    // Make subclass extendable.
    return classify(SubClass)
  }


  function implement(properties) {
    var key, value

    for (key in properties) {
      value = properties[key]

      if (Class.Mutators.hasOwnProperty(key)) {
        Class.Mutators[key].call(this, value)
      } else {
        this.prototype[key] = value
      }
    }
  }


  // Create a sub Class based on `Class`.
  Class.extend = function(properties) {
    properties || (properties = {})
    properties.Extends = this

    return Class.create(properties)
  }


  function classify(cls) {
    cls.extend = Class.extend
    cls.implement = implement
    return cls
  }


  // Mutators define special properties.
  Class.Mutators = {

    'Extends': function(parent) {
      var existed = this.prototype
      var proto = createProto(parent.prototype)

      // Keep existed properties.
      mix(proto, existed)

      // Enforce the constructor to be what we expect.
      proto.constructor = this

      // Set the prototype chain to inherit from `parent`.
      this.prototype = proto

      // Set a convenience property in case the parent's prototype is
      // needed later.
      this.superclass = parent.prototype

      // Add module meta information in sea.js environment.
      addMeta(proto)
    },

    'Implements': function(items) {
      isArray(items) || (items = [items])
      var proto = this.prototype, item

      while (item = items.shift()) {
        mix(proto, item.prototype || item)
      }
    },

    'Statics': function(staticProperties) {
      mix(this, staticProperties)
    }
  }


  // Shared empty constructor function to aid in prototype-chain creation.
  function Ctor() {
  }

  // See: http://jsperf.com/object-create-vs-new-ctor
  var createProto = Object.__proto__ ?
      function(proto) {
        return { __proto__: proto }
      } :
      function(proto) {
        Ctor.prototype = proto
        return new Ctor()
      }


  // Helpers
  // ------------

  function mix(r, s, wl) {
    // Copy "all" properties including inherited ones.
    for (var p in s) {
      if (s.hasOwnProperty(p)) {
        if (wl && indexOf(wl, p) === -1) continue

        // 在 iPhone 1 代等设备的 Safari 中，prototype 也会被枚举出来，需排除
        if (p !== 'prototype') {
          r[p] = s[p]
        }
      }
    }
  }


  var toString = Object.prototype.toString
  var isArray = Array.isArray

  if (!isArray) {
    isArray = function(val) {
      return toString.call(val) === '[object Array]'
    }
  }

  var isFunction = function(val) {
    return toString.call(val) === '[object Function]'
  }

  var indexOf = Array.prototype.indexOf ?
      function(arr, item) {
        return arr.indexOf(item)
      } :
      function(arr, item) {
        for (var i = 0, len = arr.length; i < len; i++) {
          if (arr[i] === item) {
            return i
          }
        }
        return -1
      }


  var getCompilingModule = module.constructor._getCompilingModule

  function addMeta(proto) {
    if (!getCompilingModule) return

    var compilingModule = getCompilingModule()
    if (!compilingModule) return

    var filename = compilingModule.uri.split(/[\/\\]/).pop()

    if (Object.defineProperties) {
      Object.defineProperties(proto, {
        __module: { value: compilingModule },
        __filename: { value: filename }
      })
    }
    else {
      proto.__module = compilingModule
      proto.__filename = filename
    }
  }

});

/**
 * @fileoverview 事件
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/more/events',function(require,exports,module){

  //来自arale js

  // Events
  // -----------------
  // Thanks to:
  //  - https://github.com/documentcloud/backbone/blob/master/backbone.js
  //  - https://github.com/joyent/node/blob/master/lib/events.js


  // Regular expression used to split event strings
  var eventSplitter = /\s+/


  // A module that can be mixed in to *any object* in order to provide it
  // with custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = new Events();
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  function Events() {
  }


  // Bind one or more space separated events, `events`, to a `callback`
  // function. Passing `"all"` will bind the callback to all events fired.
  Events.prototype.on = function(events, callback, context) {
    var cache, event, list
    if (!callback) return this

    cache = this.__events || (this.__events = {})
    events = events.split(eventSplitter)

    while (event = events.shift()) {
      list = cache[event] || (cache[event] = [])
      list.push(callback, context)
    }

    return this
  }


  // Remove one or many callbacks. If `context` is null, removes all callbacks
  // with that function. If `callback` is null, removes all callbacks for the
  // event. If `events` is null, removes all bound callbacks for all events.
  Events.prototype.off = function(events, callback, context) {
    var cache, event, list, i

    // No events, or removing *all* events.
    if (!(cache = this.__events)) return this
    if (!(events || callback || context)) {
      delete this.__events
      return this
    }

    events = events ? events.split(eventSplitter) : keys(cache)

    // Loop through the callback list, splicing where appropriate.
    while (event = events.shift()) {
      list = cache[event]
      if (!list) continue

      if (!(callback || context)) {
        delete cache[event]
        continue
      }

      for (i = list.length - 2; i >= 0; i -= 2) {
        if (!(callback && list[i] !== callback ||
            context && list[i + 1] !== context)) {
          list.splice(i, 2)
        }
      }
    }

    return this
  }


  // Trigger one or many events, firing all bound callbacks. Callbacks are
  // passed the same arguments as `trigger` is, apart from the event name
  // (unless you're listening on `"all"`, which will cause your callback to
  // receive the true name of the event as the first argument).
  Events.prototype.trigger = function(events) {
    var cache, event, all, list, i, len, rest = [], args
    if (!(cache = this.__events)) return this

    events = events.split(eventSplitter)

    // Fill up `rest` with the callback arguments.  Since we're only copying
    // the tail of `arguments`, a loop is much faster than Array#slice.
    for (i = 1, len = arguments.length; i < len; i++) {
      rest[i - 1] = arguments[i]
    }

    // For each event, walk through the list of callbacks twice, first to
    // trigger the event, then to trigger any `"all"` callbacks.
    while (event = events.shift()) {
      // Copy callback lists to prevent modification.
      if (all = cache.all) all = all.slice()
      if (list = cache[event]) list = list.slice()

      // Execute event callbacks.
      if (list) {
        for (i = 0, len = list.length; i < len; i += 2) {
          list[i].apply(list[i + 1] || this, rest)
        }
      }

      // Execute "all" callbacks.
      if (all) {
        args = [event].concat(rest)
        for (i = 0, len = all.length; i < len; i += 2) {
          all[i].apply(all[i + 1] || this, args)
        }
      }
    }

    return this
  }


  // Mix `Events` to object instance or Class function.
  Events.mixTo = function(receiver) {
    receiver = receiver.prototype || receiver
    var proto = Events.prototype

    for (var p in proto) {
      if (proto.hasOwnProperty(p)) {
        receiver[p] = proto[p]
      }
    }
  }


  // Helpers
  // -------

  var keys = Object.keys

  if (!keys) {
    keys = function(o) {
      var result = []

      for (var name in o) {
        if (o.hasOwnProperty(name)) {
          result.push(name)
        }
      }
      return result
    }
  }

  module.exports = Events;

});

/**
 * @fileoverview 业务对象基类
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 * @example
	var $base = require('lib/base/base');
	var obj = new $base();

	//下面的change事件仅在值发生变更时触发
	obj.set('prop', 'value');
	//trigger : 'change:prop'
	//trigger : 'change'

	obj.set('obj.prop', 'value');
	//trigger : 'change:obj.prop'
	//trigger : 'change:obj'
	//trigger : 'change'

	obj.set( {obj:{ prop:'value' }} );
	//trigger : 'change:obj.prop'
	//trigger : 'change:obj'
	//trigger : 'change'

	obj.get('prop');
	obj.get('obj.prop');
 */

define('lib/base/base',function(require,exports,module){
	var $ = require('lib');
	var $class = require('lib/more/class');
	var $events = require('lib/more/events');

	//遍历从属实例的方法
	//{String} name 要调用的子对象方法名称
	var traverse = function(name){
		if(this.objs){
			$.each(this.objs, function(k, o){
				if( o && $.isFunction(o[name])){
					o[name]();
				}
			});
		}
	};

	//一边混合对象，一边检查变更
	//param {Object} original 待混合的对象
	//param {Object} object 待混合的对象
	//param {String} pth 对象所在的访问路径
	//param {Array} mergeDiffs 混合对象时，产生属性差异的路径集合
	var merge = function(original, object, pth, mergeDiffs) {
		var k;
		var chg = false;	//标记是否发生过值的变更
		var diff = false;	//标记每轮属性检查中，是否有值的变更
		for (k in object) {
			diff = false;

			//仅对纯 object 递归
			if ($.isPlainObject(object[k])) {
				if ($.type(original[k]) !== 'object') {
					original[k] = {};
					diff = true;
					chg = true;
				}
				diff = merge(original[k], object[k], pth.concat([k]), mergeDiffs);
				if (chg === false) {
					chg = diff;
				}
			} else {
				if (original[k] !== object[k]) {
					diff = true;
					chg = true;
				}
				original[k] = object[k];
			}

			//每轮属性检查都要判断是否有属性变更
			if (diff) {
				mergeDiffs.push(pth.concat([k]).join('.'));
			}
		}
		return chg;
	};

    //业务对象的基类
	var Base = $class.create({
		Implements : [$events],
		//这里用来配置基础选项
		//这个对象被绑定在原型上，不要修改这个对象
		//这是为了方便实例化之后再次调用setOptions方法
		//在继承中，这个选项会被完全覆盖，属性不会混合
		options : {},
		//初始化
		initialize : function(options){
			this.objs = {};		//存放组件相关的对象实例
			this.nodes = {};	//存放组件相关的DOM元素
			this.data = {};		//存放组件相关数据
			this.bound = {};	//存放组件需要绑定的事件函数

			this.setOptions(options);	//设置选项
			this.prepare();				//解析DOM之前需要做的准备工作
			this.parseDom();			//解析DOM
			this.build();				//构造组件
			this.setBound();			//创建可绑定的事件函数
			this.detach();				//先确保组件为拆卸状态
			this.attach();				//安装组件
		},
		//设置选项
		//选项的属性会被复制到this.data
		setOptions : function(options){
			this.conf = $.extend(true, {}, this.options, options);
			this.set('conf', $.extend(true, {}, this.conf));
		},
		//解析DOM之前的准备
		prepare : $.noop,
		//解析DOM
		parseDom : $.noop,
		//构建模块
		build : $.noop,
		//把要绑定的事件函数添加到this.bound对象上
		setBound : function(){
			this.bound = {};
		},
		//向this.bound对象添加一个本对象的同名函数，作为要绑定的事件
		getBound : function(name){
			var that = this;
			var bound = this.bound;
			name = name || 'getBound';
			if($.type(bound[name]) !== 'function'){
				bound[name] = function(){
					if($.type(that[name]) === 'function'){
						return that[name].apply(that, arguments);
					}
				};
			}
			return bound[name];
		},
		//设置DOM事件
		setDomEvents : $.noop,
		//设置自定义事件
		setCustEvents : $.noop,
		//设置广播事件
		setListener : $.noop,
		//设置属性
		set : function(key, val){
			var that = this;
			var keys, obj, prop;
			var changed = false;
			var path = [];
			var differences = [];
			var mergeDiffs = [];
			if (this.data) {
				//考虑键值为'prop.inner'的情况
				if ($.type(key) === 'string') {
					obj = this.data;
					keys = key.split(/\./);
					while (keys.length) {
						prop = keys.shift();
						path.push(prop);
						differences.push(path.join('.'));
						if (keys.length && $.type(obj[prop]) !== 'object') {
							obj[prop] = keys.length ? {} : val;
							changed = true;
						}
						if (keys.length) {
							obj = obj[prop];
						} else {
							if ($.isPlainObject(val)) {
								if ($.type(obj[prop]) !== 'object') {
									obj[prop] = {};
									changed = true;
								}
								merge(obj[prop], val, path, mergeDiffs);
							} else {
								if (obj[prop] !== val) {
									changed = true;
								}
								obj[prop] = val;
							}
						}
					}
				} else if ($.isPlainObject(key)) {
					merge(this.data, key, path, mergeDiffs);
				}
				if (changed || mergeDiffs.length) {
					mergeDiffs.concat(differences.reverse()).forEach(function(t) {
						that.trigger('change:' + t);
					});
					that.trigger('change');
				}
			}
		},
		//获取属性
		get : function(key){
			var keys, val;
			if($.type(key) !== 'string'){return;}
			if(this.data){
				val = this.data;
				keys = key.split(/\./);
				while(keys.length){
					if(val){
						val = val[keys.shift()];
					}else{
						break;
					}
				}
				if($.type(val) === 'object'){
					return $.extend(true, {}, val);
				}else if($.type(val) === 'array'){
					return $.extend(true, [], val);
				}else{
					return val;
				}
			}
		},
		//安装组件
		attach : function(){
			if(this.get('attached')){return;}

			this.setDomEvents('add');		//绑定DOM事件
			this.setCustEvents('add');		//绑定自定义事件
			this.setListener('add');		//绑定广播
			traverse.call(this, 'attach');	//遍历子对象的attach方法

			this.set('attached', true);		//标记组建状态为已加载
			this.trigger('attach');			//绑定好事件后，触发attach事件
		},
		//拆卸组件
		detach : function(){
			if(!this.get('attached')){return;}

			this.set('attached', false);	//标记组件状态为已拆卸
			this.trigger('detach');			//在解绑事件前，触发detach事件

			traverse.call(this, 'detach');	//遍历子对象的detach方法
			this.setListener('remove');		//解除广播
			this.setCustEvents('remove');	//解除自定义事件
			this.setDomEvents('remove');	//解除DOM事件
		},
		//销毁组件
		destroy : function(){
			this.trigger('destroy');
			this.detach();
			this.off();
			$.each(this.nodes, function(key, node){
				$(node).remove();
			});
			traverse.call(this, 'destroy');
			this.conf = null;
			this.objs = null;
			this.nodes = null;
			this.data = null;
			this.bound = null;
		}
	});

	module.exports = Base;

});


/**
 * @fileoverview JSON与参数串的切换
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/more/querystring', function(require,exports,module) {

  // QueryString
  // ---------------
  // This module provides utilities for dealing with query strings.
  //
  // Thanks to:
  //  - http://nodejs.org/docs/v0.4.7/api/querystring.html
  //  - http://developer.yahoo.com/yui/3/api/QueryString.html


  var QueryString = {};


  // The escape/unescape function used by stringify/parse, provided so that it
  // could be overridden if necessary. This is important in cases where
  // non-standard delimiters are used, if the delimiters would not normally be
  // handled properly by the built-in (en|de)codeURIComponent functions.
  QueryString.escape = encodeURIComponent;

  QueryString.unescape = function(s) {
    // The + character is interpreted as a space on the server side as well as
    // generated by forms with spaces in their fields.
    return decodeURIComponent(s.replace(/\+/g, ' '));
  };


  /**
   * Serialize an object to a query string. Optionally override the default
   * separator and assignment characters.
   *
   * stringify({foo: 'bar'})
   *   // returns 'foo=bar'
   *
   * stringify({foo: 'bar', baz: 'bob'}, ';', ':')
   *   // returns 'foo:bar;baz:bob'
   */
  QueryString.stringify = function(obj, sep, eq, arrayKey) {
    if (!isPlainObject(obj)) return '';

    sep = sep || '&';
    eq = eq || '=';
    arrayKey = arrayKey || false;

    var buf = [], key, val;
    var escape = QueryString.escape;

    for (key in obj) {
      if (!hasOwnProperty.call(obj, key)) continue;

      val = obj[key];
      key = QueryString.escape(key);

      // val is primitive value
      if (isPrimitive(val)) {
        buf.push(key, eq, escape(val + ''), sep);
      }
      // val is not empty array
      else if (isArray(val) && val.length) {
        for (var i = 0; i < val.length; i++) {
          if (isPrimitive(val[i])) {
            buf.push(
                key,
                (arrayKey ? escape('[]') : '') + eq,
                escape(val[i] + ''),
                sep);
          }
        }
      }
      // ignore other cases, including empty array, Function, RegExp, Date etc.
      else {
        buf.push(key, eq, sep);
      }
    }

    buf.pop();
    return buf.join('');
  };


  /**
   * Deserialize a query string to an object. Optionally override the default
   * separator and assignment characters.
   *
   * parse('a=b&c=d')
   *   // returns {a: 'b', c: 'c'}
   */
  QueryString.parse = function(str, sep, eq) {
    var ret = {};

    if (typeof str !== 'string' || trim(str).length === 0) {
      return ret;
    }

    var pairs = str.split(sep || '&');
    eq = eq || '=';
    var unescape = QueryString.unescape;

    for (var i = 0; i < pairs.length; i++) {

      var pair = pairs[i].split(eq);
      var key = unescape(trim(pair[0]));
      var val = unescape(trim(pair.slice(1).join(eq)));

      var m = key.match(/^(\w+)\[\]$/);
      if (m && m[1]) {
        key = m[1];
      }

      if (hasOwnProperty.call(ret, key)) {
        if (!isArray(ret[key])) {
          ret[key] = [ret[key]];
        }
        ret[key].push(val);
      }
      else {
        ret[key] = m ? [val] : val;
      }
    }

    return ret;
  };


  // Helpers

  var toString = Object.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray || function(val) {
    return toString.call(val) === '[object Array]';
  };
  var trim = String.prototype.trim ?
      function(str) {
        return (str == null) ?
            '' :
            String.prototype.trim.call(str);
      } :
      function(str) {
        return (str == null) ?
            '' :
            str.toString().replace(/^\s+/, '').replace(/\s+$/, '');
      };


  /**
   * Checks to see if an object is a plain object (created using "{}" or
   * "new Object()" or "new FunctionClass()").
   */
  function isPlainObject(o) {
    /**
     * NOTES:
     * isPlainObject(node = document.getElementById("xx")) -> false
     * toString.call(node):
     *   ie678 === '[object Object]', other === '[object HTMLElement]'
     * 'isPrototypeOf' in node:
     *   ie678 === false, other === true
     */
    return o &&
        toString.call(o) === '[object Object]' &&
        'isPrototypeOf' in o;
  }


  /**
   * If the type of o is null, undefined, number, string, boolean,
   * return true.
   */
  function isPrimitive(o) {
    return o !== Object(o);
  }

  module.exports = QueryString;

});


/**
 * @fileoverview 模板渲染
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/more/mustache',function(require,exports,module){

	var $mustache = require('vendor/mustache');

	module.exports = $mustache;

});


/**
 * @fileoverview 定位
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/more/position', function(require,exports,module) {

    // Position
    // --------
    // modified by liangdong2@staff.sina.com.cn
    // 定位工具组件，将一个 DOM 节点相对对另一个 DOM 节点进行定位操作。
    // 代码易改，人生难得

    var Position = exports,
        VIEWPORT = { _id: 'VIEWPORT', nodeType: 1 },
        $ = require('lib'),
        isPinFixed = false,
        isIE6 = false;


    // 将目标元素相对于基准元素进行定位
    // 这是 Position 的基础方法，接收两个参数，分别描述了目标元素和基准元素的定位点
    Position.pin = function(pinObject, baseObject) {

        // 将两个参数转换成标准定位对象 { element: a, x: 0, y: 0 }
        pinObject = normalize(pinObject);
        baseObject = normalize(baseObject);

        // 设定目标元素的 position 为绝对定位
        // 若元素的初始 position 不为 absolute，会影响元素的 display、宽高等属性
        var pinElement = $(pinObject.element);

        if (pinElement.css('position') !== 'fixed' || isIE6) {
            pinElement.css('position', 'absolute');
            isPinFixed = false;
        }
        else {
            // 定位 fixed 元素的标志位，下面有特殊处理
            isPinFixed = true;
        }

        // 将位置属性归一化为数值
        // 注：必须放在上面这句 `css('position', 'absolute')` 之后，
        //    否则获取的宽高有可能不对
        posConverter(pinObject);
        posConverter(baseObject);

        var parentOffset = getParentOffset(pinElement);
        var baseOffset = baseObject.offset();

        // 计算目标元素的位置
        var top = baseOffset.top + baseObject.y -
                pinObject.y - parentOffset.top;

        var left = baseOffset.left + baseObject.x -
                pinObject.x - parentOffset.left;

        // 定位目标元素
        pinElement.css({ left: left, top: top });
    };


    // 将目标元素相对于基准元素进行居中定位
    // 接受两个参数，分别为目标元素和定位的基准元素，都是 DOM 节点类型
    Position.center = function(pinElement, baseElement) {
        Position.pin({
            element: pinElement,
            x: '50%',
            y: '50%'
        }, {
            element: baseElement,
            x: '50%',
            y: '50%'
        });
    };


    // 这是当前可视区域的伪 DOM 节点
    // 需要相对于当前可视区域定位时，可传入此对象作为 element 参数
    Position.VIEWPORT = VIEWPORT;


    // Helpers
    // -------

    // 将参数包装成标准的定位对象，形似 { element: a, x: 0, y: 0 }
    function normalize(posObject) {
        posObject = toElement(posObject) || {};

        if (posObject.nodeType) {
            posObject = { element: posObject };
        }

        var element = toElement(posObject.element) || VIEWPORT;
        if (element.nodeType !== 1) {
            throw new Error('posObject.element is invalid.');
        }

        var result = {
            element: element,
            x: posObject.x || 0,
            y: posObject.y || 0
        };

        // config 的深度克隆会替换掉 Position.VIEWPORT, 导致直接比较为 false
        var isVIEWPORT = (element === VIEWPORT || element._id === 'VIEWPORT');

        // 归一化 offset
        result.offset = function() {
            // 若定位 fixed 元素，则父元素的 offset 没有意义
            if (isPinFixed) {
                return {
                    left: 0,
                    top: 0
                };
            }
            else if (isVIEWPORT) {
                return {
                    left: $(window).scrollLeft(),
                    top: $(window).scrollTop()
                };
            }
            else {
                return $(element).offset();
            }
        };

        // 归一化 size, 含 padding 和 border
        result.size = function() {
            var el = isVIEWPORT ? $(window) : $(element);
            return {
                width: el.width(),
                height: el.height()
            };
        };

        return result;
    }

    // 对 x, y 两个参数为 left|center|right|%|px 时的处理，全部处理为纯数字
    function posConverter(pinObject) {
        pinObject.x = xyConverter(pinObject.x, pinObject, 'width');
        pinObject.y = xyConverter(pinObject.y, pinObject, 'height');
    }

    // 处理 x, y 值，都转化为数字
    function xyConverter(x, pinObject, type) {
        // 先转成字符串再说！好处理
        x = x + '';

        // 处理 px
        x = x.replace(/px/gi, '');

        // 处理 alias
        if (/\D/.test(x)) {
            x = x.replace(/(?:top|left)/gi, '0%')
                 .replace(/center/gi, '50%')
                 .replace(/(?:bottom|right)/gi, '100%');
        }

        // 将百分比转为像素值
        if (x.indexOf('%') !== -1) {
            //支持小数
            x = x.replace(/(\d+(?:\.\d+)?)%/gi, function(m, d) {
                return pinObject.size()[type] * (d / 100.0);
            });
        }

        // 处理类似 100%+20px 的情况
        if (/[+\-*\/]/.test(x)) {
            try {
                // eval 会影响压缩
                // new Function 方法效率高于 for 循环拆字符串的方法
                // 参照：http://jsperf.com/eval-newfunction-for
                x = (new Function('return ' + x))();
            } catch (e) {
                throw new Error('Invalid position value: ' + x);
            }
        }

        // 转回为数字
        return numberize(x);
    }

    // 获取 offsetParent 的位置
    function getParentOffset(element) {
        var parent = element.offsetParent();

        if (parent[0] === document.documentElement) {
            parent = $(document.body);
        }

        // 修正 ie6 下 absolute 定位不准的 bug
        if (isIE6) {
            parent.css('zoom', 1);
        }

        // 获取 offsetParent 的 offset
        // 注1：document.body 会默认带 8 像素的偏差
        //
        // 注2：IE7 下，body 子节点的 offsetParent 为 html 元素，其 offset 为
        // { top: 2, left: 2 }，会导致定位差 2 像素，所以这里将 parent
        // 转为 document.body
        //
        // 以上两种情况直接赋为 0
        var offset = (parent[0] === document.body) ?
            { left: 0, top: 0 } : parent.offset();

        // 根据基准元素 offsetParent 的 border 宽度，来修正 offsetParent 的基准位置
        offset.top += numberize(parent.css('border-top-width'));
        offset.left += numberize(parent.css('border-left-width'));

        return offset;
    }

    function numberize(s) {
        return parseFloat(s, 10) || 0;
    }

    function toElement(element) {
        return $(element)[0];
    }

});


/**
 * @fileoverview 公共广播频道
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/channel',function(require,exports,module){

	var $listener = require('lib/common/listener');
	module.exports = new $listener([
		//用户登录后会触发
		'login',
		//注销，用户注销后会触发
		'logout',
		//页面首次载入全部所需模块时触发
		'pl-loaded',
		//请求了页面内容
		'content-requested',
		//登录状态发生变更，包括登录，注销，切换用户
		'login-state-change',
		//需要登录时触发
		'need-login',
		//需要注册时触发
		'need-register',
		//页面被删除后触发
		'page-deleted',
		//页面组件有安装(attach)或者拆除(detach)时触发
		'pagelets-update',
		//页面内容与状态更新时触发
		'content-update',
		//地址发生了变更后触发
		'location-change',
		//需要变更地址时触发
		'change-location',
		// 博文列表接口调用触发
		'blog-list-request'
	]);
});

/**
 * @fileoverview 内容管理器: 解决获取页面内容的问题 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/contentM',function(require,exports,module){

	var $ = require('lib');
	var $channel = require('lib/common/channel');
	var $location = require('lib/common/location');
	var $user = require('lib/common/user');
	var $transmission = require('lib/common/transmission');
	var $hiddenIframe = require('lib/kit/dom/hiddenIframe');
	var $makeReady = require('lib/kit/util/makeReady');
	var $scope = require('lib/common/scope');

	var RSCRIPT = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
	var RHEAD = /<!DOCTYPE html>[\w\W]*<body\b[^<]*>/gi;
	var RFOOT = /<\/body>[\w\W]*<\/html>/gi;
	var RIFRAME = /<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi;

	//定义内容获取通用接口
	var $trans = new $transmission();

	//获取页面HTML的接口
	$trans.register('content', {
		//使用get请求可以提升访问速度
		//http://www.oncoding.cn/2009/ajax-get-post/
		type : 'get',
		//添加此项，去除get请求附带的随机数
		cache: true,
		//添加此项，即使有cache选项，也禁止transport组件在内存中缓存页面数据
		forceToRequest : true,
		dataType : 'html',
		autoExecuteFailure : true,
		url: ''
	});

	//获取特定标签元素的内容
	//param {String} html 要获取内容的源HTML文本
	//param {String} tagName 要获取内容的标签名称
	var getTagContent = function(html, tagName){
		var arr = [];
		var reg = new RegExp('<' + tagName + '\\b[^<]*(?:(?!<\\/' + tagName + '>)<[^<]*)*<\\/' + tagName + '>', 'gi');
		var regClear = new RegExp('<[\\/]*' + tagName + '([^>]?)*>', 'gi');
		var match = reg.exec(html);
		if(match && match[0]){
			arr.push(match[0]);
		}
		while(match && match.length){
			match = reg.exec(html);
			if(match && match[0]){
				arr.push(match[0]);
			}
		}
		return arr.map(function(m){
			return m.replace(regClear,'').replace(/[\r\n]/gi, '');
		});
	};

	//用于缓存页面
	var pageCache = {};

	//地址队列
	var locationQueue = [];

	//记录没有重定向，不是报错页的地址
	var availableUrl = 'http://about:blank';

	//进入的页面地址
	var startUrl = window.location.href;

	//解析器列表
	var parserList = {};

	//解析器简单模型
	var Parser = function(id){
		this.id = id;
		this.active = true;
	};
	Parser.prototype = {
		//解析DOM前的预备工作
		//通常用来设置组件的loading状态
		prepare : $.noop,
		//解析器解析函数，完成对DOM的数据解析
		parse : $.noop,
		//解析器自检
		//是从当前页面DOM中获取数据，还是从iframe加载DOM获取数据
		check : function(){
			ContentManager.checkParser(this.id);
		},
		//激活解析器
		enable : function(){
			this.active = true;
		},
		//禁止解析器
		disable : function(){
			this.active = false;
		}
	};

	//博客内容管理模块
	//在接口实现前负责解析原有页面的内容，获取页面数据
	var ContentManager = {
		//获取用于解析HTML的隐藏iframe
		getIframe : function(){
			if(!this.iframe){
				this.iframe = $hiddenIframe.create();
			}
			return this.iframe;
		},
		//获取当前页面的地址
		getLocation : function(){
			var url = $location.get().url;
			return url.replace(/#.+/, '');
		},
		//保存之前访问的地址到队列中，只保存2个
		saveLocation : function(url){
			if(locationQueue[locationQueue.length - 1] !== url){
				locationQueue.push(url);
			}
			if(locationQueue.length > 2){
				locationQueue.shift();
			}
		},
		//获取前一页地址
		getBeforeLocation : function(){
			// 如果上一页地址和当前地址相同，置空
			if(this.getLocation() === locationQueue[0]) {
				return '';
			}
			return locationQueue[0] || '';
		},
		//构建页面缓存，在页面成功加载后执行回调
		request : function(type, options){
			var that = this;

			var conf = $.extend({
				cache : true,
				onSuccess : $.noop
			}, options);

			//每次请求前检查登录状态是否发生了变更
			$user.checkLoginState();

			//仅需要负责获取当前地址的数据
			var url = this.getLocation();
			var page;

			this.saveLocation(url.toLowerCase());

			if(conf.cache){
				page = pageCache[url];
			}

			//如果未缓存该页面，创建该页面的缓存对象
			if(!page){
				page = pageCache[url] = $makeReady({

					condition : function(){
						
						return page && page.html;
					},
					ready : function(callback){
						var onSuccess = function(html){
							page.html = html;

							var redirectUrl = that.getRedirectUrl(html);
							var beforeLocation = that.getBeforeLocation();
							var targetUrl = '';

							if(redirectUrl){
								//如果在当前地址的页面取得了要重定向的地址
								//说明该页面为不正常页面
								if(that.isExceptionUrl(redirectUrl)){
									//如果要重定向的页面为错误页
									if(that.isExceptionUrl(beforeLocation)){
										//如果前一页就是错误页，则说明是从错误页往回跳转
										//此时应当跳转到可用页面
										targetUrl = availableUrl;
									}else{
										//否则说明是从当前页要跳转到错误页，直接跳转到重定向页面
										targetUrl = redirectUrl;
									}
								}else{
									//如果重定向的页面不是错误页，直接跳转到要重定向的页面
									targetUrl = redirectUrl;
								}

								//不要缓存重定向的页面
								delete pageCache[url];
								$channel.fire('change-location', targetUrl);
							}else{
								if(that.isExceptionUrl(url)){
									//如果当前地址为错误页的地址
									//说明该页面为不正常页面
									callback();

									//先产生回调
									//但不要缓存错误页
									delete pageCache[url];
								}else{
									//其他情况下判定为正常页面
									//记录该页面地址
									availableUrl = url;
									callback();
								}
							}
						};

						if(that.isSameUrl(window.location.href, startUrl)){
							//仅在第一次解析页面时，判断地址是否为进入应用的地址
							//用户再次回到这个地址时，将会重新发起请求。
							startUrl = '';
							//html必须提早获取
							//避免组件操作HTML再获取，得到的是不正确的原始html字符串
							var html = [
								document.body.innerHTML,
								'<title>', $('title').html() ,'</title>'
							].join('');

							setTimeout(function(){
								//makeReady的回调必须在一个延时后发生
								//否则会漏掉处理函数
								onSuccess(html);
							});
						}else{
							var startReqTime = (new Date()).getTime();
							// 超时
							var timer = setTimeout(function(){
								$channel.fire('content-requested', {
									type : 'timeout',
									time : new Date() - startReqTime
								});
							}, 1000 * 10);
							$trans.request('content', {
								url : url,
								onSuccess : function(html){
									$channel.fire('content-requested', {
										type : 'success',
										time : new Date() - startReqTime
									});
									onSuccess(html);
								},
								onFailure : function(){
									$channel.fire('content-requested', {
										type : 'failure',
										time : new Date() - startReqTime
									});
									delete pageCache[url];
									callback();
								},
								onComplete : function(){
									if(timer) {
										clearTimeout(timer);
										timer = null;
									}
								}
							});
						}
					}
				});
			}

			//由该页面的缓存对象回调所需数据
			page.exec(function(){
				var nowUrl = that.getLocation();
				if(nowUrl === url){
					//被缓存的页面未必都是正常页面
					if(!that.isExceptionUrl(url)){
						availableUrl = url;
					}

					var rs = {};
					rs.data = that.parse(page.html);
					if($.type(conf.onSuccess) === 'function'){
						conf.onSuccess(rs);
					}
				}
			});
		},
		//是否为错误页
		isExceptionUrl : function(url){
			url = url + '';
			var result = (/mblog\/controllers\/exception.php/).test(url);
			return result;
		},
		//检查是否为相同地址
		//定义为：除了hash，其他部分都相同
		isSameUrl : function(url1, url2){
			url1 = url1 || '';
			url2 = url2 || '';
			var reg = (/\#.*/gi);
			url1 = url1.replace(reg, '');
			url2 = url2.replace(reg, '');
			return (url1 && url2 && url1 === url2);
		},
		//解析页面内容
		parse : function(html){
			var data = {};

			//将用于解析页面内容的iframe传递出去，给各个组件使用
			//将解析页面内容的逻辑分散到各个组件
			data.box = this.getIframe();

			//只有要解析的内容与之前不同时，才更新iframe中的HTML
			//避免iframe中的html被重复渲染消耗时间
			if(html !== this.currentHtml){
				this.currentHtml = html;

				this.setTitle(html);
				window.scope = $.extend(true, {}, this.getScope(html));
				$scope.update();

				//取得html的body的内容，输出到iframe，然后从中获取某个元素的内容
				html = html.replace(RSCRIPT, '');
				html = html.replace(RHEAD, '');
				html = html.replace(RFOOT, '');
				html = html.replace(RIFRAME, '');

				data.box.html(html);
			}

			data.scope = $.extend(true, {}, window.scope);
			return data;
		},
		//设置当前页面的title
		setTitle : function(html){
			var title = getTagContent(html, 'title')[0] || '';
			$('title').html(title);
		},
		//获取页面上的scope对象
		getScope : function(html){
			var scopeScript = '';
			var scope;
			var scripts = getTagContent(html, 'script');
			if(scripts.length){
				scopeScript = scripts.filter(function(str){
					return (/var scope/gi).test(str);
				})[0];
			}
			if(scopeScript){
				scope = scopeScript.replace(/var\s*scope\s*=\s*/,'').replace('};', '}');
				//避免使用 Function 和 eval，降低遭受XSS攻击的风险
				scope = JSON.parse(scope);
			}
			return scope;
		},
		//获取页面的重定向地址
		getRedirectUrl : function(html){
			var recirectScript = '';
			var redirectUrl = '';
			var scripts = getTagContent(html, 'script');
			if(scripts.length){
				recirectScript = scripts.filter(function(str){
					return (/window.location.href=/gi).test(str);
				})[0];
			}
			if(recirectScript){
				redirectUrl = recirectScript.replace(/window.location.href='|';/gi, '');
			}
			return redirectUrl.toLowerCase();
		},
		//清除当前页面缓存
		clearCache : function(){
			var url = this.getLocation();
			delete pageCache[url];
		},
		//清除所有页面缓存
		clearAllPageCache : function(){
			$.each(pageCache, function(key){
				pageCache[key] = null;
				delete pageCache[key];
			});
		},
		//注册一个内容解析器
		setParser : function(id, fn){
			var node, parser;
			//console.log(id,parserList);
			parser = parserList[id];
			if(parser){
				parser.enable();
			}else{
				parser = parserList[id] = new Parser(id);
				if($.isFunction(fn)){
					parser.parse = fn;
					parser.check();
				}
			}
			return parser;
		},
		//移除注册的内容解析器
		removeParser : function(id){
			delete parserList[id];
		},
		//通过ajax获取当前页面实际内容
		//@param plId pagelet组件的id，需要带头部的'#'字符
		
		checkParser : function(plId){
			if(plId){
				//存在plId参数，则进行单个解析器的检查
				var plParser = parserList[plId];
				if(plParser && plParser.active){
					//console.log(plId);
					//只要存在解析器，并且解析器处于激活状态
					//就请求页面内容
					

					plParser.prepare();
					this.request('parser', {
						onSuccess : function(rs){
							var box, node;
							if(rs && rs.data && rs.data.box){
								box = rs.data.box;
								node = box.getNode(plId);
								
								plParser.parse(node);
							}
						}
					});
				}
			}else{
				//不存在plId参数，则遍历检查所有解析器
				var execQueue = [];
				$.each(parserList, function(id, parser){
					if(parser.active){
						//将每个解析器设置为准备状态
						//将拿到内容的回调统一放到一个处理队列中
						parser.prepare();
						execQueue.push(function(box){
							var node = box.getNode(id);
							parser.parse(node);
						});
					}
				});

				//只要处理队列不为空，就发起请求获取组件内容
				//请求内容拿到后，遍历队列处理解析器的解析函数
				if(execQueue.length){
					this.request('parser', {
						onSuccess : function(rs){
							var box, node;
							if(rs && rs.data && rs.data.box){
								box = rs.data.box;
								execQueue.forEach(function(fn){
									fn(box);
								});
							}
						}
					});
				}
			}
		}
	};

	//如果用户状态发生了变更，则需要重置内容缓存
	$channel.on('login-state-change', function(){
		ContentManager.clearAllPageCache();
		$channel.fire('content-update');
	});

	//如果页面组件发生了更新，则触发内容更新广播事件
	$channel.on('pagelets-update', function(){
		$channel.fire('content-update');
	});

	//如果内容发生了更新，则需要检查解析器
	$channel.on('content-update', function(){
		ContentManager.checkParser();
	});

	//有时需要直接删除页面缓存
	//例如删除当前页面
	$channel.on('page-deleted', function(){
		ContentManager.clearAllPageCache();
	});

	module.exports = ContentManager;

});



/**
 * @fileoverview 地址管理器：pushState解决方案
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/historyM',function(require,exports,module){

	var $ = require('lib');
	var $parseURL = require('lib/kit/str/parseURL');
	var $delay = require('lib/kit/func/delay');
	var $model = require('lib/mvc/model');
	var $querystring = require('lib/more/querystring');

	var haveHashchangeEvt = ('onhashchange' in window) && ((typeof document.documentMode === 'undefined') || document.documentMode == 8);

	//获取参数对象
	var getPara = function(item, tag){
		var reg = new RegExp('^\\' + tag + '*');
		var para;
		if($.type(item) === 'string'){
			para = $querystring.parse(
				item.replace(/^\?*/, '')
			);
		}else if($.isPlainObject(item)){
			para = item;
		}
		return para;
	};

	var HistoryM = $model.extend({
		defaults : {
			//域名
			host : '',
			//完整地址
			href : '',
			//去除所有参数的地址
			path : '',
			//hash部分，不包括开头的'#'
			hash : '',
			//search部分，不包括开头的'?'
			query : ''
		},
		build : function(){
			this.delayCheck = $delay(this.delayCheck, 1);
			this.currentHref = '';
			this.popState();
		},
		setEvents : function(action){
			var proxy = this.proxy();
			$(window).on('popstate', proxy('onPopState'));
			if(haveHashchangeEvt){
				$(window).on('hashchange', proxy('onHashChange'));
			}
		},
		//监听popstate的事件函数
		onPopState : function(){
			this.ignoreHash = false;
			this.stateChange();
		},
		//更新hash对象
		onHashChange : function(){
			this.parse();
			this.trigger('hashchange');
		},
		//地址变更检查
		stateChange : function(){
			var href = this.parseURL().url;
			var currentHref = this.currentHref;
			//仅在pushState时区分hash
			if(this.ignoreHash){
				href = href.replace(/#.*$/, '');
				currentHref = currentHref.replace(/#.*$/, '');
			}
			if(href !== currentHref){
				this.popState();
			}
		},
		//检测状态变化后的事件处理
		popState : function(){
			this.parse();
			this.trigger('popstate');
		},
		//解析当前地址，更新当前地址对象
		parse : function(){
			var loc = this.parseURL();
			this.currentHref = loc.url;
			this.ignoreHash = true;
			this.set({
				host : loc.host,
				href : loc.url,
				path : loc.path,
				hash : loc.hash,
				query : loc.query
			});
		},
		//解析一个URL，确保有一个地址完整的属性
		//可以解析的URL包括同域路径，完整路径
		//单独的query和hash要补足地址
		parseURL : function(url){
			url = url || window.location.href;
			//如果地址不是http:之类的开头，或者不是'/'字符开头
			//在开头加上'/'字符确保$parseURL方法能够正常解析地址
			if( !(/^([a-z]+\:|\/)/i).test(url) ){
				url = '/' + url;
			}
			var loc = $parseURL(url);
			var nowLoc = $parseURL(window.location.href);
			loc.host = loc.host || nowLoc.host;
			loc.scheme = loc.scheme || nowLoc.scheme;
			loc.url = [
				loc.scheme + ':',
				(loc.slash || '//'),
				loc.host,
				'/' + loc.path,
				(loc.query ? '?' + loc.query : ''),
				(loc.hash ? '#' + loc.hash  : '')
			].join('');
			loc.path = '/' + loc.path;
			return loc;
		},
		//获取当前完整地址
		getURL : function(){
			return this.get('href');
		},
		//以pushState方式设置url
		//如果不支持pushState, 直接跳转
		//如果跨域，直接跳转
		pushState : function(url){
			var loc = this.parseURL(url);
			var nowLoc = this.parseURL();
			if(
				loc.host === nowLoc.host &&
				loc.scheme === nowLoc.scheme &&
				$.isFunction(window.history.pushState)
			){
				this.ignoreHash = false;
				window.history.pushState(null, null, loc.url);
				this.stateChange();
				this.delayCheck(url);
			}else{
				window.location.href = url;
			}
		},
		//延时检查地址
		delayCheck : function(url){
			var expectHref = this.parseURL(url).url.replace(/#.*$/, '');
			var nowHref = this.parseURL().url.replace(/#.*$/, '');
			if(expectHref !== nowHref){
				window.location.href = expectHref;
			}
		},
		//以触发pushState方式设置location.search
		setQuery : function(query){
			query = getPara(query, '?');
			if(!query){return;}
			query = $querystring.stringify(query);
			this.pushState([
				this.get('path'),
				( query ? '?' + query : '' )
			].join(''));
		},
		//以pushState方式设置hash
		pushHash : function(hash){
			hash = getPara(hash, '#');
			if(!hash){return;}
			var query = this.get('query');
			hash = $querystring.stringify(hash);
			this.pushState([
				this.get('path'),
				( query ? '?' + query : '' ),
				( hash ? '?' + hash : '' )
			].join(''));
		},
		//正常设置hash，不使用pushState
		setHash : function(hash){
			hash = getPara(hash, '#');
			if(!hash){return;}
			hash = $querystring.stringify(hash);
			//直接设置window.location.hash会留下历史记录
			var baseUrl = window.location.toString().replace(/#.*$/, '');
			window.location.replace(baseUrl + '#' + hash);
			if(!haveHashchangeEvt){
				this.onHashChange();
			}
		}
	});

	module.exports = new HistoryM();

});

/**
 * @fileoverview 通用浮层配置模块
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/layer',function(require,exports,module){

	//加载基础对话框
	var $alert = require('mods/dialog/alert');
	var $confirm = require('mods/dialog/confirm');
	var $tip = require('mods/dialog/tip');
	var $loading = require('mods/dialog/loading');

	exports.alert = $alert;
	exports.confirm = $confirm;
	exports.loading = $loading;
	exports.tip = $tip;

});


/**
 * @fileoverview 页面布局管理器
 * 解决模块DOM位置随布局变化而变更的问题，实现DOM操作的解耦
 * 实际上就是做了一次双向检查。
 * 插入布局时，检查所有已存在模块，将模块安装到对应布局上。
 * 插入模块时，检查所有已存在布局，将模块安装到对应布局上。
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/layoutM',function(require,exports,module){

	var $ = require('lib');

	var pagelets = {};
	var layouts = {};

	//将pagelet/layout对应的DOM添加到布局中
	//param {String} selector 页面模块的选择器，应当用id选择器以避免重复
	//param {Object} object 页面模块根节点jquery对象，或者布局模块对象
	//param {Function} callback 插入成功后的回调
	exports.insert = function(selector, object, callback){
		var item = {};
		if(object instanceof $){
			//对象为jQuery对象，即为pagelet对象
			if(!pagelets[selector]){
				item.id = selector;
				item.type = 'pagelet';
				item.node = object;
				item.callback = callback || $.noop;
				//遍历布局对象，将该布局DOM jQuery对象插入到布局对象中
				$.each(layouts, function(key, obj){
					if(obj.layout && $.isFunction(obj.layout.insert)){
						obj.layout.insert(item.id, item.node, item.callback);
					}
				});
				pagelets[selector] = item;
			}
		}else if(
			$.isFunction(object.type) &&
			object.type() === 'layout'
		){
			//对象为布局对象
			if(!layouts[selector]){
				item.id = selector;
				item.type = 'layout';
				item.layout = object;
				item.node = object.root;
				item.callback = callback || $.noop;
				//将布局对象根节点插入到布局对象列表中
				//console.dir(layouts);
				$.each(layouts, function(key, obj){
					if(obj.layout && $.isFunction(obj.layout.insert)){
						obj.layout.insert(item.id, item.node, item.callback);
					}
				});
				//遍历检查pagelet对象列表，将已存在的pagelet对象插入到该布局对象中
				$.each(pagelets, function(key, obj){
					if($.isFunction(item.layout.insert)){
						item.layout.insert(obj.id, obj.node, obj.callback);
					}
				});
				layouts[selector] = item;
			}
		}
	};

	//将pagelet/layout对应的DOM从布局组件中移除
	//param {String} selector 页面模块的选择器，应当用id选择器以避免重复
	exports.remove = function(selector){
		if(pagelets[selector]){
			delete pagelets[selector];
		}
		if(layouts[selector]){
			delete layouts[selector];
		}
		$.each(layouts, function(key, layout){
			if($.isFunction(layout.remove)){
				layout.remove(selector);
			}
		});
	};

	//将pagelet对应的DOM部署到布局中，替代原有的pagelet
	//param {String} id 模块id
	//param {Object} root 页面模块根节点jquery对象
	//param {Function} callback 插入成功后的回调
	exports.deploy = function(id, root, callback){
		var node = $(id);
		if(
			node.length &&
			!pagelets[id] &&
			!layouts[id]
		){
			node.attr('id', '');
			node.replaceWith(root);
			node = null;
		}
		//确保元素在布局内
		exports.insert(
			id,
			root,
			callback
		);
	};

});

/**
 * @fileoverview 广播组件
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/listener',function(require,exports,module){

	var $ = require('lib');
	var $events = require('lib/more/events');
	// Listener
	// -----------------
	// 用于全局广播的白名单控制机制

	var Listener = function(events){
		this._whiteList = {};
		this._receiver = new $events();
		if(Array.isArray(events)){
			events.forEach(this.define.bind(this));
		}
	};

	//事件添加，移除，激发的调用方法参考Events
	Listener.prototype = {
		constructor : Listener,
		//在白名单上定义一个事件名称
		define : function(eventName){
			this._whiteList[eventName] = true;
		},
		//取消白名单上的事件名称
		undefine : function(eventName){
			delete this._whiteList[eventName];
		},
		on : function(){
			this._receiver.on.apply(this._receiver, arguments);
		},
		off : function(){
			this._receiver.off.apply(this._receiver, arguments);
		},
		trigger : function(events){
			var rest = [].slice.call(arguments, 1);

			//按照Events.trigger的调用方式，第一个参数是用空格分隔的事件名称列表
			events = events.split(/\s+/);

			//遍历事件列表，依据白名单决定事件是否激发
			events.forEach(function(evtName){
				if(this._whiteList[evtName]){
					try{
						this._receiver.trigger.apply(this._receiver, [evtName].concat(rest));
					}catch(e){
						console.log(e.stack);
					}
				}
			}.bind(this));
		},
		//添加事件 - 兼容代码
		add : function(){
			this.on.apply(this, arguments);
		},
		//激发事件 - 兼容代码
		fire : function(){
			this.trigger.apply(this, arguments);
		},
		//移除事件 - 兼容代码
		remove : function(){
			this.off.apply(this, arguments);
		}
	};

	module.exports = Listener;

});

/**
 * @fileoverview 统一地址管理组件
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/location',function(require,exports,module){

	var $ = require('lib');
	var $historyM = require('lib/common/historyM');
	var $router = require('lib/common/router');
	var $channel = require('lib/common/channel');

	var LocationM = {
		set : function(url){
			$router.setLocation(url);
		},
		get : function(){
			return $historyM.parseURL();
		}
	};

	$channel.add('change-location', LocationM.set);

	module.exports = LocationM;
});


/**
 * @fileoverview 页面模块管理器: 管理模块的安装与拆卸
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/pageletM',function(require,exports,module){

	var $ = require('lib');
	var $channel = require('lib/common/channel');

	//遍历从属实例的方法
	//{String} name 要调用的子对象方法名称
	var traverse = function(name){
		if(this.objs){
			$.each(this.objs, function(k, o){
				if( o && $.isFunction(o[name])){
					o[name]();
				}
			});
		}
	};

	var PageletManager = {
		init : function(options){
			this.conf = {};
			this.pagelets = {};
			this.setOptions(options);
			this.pageLoaded = false;
		},
		setOptions : function(options){
			this.conf = $.extend({
				log : false
			}, options);
		},
		log : function(){
			if(this.conf.log){
				$.log.apply($, arguments);
			}
		},
		//创建/包装一个pagelet
		create : function(obj, path){
			var that = this;

			path = path || '';
			if(!obj){
				that.log('Pagelet [' + path + '] is null .');
				obj = {};
			}

			['init','attach','detach','destroy'].forEach(function(method){
				if(!$.isFunction(obj[method])){
					that.log('Pagelet [' + path + '] need method : ' + method + ' .');
					obj[method] = $.noop;
				}
			});

			var inited = false;
			var attached = false;
			var pagelet = $.extend({}, obj, {
				init : function(){
					if(!inited){
						obj.init.apply(pagelet, arguments);
						that.log('['+path+']:', 'init');
						inited = true;
					}
				},
				attach : function(){
					if(!inited){
						this.init();
					}
					if(!attached){
						traverse.call(this, 'attach');
						obj.attach.apply(pagelet, arguments);
						that.log('['+path+']:', 'attach');
						attached = true;
					}
				},
				detach : function(){
					if(!inited){
						return;
					}
					if(attached){
						traverse.call(this, 'detach');
						obj.detach.apply(pagelet, arguments);
						that.log('['+path+']:', 'detach');
						attached = false;
					}
				},
				destroy : function(){
					if(inited){
						this.detach();
						traverse.call(this, 'destroy');
						obj.destroy.apply(pagelet, arguments);
						that.log('['+path+']:', 'destroy');
						inited = false;
					}
				}
			});
			return pagelet;
		},
		//更新当前页面的路由列表的状态
		//根据路由列表安装或者拆卸模块
		updatePagelets : function(pagelets){
			if(!Array.isArray(pagelets)){return;}

			var currentPagelets = this.currentPagelets || {};

			var newPagelets = pagelets.reduce(function(obj, key){
				obj[key] = true;
				return obj;
			}, {});

			//要加载的模块，是当前页面模块列表中不存在的模块
			var attaches = pagelets.filter(function(key){
				return !currentPagelets[key];
			});

			//要拆卸的模块，是新路由表中不存在的模块
			var detaches = Object.keys(currentPagelets).filter(function(key){
				return !newPagelets[key];
			});

			this.currentPagelets = newPagelets;

			//应该先拆卸现有的模块，再安装新的模块
			//错误的顺序会导致模块初始化逻辑的混乱
			detaches.forEach(this.detachPagelet, this);

			var count = 0;
			if(!this.pageLoaded){
				count = attaches.length;
			}

			attaches.forEach(function(path){
				var that = this;
				if(count){
					this.attachPagelet(path, function(){
						count --;
						if(count <= 0){
							that.pageLoaded = true;
							if(window.__sinacnPerformance__){
								__sinacnPerformance__.collect('pagelets');
								setTimeout(function(){
									$channel.fire('pl-loaded');
								});
							}
						}
					});
				}else{
					this.attachPagelet(path);
				}
			}, this);

			$channel.fire('pagelets-update');
		},
		//下载页面模块
		loadPagelet : function(path, callback){
			var that = this;
			var plobj = this.pagelets[path];

			lithe.use(path, function(pagelet){
				plobj.pagelet = that.create(pagelet, path);

				//考虑到模块状态有可能在下载完成前变化
				if(plobj.attached){
					that.callAttach(plobj);
				}else{
					that.callDetach(plobj);
				}

				if($.isFunction(callback)){
					callback();
				}
			});
		},
		//获取页面模块
		getPagelet : function(path, callback){
			var pagelet = this.pagelets[path];
			if(!pagelet){
				//创建页面模块对象，并下载页面模块
				pagelet = this.pagelets[path] = {
					attached : false,
					pagelet : null
				};
				this.loadPagelet(path, callback);
			}
			return pagelet;
		},
		//调用模块的安装方法
		callAttach : function(plobj){
			if(plobj && plobj.pagelet && $.isFunction(plobj.pagelet.attach)){
				plobj.pagelet.attach();
			}
		},
		//调用模块的拆卸方法
		callDetach : function(plobj){
			if(plobj && plobj.pagelet && $.isFunction(plobj.pagelet.detach)){
				plobj.pagelet.detach();
			}
		},
		//安装页面模块
		attachPagelet : function(path, callback){
			var plobj = this.getPagelet(path, callback);
			this.callAttach(plobj);
			plobj.attached = true;
		},
		//拆卸页面模块
		detachPagelet : function(path, callback){
			var plobj = this.getPagelet(path, callback);
			this.callDetach(plobj);
			plobj.attached = false;
		},
		//销毁模块管理器时，遍历销毁所有模块
		destroy : function(){
			var that = this;
			$.each(this.pagelets, function(name, pl){
				if(pl && pl.pagelet){
					that.callDetach(pl);
					pl.attached = false;
					if($.isFunction(pl.pagelet.destroy)){
						pl.pagelet.destroy();
					}
				}
			});
		}
	};

	module.exports = PageletManager;

});



/**
 * @fileoverview 路由管理器: 对比路由文件，检测哪些模块需要安装，哪些需要拆卸
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/router',function(require,exports,module){

	var $ = require('lib');
	var $parseURL = require('lib/kit/str/parseURL');
	var $historyM = require('lib/common/historyM');
	var $pageletM = require('lib/common/pageletM');
	var $channel = require('lib/common/channel');
	var $delay = require('lib/kit/func/delay'); 

	//路由器对象 - 页面模块管理器
	//检查页面链接点击，监听popstate。
	//根据路由表，判断模块的加载与拆卸
	//路由表是一个数组，是一个对应当前地址的模块名称列表
	var Router = {
		conf : {},
		routeList : {},
		matchList : {},
		init : function(options){
			var that = this;
			this.setOptions(options);
			this.build();
			this.setBound();
			$(function(){
				that.setDomEvents('add');
			});
			this.setCustEvents('add');
		},
		setOptions : function(options){
			this.conf = $.extend(true,{
				//路由用于解析地址的根路径
				root : window.location.protocol + '//' + window.location.hostname,
				//是否使用pushState方法
				pushState : false,
				//日否显示模块加载日志
				pageletM : {
					log : false
				}
			}, options);
		},
		build : function(){
			var conf = this.conf;
			$pageletM.init(conf.pageletM);
			this.updateRoute();
			//console.log($historyM.parseURL().url);
		},
		setBound : function(){
			var that = this;
			this.bound = {
				checkLink : function(evt){
					that.checkLink($(this), evt);
				},
				updateRoute : function(){
					that.updateRoute();
				}
			};
		},
		//路由器将会监听整个页面的链接点击事件
		setDomEvents : function(action){
			var bound = this.bound;
			var doc = $(document);
			action = action === 'add' ? 'delegate' : 'undelegate';
			//默认触发链接跳转的事件为 tap
			doc[action]('a', 'tap', bound.checkLink);

			//检查touchend事件，确保引发链接跳转的事件都被阻止
			doc[action]('a', 'touchend', bound.checkLink);

			//在ipad上长按链接会触发click事件，所以需要一并处理
			doc[action]('a', 'click', bound.checkLink);
		},
		setCustEvents : function(action){
			var bound = this.bound;
			action = action === 'add' ? 'on' : 'off';
			$historyM[action]('popstate', bound.updateRoute);
		},
		//检查链接元素的href，判断是否跳转
		checkLink : function(link, evt){
			var conf = this.conf;
			var href = link.attr('href');
			var target = link.attr('target');

			//顺便阻止所有的#链接的默认事件
			if( (/^#+$/).test(href) ){
				evt.preventDefault();
			}

			var preventDefault = false;
			if(evt.isDefaultPrevented && evt.isDefaultPrevented()){
				preventDefault = true;
			}

			if(evt.defaultPrevented || evt.returnValue === false){
				preventDefault = true;
			}

			if(preventDefault){
				//如果发现已经阻止了默认事件，则不再做后续处理
				return;
			}

			if(conf.pushState && !target && href){
				this.setLocation(href, evt);
			}
		},
		//获取格式化后的地址
		//解析出错的地址返回空字符串
		getFormatedUrl : function(url){
			var conf = this.conf;
			var formatedUrl = '';
			var rootLoc = null;
			var loc = null;
			try{
				if(conf.root){
					rootLoc = $parseURL(conf.root);
					if(url === conf.root){
						formatedUrl = conf.root;
					}else{
						loc = url ? $parseURL(url) : $historyM.parseURL() ;
						formatedUrl = loc.url.replace(rootLoc.scheme + '://' + rootLoc.host, '');
					}
				}else{
					loc = url ? $parseURL(url) : $historyM.parseURL() ;
					formatedUrl = loc.url;
				}
			}catch(e){
				formatedUrl = '';
			}
			return formatedUrl.toLowerCase();
		},
		//自定义URL地址
		customUrl : function(url){
			return url;
		},
		//检查链接，如果匹配了路由列表，就阻止默认事件
		//使用 pushState 变更页面地址
		setLocation : function(url, evt){
			if((/^javascript:/i).test(url)){return;}
			url = this.customUrl(url);

			var conf = this.conf;
			var routeName = this.getRouteName(url);
			var loc = $historyM.parseURL().href;
			var options = this.matchList[routeName];
			url = this.getFormatedUrl(url);
			loc = this.getFormatedUrl(loc);

			//common.location组件会直接调用setLocation方法
			//所以这里需要检查Router是否启用了pushState
			if(conf.pushState){
				if(url && routeName && options && options.pushState){
					//要使用pushState做无刷新跳转，需要先阻止当前默认事件
					if(evt){
						evt.preventDefault();
						if(evt.type === 'touchend' || evt.type === 'click' ){
							return;
						}
					}

					//需要检查目标地址与当前地址是否相同
					//避免无意中触发组件的重复拆卸安装
					if(url !== loc){
						$historyM.pushState(url);
					}
				}else{
					//没有事件时，说明这是一个程序发起的地址请求，让地址直接跳转
					//有事件时，任其自行处理
					if(url && !evt){
						window.location.href = url;
					}
				}
			}else{
				//没有事件时，说明这是一个程序发起的地址请求，让地址直接跳转
				//有事件时，任其自行处理
				if(url && !evt){
					window.location.href = url;
				}
			}
		},
		//包装规则
		wrapRule : function(rule){
			var match;
			if($.type(rule) === 'function'){
				match = rule;
			}else if($.type(rule) === 'string'){
				match = function(url){
					return url === rule;
				};
			}else if($.type(rule) === 'regexp'){
				match = function(url){
					return rule.test(url);
				};
			}
			return match;
		},
		//注册路由
		//{String} routeName 路由列表名称，应该为路由列表模块 define 的第一个参数
		//{Mixed} rule 匹配URL地址的规则
		register : function(routeName, rule){
			var match, options;
			if( routeName && $.type(routeName) === 'string'){
				//规则可以是字符串，或者正则表达式，或者函数，甚至对象
				if($.type(rule) === 'object'){
					options = rule;
					match = this.wrapRule(options.match);
				}else{
					match = this.wrapRule(rule);
				}

				//未设置匹配规则，则不去注册路由
				if(!match){return;}

				//当第二个参数为对象时，视为选项
				var ops = $.extend({
					match : $.noop,
					pushState : true	//是否允许对匹配当前规则的链接启用pushState
				}, options);

				//最终规则都被转变为函数
				if(!this.matchList[routeName]){
					if(match){
						ops.match = match;
					}
					this.matchList[routeName] = ops;
				}
			}
		},
		//更新当前页面的路由列表
		updateRoute : function(){
			var url = this.getFormatedUrl();
			var routeName = this.getRouteName(url);
			if(routeName){
				//如果有匹配的路由列表，则加载该路由列表并更新pagelets
				this.loadRoute(routeName);
				$channel.fire('location-change');
				// console.log(1);
			}else{
				//console.log(2);
				//如果没有匹配的路由列表，则注销所有事件，等待页面更新
				$pageletM.updatePagelets([]);
			}
		},
		//根据url获取对应的路由列表名称
		getRouteName : function(url){
			url = this.getFormatedUrl(url);
			var routeName = '';
			if(url){
				//遍历地址匹配列表，取得匹配当前地址的路由名称
				$.each(this.matchList, function(name, options){
					if(options.match(url)){
						routeName = name;
						return false;
					}
				});
			}
			return routeName;
		},
		//加载路由列表文件
		loadRoute : function(routeName){
			// console.log(3);
			// console.log(routeName);
			if(!routeName){return;}
			var that = this;
			var route = this.routeList[routeName];
			if(!route){
				// console.log(1);
				lithe.use(routeName, function(list){
					route = list;
					that.routeList[routeName] = route;
					$pageletM.updatePagelets(route);
				});
			}else{
				// console.log(2);
				$pageletM.updatePagelets(route);
			}
		},
		destroy : function(){
			// console.log(4);
			this.setDomEvents('remove');
			this.setCustEvents('remove');
			$pageletM.destroy();
		}
	};

	module.exports = Router;

});



/**
 * @fileoverview 全局scope对象管理器
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/scope',function(require,exports,module){

	var $model = require('lib/mvc/model');

	var Scope = $model.extend({
		defaults : {
			//全局交互对象的名称
			name : 'scope'
		},
		build : function(){
			this.update();
		},
		update : function(){
			this.set(window[this.conf.name]);
		}
	});

	module.exports = new Scope();
});



/**
 * @fileoverview 接口管理器
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/transmission',function(require,exports,module){

	var $ = require('lib');
	var	$transport = require('lib/common/transport');

	// Transmission
	// -----------------
	// 封装与后台的HTTP交互，提供一个统一的接口列表
	// 包含ajax，jsonp方式

	var Transmission = function(options){
		this._transports = {};
		this.conf = $.extend({}, options);
	};

	Transmission.prototype = {
		constructor : Transmission,
		register : function(name, options){
			if(!this._transports[name]){
				options = $.extend({
					name : name
				}, this.conf, options);
				this._transports[name] = new $transport(options);
			}
		},
		remove : function(){
			if(this._transports[name]){
				this._transports[name].destroy();
				delete this._transports[name];
			}
		},
		request : function(name, options){
			var trans = this._transports[name];
			if(trans){
				return trans.request(options);
			}
		},
		cancel : function(name){
			var trans = this._transports[name];
			if(trans){
				trans.cancel();
			}
		},
		destroy : function(){
			$.each(this._transports, function(name, transport){
				transport.destroy();
			});
		}
	};

	module.exports = Transmission;

});

/**
 * @fileoverview 通用接口组件
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/transport',function(require,exports,module){

	var $ = require('lib');
	var $layer = require('lib/common/layer');
	var $channel = require('lib/common/channel');
	var $attempt = require('lib/kit/util/attempt');
	var $network = require('lib/kit/env/network');

	//下面的选项中，未在 privatePropList 中列举的属性都会被传递给$.ajax方法
	//没有列举全部$.ajax的选项，可根据需要自行添加其他选项
	var defConf = {
		url : '',			//请求地址
		async : true,		//是否异步
		type : 'POST',		//请求方式 ['POST','GET','PUT','DELETE']
		cache : false,		//是否缓存请求
		data : {},			//发送到服务器的数据
		dataType : 'json',	//预期服务器返回的数据类型 ['text','xml','html','script','json','jsonp']

		//下列属性在dataType为jsonp模式下启用
		jsonp : 'callback',			//jsonp请求参数名称
		scriptCharset : 'utf-8'		//script的编码
	};

	//下面的属性不会传递给$.ajax
	var extraProp = {
		name : '',					//接口名称
		forceToRequest : false,		//强制请求该地址 
		//与后端约定，返回的json数据中，标记成功的status值
		//其他均为失败
		statusSuccess : 'A00006',	//标识成功的状态数据
		timeout : 0,				//超时时间(ms)，为0则取消超时判断
		autoExecuteError : false,	//自动处理错误码
		autoExecuteFailure : false,	//自动处理请求失败的情况
		onComplete : $.noop,		//无论成功失败，请求后都会执行的回调
		onSuccess : $.noop,			//成功后执行的回调
		onFailure : $.noop			//失败后执行的回调
	};

	//privatePropList 中列举的属性不会被传递给$.ajax方法
	var privatePropList = [];

	$.each(extraProp, function(key, val){
		privatePropList.push(key);
		defConf[key] = val;
	});

	//数据缓存
	var Cache = {
		CACHE : {},
		set : function(key, val){
			this.CACHE[key] = val;
		},
		get : function(key){
			return this.CACHE[key];
		}
	};

	// Transport
	// -----------------
	// 封装jQuery.ajax
	var Ajax = function(options){
		this.conf = $.extend({}, options);
		this.request();
	};
	$.extend(Ajax.prototype, {
		constructor : Ajax,
		request : function(){
			var ajaxOptions;
			var cacheData;
			var conf = this.conf;
			ajaxOptions = $.extend({}, conf);

			var cacheKey = [
				conf.name,
				conf.url,
				JSON.stringify(conf.data)
			].join();

			if(this.requesting){return;}
			this.xhr = null;
			this.requesting = true;

			//conf 为当前配置项
			//ajaxOptions 才是会传递给$.ajax的选项
			privatePropList.forEach(function(prop){
				delete ajaxOptions[prop];
			});

			//处理获得的数据
			var executeData = function(data, textStatus, jqXHR){
				if(data && data.code){
					data.code = data.code.toString();
				}
				if(conf.dataType === 'json' || conf.dataType === 'jsonp'){
					if( data.code === conf.statusSuccess ){
						this.success(data, {
							status : textStatus,
							xhr : jqXHR
						});
					}else{
						this.failure(data, {
							status : 'wrongcode',
							xhr : jqXHR
						});
					}
				}else{
					this.success(data, {
						status : textStatus,
						xhr : jqXHR
					});
				}
			}.bind(this);

			//如果标记了接口需要缓存，则先从缓存中获取数据
			cacheData = Cache.get(cacheKey);
			if(conf.cache && cacheData && !conf.forceToRequest){
				executeData(cacheData, 'cache');
				return;
			}

			//判断是否联网
			if(!$network.onLine()){
				this.failure({}, {
					status : 'offline'
				});
				return;
			}

			ajaxOptions.success = function(data, textStatus, jqXHR){
				if(conf.cache && data){
					Cache.set(cacheKey, data);
				}
				executeData(data, textStatus, jqXHR);
			}.bind(this);
			ajaxOptions.error = function(jqXHR, textStatus, errorThrown){
				this.failure({}, {
					error : errorThrown,
					status : textStatus,
					xhr : jqXHR
				});
			}.bind(this);

			//超时处理
			if(conf.timeout){
				this.timer = setTimeout(function(){
					this.timer = null;
					if(this.requesting){
						this.failure({}, {
							status : 'timeout',
							xhr : this.xhr
						});
						this.abort();
					}
				}.bind(this), conf.timeout);
			}

			this.xhr = $.ajax(ajaxOptions);
		},
		complete : function(rs, extra){
			var conf = this.conf;
			$attempt(function(){
				if(this.requesting){
					conf.onComplete(rs, extra);
				}
			}, {
				name : conf.name + ' ajax complete',
				bind : this
			});
		},
		success : function(rs, extra){
			var conf = this.conf;
			this.complete(rs, extra);
			$attempt(function(){
				if(this.requesting){
					conf.onSuccess(rs, extra);
				}
			}, {
				name : conf.name + ' ajax success',
				bind : this
			});
			this.detach();
		},
		failure : function(rs, extra){
			var conf = this.conf;
			this.complete(rs, extra);
			$attempt(function(){
				if(this.requesting){
					conf.onFailure(rs, extra);
					if(conf.autoExecuteError){
						this.autoExecuteError(rs, extra);
					}
					if(conf.autoExecuteFailure){
						this.autoExecuteFailure(rs, extra);
					}
				}
			}, {
				name : conf.name + ' ajax failure',
				bind : this
			});
			this.detach();
		},
		//自动处理错误码
		autoExecuteError : function(rs, extra){
			var message = $.type(rs.msg) === 'string' ? rs.msg : '';
			if(rs && rs.code){
				if(rs.code === 'A00004'){
					//需要登录
					$channel.fire('need-login');
				}else if(rs.code === '100002'){
					$channel.fire('change-location', rs.data);
				}else if(message){
					//通用错误处理
					$layer.tip(message);
				}
			}
		},
		//自动处理AJAX失败
		autoExecuteFailure : function(rs, extra){
			if( (!rs || !rs.code) && extra){
				if(extra.status === 'offline'){
					$layer.tip('网络连接已断开，请检查网络连接');
				}if(extra.status === 'timeout'){
					$layer.tip('请求超时，请检查网络连接');
				}else if(extra.status === 'abort'){
					$layer.tip('请求已取消');
				}
			}
		},
		//想要阻止请求发送时应该调用这个方法，可以产生失败回调
		cancel : function(){
			var conf = this.conf;
			if(this.requesting){
				this.failure({}, {
					status : 'cancel',
					xhr : this.xhr
				});
				this.abort();
			}
		},
		//这个方法阻止了请求，但不会产生失败回调
		abort : function(){
			var conf = this.conf;
			if(this.timer){
				clearTimeout(this.timer);
				this.timer = null;
			}
			if(this.xhr){
				if(conf.dataType !== 'jsonp' && conf.dataType !== 'script'){
					this.xhr.abort();
				}
			}
		},
		//解除绑定的回调
		detach : function(){
			var conf = this.conf;
			this.requesting = false;
			conf.onComplete = $.noop;
			conf.onSuccess = $.noop;
			conf.onFailure = $.noop;
		}
	});

	// Transport
	// -----------------
	// 进一步封装jQuery.ajax
	var Transport = function(options){
		this.conf = $.extend({}, defConf, options);
		this.cache = {};
	};

	$.extend(Transport.prototype, {
		constructor : Transport,
		//执行请求
		request : function(options){
			var ajaxOptions = $.extend({}, this.conf, options);
			this.ajax = new Ajax(ajaxOptions);
			return this.ajax;
		},
		//取消当前请求
		//注意：取消请求未必能实际的阻止信息传递到服务端，尤其在jsonp的情况下。
		cancel : function(){
			if(this.ajax){
				this.ajax.cancel();
			}
		},
		destroy : function(){
			if(this.ajax){
				this.ajax.cancel();
				delete this.ajax;
			}
		}
	});

	module.exports = Transport;
});


/**
 * @fileoverview 用户状态管理
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/common/user',function(require,exports,module){

	var $ = require('lib');
	var $cookie = require('lib/kit/util/cookie');
	var $querystring = require('lib/more/querystring');
	var $channel = require('lib/common/channel');
	var $loading = require('mods/dialog/loading');
	var $ssoReady = require('mods/util/ssoReady');

	var User = {};

	//获取登录用户信息
	// @ returns {Object} 用户信息JSON对象，或者null
	User.getUserInfo = function(){
		var userinfo = $cookie.get('mblog_userinfo');
		if(!userinfo) {
			return null;
		}

		userinfo = decodeURIComponent(userinfo);
		return $querystring.parse(userinfo);
	};

	//判断是否登录
	// @ returns {Boolean} 登录与否
	User.isLogin = function(){
		return !!User.getUserInfo();
	};

	//用户登录
	User.login = function(){
		window.location = 'http://passport.sina.cn/signin/signin?entry=wapsso&r='+ window.encodeURIComponent(location.href) +'&vt=4&backTitle=' + encodeURIComponent('新浪博客');
		//window.location = 'http://passport.sina.cn/signin/signin?entry=wapsso&r='+ window.encodeURIComponent('http://blog.sina.cn/dpool/blog/s/blog_4baa667b0102wc3l.html') +'&vt=4&backTitle=' + encodeURIComponent('新浪博客');
	};

	//用户注销
	User.logout = function(callback){
		//删除cookie  该cookie是由blog后端种植的
		$cookie.remove('mblog_userinfo',{
			domain:'.blog.sina.cn'
		});
		window.location = 'http://passport.sina.cn/sso/logout?entry=wapsso&r='+ window.encodeURIComponent(location.href) +'&vt=4';
	};

	//用定时器避免过于密集的状态检查请求
	var checkLSTimer = null;

	//用于缓存登录状态
	var stateLogin = null;

	//检查用户登录状态，判断是否发生变更
	//如果发生变更，发出用户状态变更的广播
	User.checkLoginState = function(){
		var state;
		var loginInfo;

		if(!checkLSTimer){
			loginInfo = User.getUserInfo();
			if(loginInfo){
				state = loginInfo.uid;
			}else{
				state = false;
			}

			if(stateLogin === null){
				//如果尚未记录登录状态，则先记录当前登录状态
				stateLogin = state;
			}else if(stateLogin !== state){
				//否则用当前登录状态与之前的状态做比较
				//如果登录状态发生了变更，则清除缓存，然后更新登录状态
				//考虑到 用户1登录 -> 用户1注销 -> 用户2登录 的状态切换方式
				//状态数据应该为登录用户的uid，而不能是简单的登录与否
				stateLogin = state;
				$channel.fire('login-state-change');
			}
		}

		//设置定时器，避免密集的状态检查请求造成无谓的CPU消耗
		checkLSTimer = setTimeout(function(){
			checkLSTimer = null;
		});
	};

	$channel.on('need-login', User.login);
	$channel.on('login', User.checkLoginState);
	$channel.on('logout', User.checkLoginState);

	User.checkLoginState();

	module.exports = User;

});

/**
 * @fileoverview 布局模块基类
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/base/layout',function(require,exports,module){

	var $ = require('lib');
	var $controller = require('lib/mvc/controller');

	//布局模块基类
	//提供页面模块的DOM插入接口
	//布局模块的实例应当具有唯一性！
	var Layout = $controller.extend({
		defaults : {
			//模块与内部容器的映射
			//如'#pl-home-box':['#pl-navigation','#pl-home']
			map : {}
		},
		setEvents : function(action){
			var proxy = this.proxy();
			this.delegate(action);
			this[action]('attach', proxy('onAttach'));
			this[action]('detach', proxy('onDetach'));
		},
		//返回组件类型
		type : function(){
			return 'layout';
		},
		//判断模块是否可以插入这个布局模块
		include : function(selector){
			var result = false;
			$.each(this.conf.map, function(boxId, list){
				if(list.indexOf(selector) >= 0){
					result = true;
					return false;
				}
			});
			return result;
		},
		//提供模块DOM插入接口
		//这里提供了默认的向一个模块容器插入DOM的方式
		//也可以覆盖此方法自定义模块插入的方式
		insert : function(selector, node, callback){
			var that = this;
			var conf = this.conf;
			var root = this.root;
			$.each(conf.map, function(boxId, list){
				var box;
				if(boxId === 'root'){
					box = root;
				}else{
					box = root.find(boxId);
				}
				var prevList, prevNode;
				var index = list.indexOf(selector);
				if(index >= 0){
					//获取前面可能已存在的pagelet
					prevList = list.slice(0, index).filter(function(id){
						return !!$(id).length;
					});
					//如果前面没有已插入到布局中的模块
					//就直接在最前面插入当前pagelet
					if(!prevList.length){
						box.prepend(node);
					}else{
						prevNode = $(prevList[prevList.length - 1]);
						node.insertAfter(prevNode);
					}
					if($.isFunction(callback)){
						callback();
					}
					that.trigger('insert', selector);
					return false;
				}
			});
		}
	});

	module.exports = Layout;

});


/**
 * @fileoverview 基本组件基类
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/base/module',function(require,exports,module){

	var $ = require('lib');
	var $base = require('lib/base/base');

	//遍历从属实例的方法
	//{String} name 要调用的子对象方法名称
	var traverse = function(name){
		if(this.objs){
			$.each(this.objs, function(k, o){
				if( o && $.isFunction(o[name])){
					o[name]();
				}
			});
		}
	};

	//基本组件基类
	//提供组件的DOM查找接口
	var Module = $base.extend({
		options : {
			//dom根节点，如'#pl-home'
			node : '',
			//组件DOM模板
			template : '',
			//缓存角色元素
			cacheRole : false,
			//角色映射表
			roles : {}
		},
		parseDom : function(){
			this.createRoot();
		},
		//创建模块的根节点
		createRoot : function(){
			var conf = this.conf;
			var nodes = this.nodes;

			//无论有没有conf.node
			//至少要创建一个jquery对象供组件使用
			if(!nodes.root){
				//如果根节点尚不存在，创建该根节点
				if(conf.node){
					nodes.root = $(conf.node);
				}else{
					nodes.root = $();
				}
			}

			//如果已有nodes.root对象，但页面DOM不存在
			//此时只要存在模板字符串，就从模板创建一个
			if(!nodes.root.length){
				if(conf.template && $.type(conf.template) === 'string'){
					nodes.root = $(conf.template);
				}
			}

			//在业务代码中具体实现组件插入布局的工作
			return nodes.root;
		},
		//获取布局模块的根节点
		getRoot : function(){
			var conf = this.conf;
			var nodes = this.nodes;
			if(!nodes.root){
				//这里不要判断 nodes.root.length
				//否则会造成 resetDom 导致的死循环
				this.createRoot();
				this.resetDom();
			}
			if(!nodes.root.length){
				nodes.root = $(conf.node);
			}
			return nodes.root;
		},
		//重置DOM事件, 重新绑定dom事件
		resetDom : function(){
			this.setDomEvents('remove');
			this.setDomEvents('add');
			this.trigger('resetDom');
		},
		//重置DOM角色列表
		//当组件根节点HTML被更新后，应当调用这个函数
		//避免之前jquery缓存了DOM对象
		resetRoles : function(){
			var nodes = this.nodes;
			Object.keys(nodes).forEach(function(key){
				var el = nodes[key];
				if(key !== 'root'){
					if(el && $.type(el.remove) === 'function'){
						el.remove();
					}
				}
				el = null;
				nodes[key] = null;
				delete nodes[key];
			});
			traverse.call(this, 'resetRoles');
			this.trigger('resetRoles');
			this.resetDom();
		},
		//获取模块角色节点，提供DOM缓存机制
		//如果不存在根节点就创建之
		role : function(roleName){
			var conf = this.conf;
			var nodes = this.nodes;
			var elRole = null;
			var roles = conf.roles;
			var selector = '';
			if(nodes[roleName] && nodes[roleName].length){
				//如果是已存在的DOM，直接返回
				return nodes[roleName];
			}else{
				nodes.root = this.getRoot();

				if(roleName === 'root'){
					//如果是查找根节点，直接返回
					return nodes.root;
				}else{
					if(roles){
						selector = roles[roleName];
					}else{
						this.conf.roles = {};
					}
					selector = selector || '[data-role="' + roleName + '"]';
					this.conf.roles[roleName] = selector;
					elRole = nodes.root.find(selector);
					if(conf.cacheRole){
						nodes[roleName] = nodes.root.find(selector);
					}
					//其他情况下返回内部对应data-role属性名的元素
					return elRole;
				}
			}
		}
	});

	module.exports = Module;

});


/**
 * @fileoverview 页面模块基类
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/base/pagelet',function(require,exports,module){

	var $ = require('lib');
	var $module = require('lib/base/module');
	var $layoutM = require('lib/common/layoutM');
	var $channelCommon = require('lib/common/channel');
	var $contentM = require('lib/common/contentM');
	var $loading = require('mods/dialog/loading');

	//页面模块基类
	//提供获取内部角色的方法
	//提供页面模块的DOM插入接口
	//页面模块的实例应当具有唯一性！
	var Pagelet = $module.extend({
		options : {
			//页面模块名称，用于事件的派发
			name : '',
			//dom根节点，如'#pl-home'
			node : '',
			//页面模块的模板
			template : '',
			//加载内容时显示loading
			loading : true
		},
		build : function(){
			var root = this.role('root');
			if(!root.html()){
				this.checkUpdate();
			}
			this.checkStyle();
		},
		setCustEvents : function(action){
			var objs = this.objs;
			var getBound = this.getBound();
			action = action === 'add' ? 'on' : 'off';
			this[action]('attach', getBound('onAttach'));
			this[action]('detach', getBound('onDetach'));
		},
		setListener : function(action){
			var getBound = this.getBound();
			action = action === 'add' ? 'add' : 'remove';
			$channelCommon[action]('content-update', getBound('checkUpdate'));
		},
		//模块内容更新前的操作
		beforeUpdate : function(){
			var root = this.role('root');
			root.hide();
			root.html('');
		},
		//检查模块内容更新
		checkUpdate : function(){
			var that = this;
			var conf = this.get('conf');
			var root = this.role('root');

			this.beforeUpdate();

			var loading;

			var doRequest = function(){
				$contentM.request(conf.name, {
					onSuccess : function(rs){
						if(rs && rs.data){
							that.update(rs.data);
						}
						if(loading){
							loading.hide();
							loading = null;
						}
					}
				});
			};

			//用延时来解决loading无法取得父元素宽度的问题
			//请求执行时，父元素可能还未显示或者插入到DOM中。
			setTimeout(function(){
				if(conf.loading){
					loading = $loading({
						parent : root,
						timeout : 5000,
						onRetry : function(){
							doRequest();
						}
					});
				}
				doRequest();
			});
		},
		//更新组件的内容
		update : function(data){
			var conf = this.get('conf');
			var root = this.role('root');
			var box = data.box;
			root.html( box.getNode(conf.node).html() );
			this.checkStyle();
			this.trigger('updated');
		},
		//检查模块样式
		checkStyle : $.noop,
		onAttach : function(){
			var conf = this.get('conf');
			var attached = this.get('attached');
			if(!attached){return;}
			//确保元素在布局内
			var root = this.role('root');
			if($.type(conf.node) === 'string'){
				$layoutM.insert(conf.node, root, function(){
					this.checkStyle();
				}.bind(this));
			}
			root.show();
		},
		onDetach : function(){
			var root = this.role('root');
			root.hide();
		}
	});

	module.exports = Pagelet;

});


/**
 * @fileoverview 基础工厂元件类
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/mvc/base',function(require,exports,module){
	var $ = require('lib');
	var $class = require('lib/more/class');
	var $events = require('lib/more/events');

	var Base = $class.create({
		Implements : [$events],
		//类的默认值，不要在实例中修改这个对象
		defaults : {},
		initialize : function(options){
			this.setOptions(options);
			this.build();
			this.setEvents('on');
		},
		setOptions : function(options){
			this.conf = this.conf || $.extend(true, {}, this.defaults);
			if(!$.isPlainObject(options)){
				options = {};
			}
			$.extend(true, this.conf, options);
		},
		//初始化，构建
		build : $.noop,
		setEvents : $.noop,
		//代理函数
		proxy : function(name){
			var that = this;
			var bound = this.bound ? this.bound : this.bound = {};
			name = name || 'proxy';
			if(!$.isFunction(bound[name])){
				bound[name] = function(){
					if($.isFunction(that[name])){
						return that[name].apply(that, arguments);
					}
				};
			}
			return bound[name];
		},
		destroy : function(){
			this.setEvents('off');
			this.off();
			this.bound = null;
		}
	});

	module.exports = Base;

});


/**
 * @fileoverview 基本控制器
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/mvc/controller',function(require,exports,module){
	var $ = require('lib');
	var $base = require('lib/mvc/base');
	var $delegate = require('lib/mvc/delegate');

	//遍历从属实例的方法
	//{String} name 要调用的子对象方法名称
	var traverse = function(name){
		if(this.objs){
			$.each(this.objs, function(k, o){
				if( o && $.isFunction(o[name])){
					o[name]();
				}
			});
		}
	};

	var Controller = $base.extend({
		defaults : {
			node : null,
			events : {}
		},
		initialize : function(options){
			this.objs = {};
			this.setOptions(options);
			this.root = $(this.conf.node);
			this.build();
			this.attach();
		},
		setEvents : function(action){
			this.delegate(action);
		},
		delegate : function(action, root, events, bind){
			action = action || 'on';
			root = root || this.root;
			events = events || this.conf.events;
			bind = bind || this;
			$delegate(action, root, events, bind);
		},
		attach : function(){
			if(this.attached){return;}
			this.setEvents('on');
			traverse.call(this, 'attach');
			this.trigger('attach');
			this.attached = true;
		},
		detach : function(){
			if(!this.attached){return;}
			this.attached = false;
			this.trigger('detach');
			traverse.call(this, 'detach');
			this.setEvents('off');
		},
		destroy : function(){
			traverse.call(this, 'destroy');
			this.detach();
			this.delegate('off');
			this.off();
			this.objs = null;
			this.bound = null;
		}
	});

	module.exports = Controller;

});


/**
 * @fileoverview 事件对象绑定
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/mvc/delegate', function(require,exports,module) {

	//method delegate 将events中包含的键值对映射为代理的事件
	//param {Boolean} action 开/关代理 ['on', 'off']。
	//param {Element} root 设置代理的根节点，应该是一个jquery对象。
	//param {Object} events 事件键值对，格式可以为：
	//	{'selector event':'method'}
	//  {'event':'method'}
	//  {'selector event':'method1 method2'}
	//  {'event':'method1 method2'}
	//param {Object} bind 指定事件函数绑定的对象。
	module.exports = function(action, root, events, bind){
		
		var proxy, delegate;
		if(!root){return;}
		if(!bind || !$.isFunction(bind.proxy)){return;}

		proxy = bind.proxy();
		action = action === 'on' ? 'on' : 'off';
		delegate = action === 'on' ? 'delegate' : 'undelegate';
		events = $.extend({}, events);

		$.each(events, function(handle, method){
			var selector, event, fns = [];
			handle = handle.split(/\s+/);
			if($.type(method) === 'string'){
				fns = method.split(/\s+/).map(function(fname){
					return proxy(fname);
				});
			}else if($.isFunction(method)){
				fns = [method];
			}else{
				return;
			}
			event = handle.pop();
			if(handle.length >= 1){
				selector = handle.join(' ');
				if($.isFunction(root[delegate])){
					fns.forEach(function(fn){
						root[delegate](selector, event, fn);
					});
				}
			}else{
				if($.isFunction(root[action])){
					fns.forEach(function(fn){
						root[action](event, fn);
					});
				}
			}
		});

	};
});


/**
 * @fileoverview 基本模型
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/mvc/model',function(require,exports,module){
	var $ = require('lib');
	var $base = require('lib/mvc/base');
	var $delegate = require('lib/mvc/delegate');

	//私有原型名称
	var PRIVATE_NAME = '__private__';

	//为类的data对象设置可监控属性
	//param {String} key 属性名称
	//param {Mixed} value 属性值
	var setAttr = function(key, value){
		if($.type(key)!=='string'){return;}
		var that = this;
		var data = this.data || {};
		if(!data.hasOwnProperty(PRIVATE_NAME)){
			Object.defineProperty(data, PRIVATE_NAME, {
				writable:true,
				enumerable:false,
				configurable:true
			});
			data[PRIVATE_NAME] = {};
		}
		if(!data.hasOwnProperty(key)){
			Object.defineProperty(data, key, {
				set : function(val){
					var prevValue = this[key];
					if(val !== prevValue){
						this[PRIVATE_NAME][key] = val;
						that.changed = true;
						that.trigger('change:' + key, prevValue);
					}
				},
				get : function(){
					return this[PRIVATE_NAME][key];
				},
				// A property cannot both have accessors and be writable or have a value
				enumerable:true,
				configurable:true
			});
			this.changed = true;
		}
		data[key] = value;
	};

	//为类的data对象设置可计算属性
	//param {String} key 属性名称
	//param {Function} fn 属性计算函数
	var setComputedAttr = function(key, fn){
		if($.type(key)!=='string'){return;}
		var that = this;
		var data = this.data || {};
		setAttr.call(this, key);
		Object.defineProperty(data, key, {
			get : function(){
				return fn.call(that, this[PRIVATE_NAME][key]);
			}
		});
	};

	//为类的data对象清除属性
	//param {String} key 属性名称
	var removeAttr = function(key){
		delete this.data[key];
	};

	var Model = $base.extend({
		defaults : {},
		events : {},
		initialize : function(options){
			this.data = {};
			this.changed = false;
			Model.superclass.initialize.apply(this,arguments);
		},
		//配置选项与模型
		setOptions : function(options){
			Model.superclass.setOptions.apply(this,arguments);
			this.set(this.conf);
		},
		//model的事件应当仅用于自身属性的关联运算
		setEvents : function(action){
			this.delegate(action);
		},
		//代理自身事件
		delegate : function(action, root, events, bind){
			action = action || 'on';
			root = root || this;
			events = events || this.events;
			bind = bind || this;
			$delegate(action, root, events, bind);
		},
		//设置模型的属性
		//将会触发change事件
		//会触发针对每个属性的 change:propname 事件
		set : function(key, val){
			if($.isPlainObject(key)){
				$.each(key, setAttr.bind(this));
			}else if($.type(key) === 'string'){
				setAttr.call(this, key, val);
			}
			if(this.changed){
				this.trigger('change');
				this.changed = false;
			}
		},
		//获取模型对应属性的值的拷贝
		//如果不传参数，则直接获取整个模型数据
		get : function(key){
			var value;
			if($.type(key) === 'string'){
				value = this.data[key];
				if($.isPlainObject(value)){
					return $.extend(true, {}, value);
				}else if($.isArray(value)){
					return $.extend(true, [], value);
				}else{
					return value;
				}
			}
			if(typeof key === 'undefined'){
				return $.extend(true, {}, this.data);
			}
		},
		//设置自动计算属性
		//注意：自动计算属性不会因为自动计算而触发 change 事件
		setComputed : function(key, fn){
			if($.type(key) === 'object'){
				$.each(key, setComputedAttr.bind(this));
			}else if($.type(key) === 'string' && $.isFunction(fn)){
				setComputedAttr.call(this, key, fn);
			}
		},
		//获取模型上设置的所有键名
		keys : function(){
			if($.isPlainObject(this.data)){
				return Object.keys(this.data);
			}else{
				return [];
			}
		},
		//删除模型上的一个键
		remove : function(key){
			removeAttr.call(this, key);
			this.trigger('change:' + key);
			this.trigger('change');
		},
		//清除模型中所有数据
		clear : function(){
			this.keys().forEach(this.remove, this);
		},
		destroy : function(){
			this.changed = false;
			Model.superclass.destroy.apply(this,arguments);
			this.clear();
			this.data = null;
		}
	});

	module.exports = Model;

});


/**
 * @fileoverview 基本视图
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/mvc/view',function(require,exports,module){
	var $ = require('lib');
	var $base = require('lib/mvc/base');
	var $delegate = require('lib/mvc/delegate');

	//获取视图的根节点
	var getRoot = function(){
		var conf = this.conf;
		var template = conf.template;
		var nodes = this.nodes;
		var root = nodes.root;
		if(!root){
			if(conf.node){
				root = $(conf.node);
			}
			if(!root || !root.length){
				if($.isArray(template)){
					template = template.join('');
				}
				root = $(template);
			}
			nodes.root = root;
		}
		return root;
	};

	var View = $base.extend({
		defaults : {
			node : '',
			template : '',
			events : {},
			role : {}
		},
		initialize : function(options){
			this.nodes = {};
			View.superclass.initialize.apply(this,arguments);
		},
		setEvents : function(action){
			this.delegate(action);
		},
		delegate : function(action, root, events, bind){
			action = action || 'on';
			root = root || this.role('root');
			events = events || this.conf.events;
			bind = bind || this;
			$delegate(action, root, events, bind);
		},
		//获取 / 设置角色元素的jquery对象
		//注意：获取到角色元素后，该jquery对象会缓存在视图对象中
		role : function(name, element){
			var nodes = this.nodes;
			var root = getRoot.call(this);
			var role = this.conf.role || {};
			if(!element){
				if(nodes[name]){
					element = nodes[name];
				}
				if(name === 'root'){
					element = root;
				}else if(!element || !element.length){
					if(role[name]){
						element = root.find(role[name]);
					}else{
						element = root.find('[data-role="' + name + '"]');
					}
					nodes[name] = element;
				}
			}else{
				nodes[name] = element = $(element);
			}
			return element;
		},
		//清除视图缓存的角色dom元素
		resetRoles : function(){
			var nodes = this.nodes;
			$.each(nodes, function(name){
				if(name !== 'root'){
					nodes[name] = null;
					delete nodes[name];
				}
			});
		},
		destroy : function(){
			View.superclass.destroy.apply(this,arguments);
			this.resetRoles();
			this.nodes = null;
		}
	});

	module.exports = View;

});


/**
 * @fileoverview 全局广播
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/channel/global',function(require,exports,module){

	var $listener = require('lib/common/listener');
	module.exports = new $listener([
		//用于数据统计
		'suda-log',
		//对话框要求显示遮罩
		'dialog-show-mask',
		//对话框要求隐藏遮罩
		'dialog-hide-mask',
		//屏幕遮罩显示后发送的广播
		'ui-screenmask-show',
		//屏幕遮罩隐藏后发送的广播
		'ui-screenmask-hide',
		//统计代码与suda-uatrack类似
		'suda-trace-log',
		//其他统计数据,作为后台apache无法通过接口日志统计时的一个补充
		'apache-other-log',
		// 淘宝广告sax统计
		'sax-log',
		//sax曝光统计
		'sax-exp'
	]);
});

/**
 * @fileoverview 环境模型
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('mods/common/env',function(require,exports,module){

	var $ = require('lib');
	var $model = require('lib/mvc/model');
	var $os = require('lib/kit/env/os');
	var $browser = require('lib/kit/env/browser');

	var Env = $model.extend({
		defaults : {
			//是否可能存在animation bug
			animationBug : false
		},
		build : function(){
			this.checkMode();
		},
		checkMode : function(){
			//android手机上部分浏览器，使用animation时有bug
			//会导致后续的overflow-hidden的元素样式错乱
			if($os.android && parseFloat($os.version) < 4.1){
				if( !(/ucbrowser/i).test($browser.UA) && !$browser.CHROME ){
					this.set('animationBug', true);
				}
			}
		}
	});

	module.exports = new Env();
});


/**
 * @fileoverview 通用 active 状态
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/common/active',function(require,exports,module){

	var $ = require('lib');
	var $doc = $(document);

	$doc.delegate('a', 'touch', function(evt){
		var link = $(evt.currentTarget);
		link.addClass('a-active');
	});

	$doc.delegate('a', 'release', function(evt){
		var link = $(evt.currentTarget);
		link.removeClass('a-active');
	});

	$doc.delegate('a', 'touchmove', function(evt){
		var link = $(evt.currentTarget);
		link.removeClass('a-active');
	});

});


/**
 * @fileoverview 检查所有a标签的href
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */

define('mods/common/checkLink',function(require,exports,module){

	var $ = require('lib');
	var $doc = $(document);
	var $router = require('lib/common/router');
	var $getUrlParam = require('lib/kit/str/getUrlParam');

	$doc.delegate('a', 'touch', function(evt){
		var targetNode = $(evt.currentTarget);
		var targetUrl = targetNode.attr('href');
		var curUrl = window.location.href;
		var routeName = $router.getRouteName();

		if(targetUrl) {
			// 从渠道过来的链接都带有wm参数，需要保留
			var para = $getUrlParam('wm');

			if(
				para &&
				targetUrl.indexOf('wm') === -1 &&
				targetUrl !== 'javascript:;'
			) {
				if(targetUrl.indexOf('?') != -1) {
					// 目标链接中有参数，用&连接参数
					targetNode.attr('href', targetUrl + '&wm=' + para);
				}else {
					// 目标链接中没有参数，用?连接参数
					targetNode.attr('href', targetUrl + '?wm=' + para);
				}
			}
		}
	});

});


/**
 * @fileoverview 懒加载组件 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/util/load',function(require,exports,module){

	var $ = require('lib');
	var $loading = require('mods/dialog/loading');

	var BASE_PATH = 'conf/mods/';

	var loaded = {};

	//用于简化懒加载
	module.exports = function(name, options){
		var conf = $.extend(true, {
			onComplete : $.noop,
			loading : {
				timeout : 15000
			}
		}, options);

		var loading = {
			hide : $.noop
		};

		var path = BASE_PATH + name;

		var loadState = true;

		var complete = conf.onComplete;
		delete conf.onComplete;

		if(conf.loading && !loaded[path]){
			conf.loading = $.extend(conf.loading, {
				onCancel : function(){
					loadState = false;
				},
				onTimeout : function(){
					loadState = false;
				},
				onRetry : function(){
					doRequest();
				}
			});
			loading = $loading(conf.loading);
			delete conf.loading;
		}

		var doRequest = function(){
			loadState = true;
			lithe.use(path, function(fn){
				if($.type(fn) === 'function' && loadState){
					var result = fn(conf);
					loaded[path] = true;
					loading.hide();
					if($.type(complete) === 'function'){
						complete( result );
					}
				}
			});
		};

		doRequest();
	};
});



/**
 * @fileoverview 懒加载管理器 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/util/loader',function(require,exports,module){

	var $ = require('lib');
	var $channelCommon = require('lib/common/channel');
	var $channelBlog = require('mods/channel/blog');
	var $load = require('mods/util/load');

	//统一管理触发懒加载的全局事件
	$channelBlog.add('show-nav-panel', function(){
		$load('module/navPanel');
	});

	$channelBlog.add('show-user-panel', function(){
		$load('module/userPanel');
	});

	$channelBlog.add('show-comment-panel', function(info){
		$load('module/commentPanel', {
			info : info
		});
	});

	$channelBlog.add('show-godreply-panel', function(options){
		$load('module/godReplyPanel', options);
	});


	$channelBlog.add('show-share-panel', function(options){
		$load('module/sharePanel', options);
	});

	$channelBlog.add('show-image-slides', function(info){
		$load('module/imageSlides', {
			info : info,
			loading : false
		});
	});

	$channelBlog.add('show-forward-panel', function(options){
		$load('module/forwardPanel', options);
	});

	$channelBlog.add('show-nForward-panel', function(options){
		$load('module/nForwardPanel', options);
	});

	$channelBlog.add('show-send-comment-panel', function(info){
		$load('module/sendCommentPanel', {
			info : info
		});
	});

	// 博文设置面板
	$channelBlog.add('show-blogsetting-panel', function(info){
		$load('module/blogSettingPanel', {
			info : info
		});
	});

});


/**
 * @fileoverview 对window的封装
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('mods/ui/win', function(require,exports,module){

	var $ = require('lib');
	var $module = require('lib/base/module');
	var $channelBlog = require('mods/channel/blog');

	var Win = $module.extend({
		options : {
			node : window
		},
		build : function(){
			this.set('size', {
				width : 0,
				height : 0
			});
			this.checkSize();
		},
		setDomEvents : function(action){
			var root = this.role('root');
			var getBound = this.getBound();
			var doc = $(document);
			action = action === 'add' ? 'on' : 'off';
			root[action]('resize', getBound('checkSize'));
			root[action]('scroll', getBound('checkSize'));
			doc[action]('touchstart', getBound('delayCheck'));
			doc[action]('touchmove', getBound('delayCheck'));
			doc[action]('touchend', getBound('delayCheck'));
			doc[action]('touchcancel', getBound('delayCheck'));
		},
		setCustEvents : function(action){
			var getBound = this.getBound();
			action = action === 'add' ? 'on' : 'off';
			this[action]('change:size', getBound('resize'));
		},
		checkSize : function(){
			this.set('size', {
				width : window.innerWidth,
				height : window.innerHeight
			});
		},
		//延迟检查屏幕高度
		delayCheck : function(){
			var that = this;
			if(that.delayTimer){
				clearTimeout(that.delayTimer);
				that.delayTimer = null;
			}
			that.delayTimer = setTimeout(function(){
				if(that.timer){
					clearInterval(that.timer);
					that.timer = null;
				}
			}, 2000);
			if(!that.timer){
				that.timer = setInterval(function(){
					that.checkSize();
				}, 500);
			}
		},
		getSize : function(){
			return $.extend({}, this.get('size'));
		},
		resize : function(){
			this.trigger('resize');
		}
	});

	module.exports = new Win({
		node : window
	});

});


/**
 * @fileoverview 侧边栏面板
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('mods/other/sidePanel',function(require,exports,module){
	var $ = require('lib');
	var $tpl = require('lib/kit/util/template');
	var $module = require('lib/base/module');
	var $layoutM = require('lib/common/layoutM');
	var $win = require('mods/ui/win');
	var $channelCommon = require('lib/common/channel');
	var $channelBlog = require('mods/channel/blog');

	//侧边栏面板 - 基类
	var SidePanel = $module.extend({
		setOptions : function(options){
			this.conf = $.extend(true, {
				//面板名称
				name : 'panel',
				//DOM id
				node : 'panel',
				//从哪一侧出现 ['left','right']
				side : 'left',
				//出现后与边缘的间距
				margin : 0,
				//面板模板
				template : '<div id="pl-side-panel"></div>',
				//root的默认样式
				styles : {}
			}, options);
			this.set('conf', this.conf);
		},
		build : function(){
			this.set('visible', false);
			this.checkStyle();
		},
		setCustEvents : function(action){
			var objs = this.objs;
			var getBound = this.getBound();
			action = action === 'add' ? 'on' : 'off';
			$win[action]('resize', getBound('checkStyle'));
			this[action]('attach', getBound('onAttach'));
			this[action]('detach', getBound('onDetach'));
			this[action]('change:visible', getBound('checkVisible'));
		},
		setListener : function(action){
			var getBound = this.getBound();
			action = action === 'add' ? 'add' : 'remove';
			$channelBlog[action]('layout-base-restore', getBound('close'));
			$channelBlog[action]('layout-base-fx-show', getBound('checkDisplay'));
			$channelBlog[action]('layout-base-fx-hide', getBound('checkDisplay'));
			$channelCommon[action]('content-update', getBound('close'));
		},
		checkStyle : function(){
			var conf = this.get('conf');
			var root = this.role('root');
			var wSize = $win.getSize();

			var styles = $.extend(true, {
				'top' : 0,
				'position' : 'fixed',
				'overflow' : 'hidden'
			}, conf.styles);

			styles.width = wSize.width - conf.margin + 'px';
			styles.height = wSize.height + 'px';

			if(conf.side === 'left'){
				styles.left = 0;
			}else{
				styles.right = 0;
			}
			root.css(styles);
		},
		checkVisible : function(){
			var visible = this.get('visible');
			var root = this.role('root');
			this.checkStyle();

			if(visible){
				root.show().css({
					'position' : 'fixed'
				});
			}
		},
		checkDisplay : function(){
			var visible = this.get('visible');
			var root = this.role('root');
			if(!visible){
				root.hide();
			}
		},
		open : function(){
			var conf = this.get('conf');
			this.checkStyle();
			this.set('visible', true);
			this.trigger('open');
			$channelBlog.fire('move-layout-base', {
				side : conf.side,
				margin : conf.margin,
				needLock : true
			});
		},
		close : function(){
			var conf = this.get('conf');
			this.trigger('close');
			this.set('visible', false);
			$channelBlog.fire('restore-layout-base', {
				side : conf.side,
				margin : conf.margin
			});
		},
		onAttach : function(){
			var conf = this.get('conf');
			//确保元素在布局内
			var root = this.role('root');
			if($.type(conf.node) === 'string' && !$(conf.node).length){
				$layoutM.insert(conf.node, root, function(){
					this.checkStyle();
				}.bind(this));
			}
		},
		onDetach : function(){
			this.set('visible', false);
		}
	});

	module.exports = SidePanel;

});


/**
 * @fileoverview trace模块，统计PV和布码
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */

define('mods/common/trace', function(require, exports, module) {
    var $ = require('lib');
    var $user = require('lib/common/user');
    var $channelCommon = require('lib/common/channel');
    var $channelGlobal = require('mods/channel/global');
    var $trans = require('mods/trans/global');
    var $base64 = require('lib/kit/str/base64');
    var $delay = require('lib/kit/func/delay');
    var TRACE_CODE_ATTR = 'trace-code';

	//SAX曝光统计 待发送cache
	var expList = [];
    //发送统计代码
    //与suda-uatrack类似
    var sendTrace = function(key, para) {
        if (!key) {
            return;
        }

        var arr = [];
        arr.push(key);

        // normalize parameters
        if ($user.isLogin()) {
            arr.push($user.getUserInfo().uid);
        }

        arr.push('pageid');
        arr.push(scope.pageid);

        if ($.isPlainObject(para)) {
            $.each(para, function(name, val) {
                arr.push(name);
                arr.push(val);
            });
        } else if ($.isArray(para)) {
            arr = arr.concat(para);
        }
        //统计系统只认下划线，用&符号连接的其他参数会被过滤
        // 2019/03/28 下线
        // $trans.request('traceAPI', {
        //     data: {
        //         type: arr.join('_')
        //     },
        //     type: 'GET',
        //     dataType: 'jsonp',
        //     jsonp: 'varname'
        // });
    };

    //直接发送SUDA PV统计
    var sudaLog = function() {
        if (window.SUDA && $.isFunction(SUDA.log)) {
            SUDA.log.apply(SUDA, arguments);
        }
    };

    //其他统计数据发送
    //作为后台apache无法通过接口日志统计时的一个补充
    var sendStat = function(para) {
        para = $.extend({}, para);
        $trans.request('traceStat', {
            data: para,
            type: 'GET'
        });
    };

    // 淘宝广告sax统计
    var sendSax = function(para) {
        para = $.extend({}, para);

        var t = $base64.encoder('1\ttanx-a-mm_15890324_8176878_28008044');

        var img = new Image(),
            key = '_sinaads_sio_log_' + (+ new Date()).toString(36);
        window[key] = img;
        img.onload = img.onerror = img.onabort = function() {
            img.onload = img.onerror = img.onabort = null;
            window[key] = null;
            img = null;
        };
        img.src = 'http://sax.sina.com.cn/view?type=network&t=' + t;
    };

    //页面刚载入时，SUDA代码已经运行并发送了PV
    //因此需要略过触发的第一个广播事件
    var sudaTraced = false;
    var sudaTracePV = function() {
        //浏览器地址栏变更，派发统计事件
        try {
            if (!sudaTraced) {
                sudaTraced = true;
            } else {
                // 这里需要把第二个参数强制写空，否则会带上上次pv的参数
                sudaLog('', '');
            }
        } catch (e) {
            console.log("suda统计异常", e);
        }
    };

    //通过事件目标，查找最近的具有统计代码属性的dom元素
    function findTrace(e) {
        var targetEl = $(e.target);
        var el = targetEl.parents('[' + TRACE_CODE_ATTR + ']');
        var code = targetEl.attr(TRACE_CODE_ATTR) || '';
        if (!code && el.length) {
            code = el.attr(TRACE_CODE_ATTR) || '';
        }
        return code;
    }

    //在页面切换地址时发送PV数据
    $channelCommon.add('location-change', sudaTracePV);

    //有些组件不触发地址跳转事件，但需要发送PV数据
    //比如幻灯组件中的图片翻页
    //此时发送这个广播即可发送PV
    $channelGlobal.add('suda-log', sudaLog);
    $channelGlobal.add('suda-trace-log', sendTrace);
    $channelGlobal.add('apache-other-log', sendStat);
    // 淘宝广告sax统计
    $channelGlobal.add('sax-log', sendSax);

    //触摸页面时，判断目标或者目标父元素是否含有统计参数
    //如果存在统计参数，就发送对应统计代码
    $(document.body).on('tap', function(e) {
        var traceCode = findTrace(e);
        if (traceCode) {
            $channelGlobal.fire('suda-trace-log', traceCode);
        }
    });


	$channelGlobal.add('sax-exp', inputExpList);
	function inputExpList(data){
		expList.push(data);
		delayFn();
	}



    //数据结构 {$node:$node, expUrls: ['url1','url2'], isSend:false}
    //添加曝光统计
    // console.log('sax-exp........');
    var delayFn = $delay(function() {
		// console.log(expList);
        var curScrollTop = window.pageYOffset - 0;
        var clientHeight = window.innerHeight - 0;
        if (expList.length > 0) {
            expList.forEach(function(item, i) {
				//因为页面上的dom节点 总是在动态刷新广告，因此这里取传递过阿里的node去实时计算，广告的位置
				try{
                    var y = item.$node.offset().top - 0;
    				var h = item.$node.height() - 0;
                    if (!item.isSend && y > curScrollTop && y+h < curScrollTop + clientHeight) {
    					item.isSend = true;
    					//send exp
    					sendSaxExp(item.expUrls);
                        // alert('send...');
    				}
                }catch(e){
                    alert(e);
                }

            });
        }
    }, 100);

	function sendSaxExp(urlList){
		if(urlList.length == 0) return;
		urlList.forEach(function(url){
			var img = new Image();
			img.src = url;
		});
	}

    $(window).on('scroll', delayFn);
});

/**
 * @fileoverview jquery 核心
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/core/jquery/jquery',function(require,exports,module){

/*!
 * jQuery JavaScript Library v2.0.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-04-18
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Support: IE9
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "2.0.0",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler and self cleanup method
	completed = function() {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );
		jQuery.ready();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		// Support: Safari <= 5.1 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Support: Firefox <20
		// The try/catch suppresses exceptions thrown when attempting to access
		// the "constructor" property of certain host objects, ie. |window.location|
		// https://bugzilla.mozilla.org/show_bug.cgi?id=814622
		try {
			if ( obj.constructor &&
					!core_hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: JSON.parse,

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString( data , "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
				indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	trim: function( text ) {
		return text == null ? "" : core_trim.call( text );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : core_indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: Date.now,

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.9.2-pre
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-04-16
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function() { return 0; },

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"boolean": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// Support: Windows 8 Native Apps
	// Assigning innerHTML with "name" attributes throws uncatchable exceptions
	// (http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx)
	// and the broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && documentIsHTML &&
		(!rbuggyMatches || !rbuggyMatches.test(expr)) &&
		(!rbuggyQSA     || !rbuggyQSA.test(expr)) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		val = fn && fn( elem, name, !documentIsHTML );

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns Returns -1 if a precedes b, 1 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Fetches boolean attributes by node
function boolHandler( elem, name, isXML ) {
	var val;
	return isXML ?
		undefined :
		(val = elem.getAttributeNode( name )) && val.specified ?
			val.value :
			elem[ name ] === true ? name.toLowerCase() : null;
}

// Fetches attributes without interpolation
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
function interpolationHandler( elem, name, isXML ) {
	var val;
	return isXML ?
		undefined :
		(val = elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 ));
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Initialize against the default document
setDocument();

// Support: Chrome<<14
// Always assume duplicates if they aren't passed to the comparison function
[0, 0].sort( sortOrder );
support.detectDuplicates = hasDuplicate;

// Support: IE<8
// Prevent attribute/property "interpolation"
assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	if ( div.firstChild.getAttribute("href") !== "#" ) {
		var attrs = "type|href|height|width".split("|"),
			i = attrs.length;
		while ( i-- ) {
			Expr.attrHandle[ attrs[i] ] = interpolationHandler;
		}
	}
});

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
assert(function( div ) {
	if ( div.getAttribute("disabled") != null ) {
		var attrs = booleans.split("|"),
			i = attrs.length;
		while ( i-- ) {
			Expr.attrHandle[ attrs[i] ] = boolHandler;
		}
	}
});

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {
	var input = document.createElement("input"),
		fragment = document.createDocumentFragment(),
		div = document.createElement("div"),
		select = document.createElement("select"),
		opt = select.appendChild( document.createElement("option") );

	// Finish early in limited environments
	if ( !input.type ) {
		return support;
	}

	input.type = "checkbox";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Will be defined later
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;
	support.pixelPosition = false;

	// Make sure checked status is properly cloned
	// Support: IE9, IE10
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement("input");
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment.appendChild( input );

	// Support: Safari 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: Firefox, Chrome, Safari
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	support.focusinBubbles = "onfocusin" in window;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv,
			// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
			divReset = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box",
			body = document.getElementsByTagName("body")[ 0 ];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		// Check box-sizing and margin behavior.
		body.appendChild( container ).appendChild( div );
		div.innerHTML = "";
		// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
		div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		body.removeChild( container );
	});

	return support;
})( {} );

/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var data_user, data_priv,
	rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;

Data.accepts = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType ?
		owner.nodeType === 1 || owner.nodeType === 9 : true;
};

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Support an expectation from the old data system where plain
			// objects used to initialize would be set to the cache by
			// reference, instead of having properties and values copied.
			// Note, this will kill the connection between
			// "this.cache[ unlock ]" and "cache"
			if ( jQuery.isEmptyObject( cache ) ) {
				this.cache[ unlock ] = data;
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {
			return this.get( owner, key );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = jQuery.camelCase( key );
					name = name in cache ?
						[ name ] : ( name.match( core_rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		delete this.cache[ this.key( owner ) ];
	}
};

// These may be used throughout the jQuery core codebase
data_user = new Data();
data_priv = new Data();


jQuery.extend({
	acceptData: Data.accepts,

	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[ 0 ],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[ i ].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );
							dataAttr( elem, name, data[ name ] );
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return jQuery.access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.boolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.boolean.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.boolean.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = function( elem, name, isXML ) {
		var fn = jQuery.expr.attrHandle[ name ],
			ret = isXML ?
				undefined :
				/* jshint eqeqeq: false */
				// Temporarily disable this handler to check existence
				(jQuery.expr.attrHandle[ name ] = undefined) !=
					getter( elem, name, isXML ) ?

					name.toLowerCase() :
					null;

		// Restore handler
		jQuery.expr.attrHandle[ name ] = fn;

		return ret;
	};
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self, matched, i,
			l = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		matched = [];
		for ( i = 0; i < l; i++ ) {
			jQuery.find( selector, this[ i ], matched );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		matched = this.pushStack( l > 1 ? jQuery.unique( matched ) : matched );
		matched.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return matched;
	},

	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[ 0 ] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = ( rneedsContext.test( selectors ) || typeof selectors !== "string" ) ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return core_indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return core_indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev*
			if ( name[ 0 ] === "p" ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( core_indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}
var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.col = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because core_push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because core_push.apply(_, arraylike) throws
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !jQuery.support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			i = 0,
			l = elems.length,
			fragment = context.createDocumentFragment(),
			nodes = [];

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because core_push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.firstChild;
					}

					// Support: QtWebKit
					// jQuery.merge because core_push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			l = elems.length,
			i = 0,
			special = jQuery.event.special;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( jQuery.acceptData( elem ) ) {

				data = data_priv.access( elem );

				if ( data ) {
					for ( type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}
				}
			}
			// Discard any remaining `private` and `user` data
			// One day we'll replace the dual arrays with a WeakMap and this won't be an issue.
			// (Splices the data objects out of the internal cache arrays)
			data_user.discard( elem );
			data_priv.discard( elem );
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "text",
			async: false,
			global: false,
			success: jQuery.globalEval
		});
	}
});

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var l = elems.length,
		i = 0;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = jQuery.extend( {}, pdataOld );
		events = pdataOld.events;

		data_priv.set( dest, pdataCur );

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}


function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}
jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var curCSS, iframe,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
function getStyles( elem ) {
	return window.getComputedStyle( elem, null );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css(elem, "display") );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

curCSS = function( elem, name, _computed ) {
	var width, minWidth, maxWidth,
		computed = _computed || getStyles( elem ),

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
		style = elem.style;

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: Safari 5.1
		// A tribute to the "awesome hack by Dean Edwards"
		// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret;
};


function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	// Support: Android 2.3
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// Support: Android 2.3
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrSupported = jQuery.ajaxSettings.xhr(),
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	// Support: IE9
	// We need to keep track of outbound xhr and abort them manually
	// because IE is not smart enough to do it all by itself
	xhrId = 0,
	xhrCallbacks = {};

if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
		xhrCallbacks = undefined;
	});
}

jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
jQuery.support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;
	// Cross domain only allowed if supported through XMLHttpRequest
	if ( jQuery.support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i, id,
					xhr = options.xhr();
				xhr.open( options.type, options.url, options.async, options.username, options.password );
				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}
				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}
				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}
				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}
				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;
							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file protocol always yields status 0, assume 404
									xhr.status || 404,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// #11426: When requesting binary data, IE9 will throw an exception
									// on any attempt to access responseText
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};
				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");
				// Create the abort callback
				callback = xhrCallbacks[( id = xhrId++ )] = callback("abort");
				// Do send the request
				// This may raise an exception which is actually
				// handled in jQuery.ajax (so no try/catch here)
				xhr.send( options.hasContent && options.data || null );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var index, prop, value, length, dataShow, toggle, tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}


	// show/hide pass
	dataShow = data_priv.get( elem, "fxshow" );
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if( value === "show" && dataShow !== undefined && dataShow[ index ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = data_priv.get( elem, "fxshow" ) || data_priv.access( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		elem = this[ 0 ],
		box = { top: 0, left: 0 },
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top + win.pageYOffset - docElem.clientTop,
		left: box.left + win.pageXOffset - docElem.clientLeft
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) && ( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

// If there is a window object, that at least has a document property,
// define jQuery and $ identifiers
if ( typeof window === "object" && typeof window.document === "object" ) {
	window.jQuery = window.$ = jQuery;
}

})( window );

});


/**
 * @fileoverview jquery 函数扩充插件 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/core/extra/jquery/jquery',function(require,exports,module){

	var $ = require('lib/core/jquery/jquery');

	var console = window.console;

	//ie7 console.log是一个对象
	var enableLog = console && typeof console.log === 'function';

	$.extend($, {
		log : function(){
			if(enableLog){
				console.log.apply(console, arguments);
			}
		},
		//驼峰转为连字符格式
		hyphenate : function(str){
			return str.replace(/[A-Z]/g, function($0){
				return '-' + $0.toLowerCase();
			});
		},
		//将 CSS text 替换成加了前缀的格式
		prefixCss : function(value){
			if(!value){return value;}
			['transform'].forEach(function(prop){
				value = value.replace(
					new RegExp(prop, 'gi'),
					$.hyphenate($.cssProps[prop])
				);
			});
			return value;
		}
	});

	$.extend($.fn, {
		//判断事件是否发生在元素内部(包括元素本身)
		occurInside : function(event){
			if(this.length && event && event.target){
				return this[0] === event.target || this.has(event.target).length;
			}
		},
		//触发dom回流
		reflow : function(){
			var reflow = this.size() && this.get(0).clientLeft;
			return this;
		}
	});

});




/**
 * @fileoverview jquery插件 - 提供免前缀设置CSS3功能 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/core/extra/jquery/prefixfree',function(require,exports,module){

	var $ = require('lib/core/jquery/jquery');

	var PrefixFree;

	var camelCase = $.camelCase;

	var hyphenate = $.hyphenate;

	/**
	 * PrefixFree 1.0.4
	 * @author Lea Verou
	 * @editor liangdong2@staff.sina.com.cn
	 * MIT license
	 */
	(function(root, undefined){

		if(!window.getComputedStyle) {
			return;
		}

		var getComputedStyle = window.getComputedStyle;

		var self = {
			prefixProperty: function(property, bCamelCase) {
				var prefixed = self.prefix + property;
				return bCamelCase ? camelCase(prefixed) : prefixed;
			}
		};

		PrefixFree = self;

		/**************************************
		 * Properties
		 **************************************/
		(function() {
			var i, property,
				prefixes = {},
				highest = { prefix: '', uses: 0},
				properties = [],
				shorthands = {},
				style = getComputedStyle(document.documentElement, null),
				dummy = document.createElement('div').style;

			// Why are we doing this instead of iterating over properties in a .style object? Cause Webkit won't iterate over those.
			var iterate = function(property) {
				pushUnique(properties, property);

				if(property.indexOf('-') > -1) {
					var parts = property.split('-');

					if(property.charAt(0) === '-') {
						var prefix = parts[1],
							uses = ++prefixes[prefix] || 1;

						prefixes[prefix] = uses;

						if(highest.uses < uses) {
							highest = {prefix: prefix, uses: uses};
						}

						// This helps determining shorthands
						while(parts.length > 3) {
							parts.pop();

							var shorthand = parts.join('-'),
								shorthandDOM = camelCase(shorthand);

							if(shorthandDOM in dummy) {
								pushUnique(properties, shorthand);
							}
						}
					}
				}
			};

			// Some browsers have numerical indices for the properties, some don't
			if(style.length > 0) {
				for(i = 0; i < style.length; i++) {
					iterate(style[i]);
				}
			}
			else {
				for(property in style) {
					iterate(hyphenate(property));
				}
			}

			self.prefix = '-' + highest.prefix + '-';
			self.Prefix = camelCase(self.prefix);

			properties.sort();

			self.properties = [];

			// Get properties ONLY supported with a prefix
			for(i=0; i<properties.length; i++){
				property = properties[i];

				if(property.charAt(0) !== '-') {
					break; // it's sorted, so once we get to the first unprefixed property, we're done
				}

				if(property.indexOf(self.prefix) === 0) { // we might have multiple prefixes, like Opera
					var unprefixed = property.slice(self.prefix.length);

					if(!(camelCase(unprefixed) in dummy)) {
						self.properties.push(unprefixed);
					}
				}
			}

			// IE fix
			if(self.Prefix == 'Ms' &&
				!('transform' in dummy) &&
				!('MsTransform' in dummy) &&
				('msTransform' in dummy)
			){
				self.properties.push('transform', 'transform-origin');
			}

			self.properties.sort();
		})();

		// Add class for current prefix
		root.className += ' ' + self.prefix;

		/**************************************
		 * Utilities
		 **************************************/

		function pushUnique(arr, val) {
			if(arr.indexOf(val) === -1) {
				arr.push(val);
			}
		}

	})(document.documentElement);

	(function(){

		if(!PrefixFree){return;}

		var self = PrefixFree;

		for(var i=0; i<self.properties.length; i++) {
			var property = self.properties[i],
				camelCased = $.camelCase(property),
				PrefixCamelCased = self.prefixProperty(property, true);

			$.cssProps[camelCased] = PrefixCamelCased;
		}

		$.getPrefix = function(){
			return PrefixFree.prefix;
		};

	})();


});


/**
 * @fileoverview jquery transform属性获取与设置 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 * @param {String} property 要设置的 transform 属性
 * @param {Object} property transform 键值对
 * @param {String} value 要设置的 transform 值
 * @returns transform属性值， transform字符串，或者undefined
 * @example
	$('div').transform('translateX', '20px');
	$('div').transform({
		'translateX' : '20px'
	});
	$('div').transform();	//'translateX(20px)'
	$('div').transform('translateX');	//'20px'
 */
define('lib/core/extra/jquery/transform',function(require,exports,module){

	var $ = require('lib/core/jquery/jquery');

	$.fn.transform = function(property, value){
		var obj = {};

		var transform = $.style($(this)[0], 'transform') || '';
		transform = transform === 'none' ? '' : transform;
		transform = transform.replace(/,\s+/gi, ',');

		transform.split(/([^,])\s+/gi).forEach(function(str, index){
			if(!str){return;}
			if(!str.match(/\w+/)){return;}
			var name = str.match(/\w+/)[0];
			var val = str.replace(name, '').replace(/[\(\)]/gi,'');
			val = $.trim(val);
			obj[name] = val;
		});

		if(!property){
			return obj;
		}

		if(typeof property === 'string'){
			if($.type(value) === 'undefined'){
				return obj[property] || 0;
			}else{
				obj[property] = value;
			}
		}else{
			$.extend(obj, property);
		}

		transform = [];
		$.each(obj, function(key, val){
			var str = key + '(' + val + ')';
			transform.push(str);
		});

		if(transform.length){
			transform = transform.join(' ');
		}else{
			transform = '';
		}

		return $(this).css('transform', transform);
	};

});




/**
 * @fileoverview 利用hammer.js增强多点触摸交互
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/core/extra/jquery/hammer',function(require,exports,module){

	var $ = require('lib/core/jquery/jquery');
	var Hammer = require('vendor/hammer/hammer');

	/**
	 * bind dom events
	 * this overwrites addEventListener
	 * @param   {HTMLElement}	element
	 * @param   {String}		eventTypes
	 * @param   {Function}		handler
	 */
	Hammer.event.bindDom = function(element, eventTypes, handler) {
		$(element).on(eventTypes, function(ev) {
			var data = ev.originalEvent || ev;

			// IE pageX fix
			if(data.pageX === undefined) {
				data.pageX = ev.pageX;
				data.pageY = ev.pageY;
			}

			// IE target fix
			if(!data.target) {
				data.target = ev.target;
			}

			// IE button fix
			if(data.which === undefined) {
				data.which = data.button;
			}

			// IE preventDefault
			if(!data.preventDefault) {
				data.preventDefault = ev.preventDefault;
			}

			// IE stopPropagation
			if(!data.stopPropagation) {
				data.stopPropagation = ev.stopPropagation;
			}

			handler.call(this, data);
		});
	};

	/**
	 * the methods are called by the instance, but with the jquery plugin
	 * we use the jquery event methods instead.
	 * @this	{Hammer.Instance}
	 * @return  {jQuery}
	 */
	Hammer.Instance.prototype.on = function(types, handler) {
		return $(this.element).on(types, handler);
	};
	Hammer.Instance.prototype.off = function(types, handler) {
		return $(this.element).off(types, handler);
	};


	/**
	 * trigger events
	 * this is called by the gestures to trigger an event like 'tap'
	 * @this	{Hammer.Instance}
	 * @param   {String}	gesture
	 * @param   {Object}	eventData
	 * @return  {jQuery}
	 */
	Hammer.Instance.prototype.trigger = function(gesture, eventData){
		var el = $(this.element);
		if(el.has(eventData.target).length) {
			el = $(eventData.target);
		}

		return el.trigger({
			type: gesture,
			gesture: eventData
		});
	};


	/**
	 * jQuery plugin
	 * create instance of Hammer and watch for gestures,
	 * and when called again you can change the options
	 * @param   {Object}	[options={}]
	 * @return  {jQuery}
	 */
	$.fn.hammer = function(options) {
		return this.each(function() {
			var el = $(this);
			var inst = el.data('hammer');
			// start new hammer instance
			if(!inst) {
				el.data('hammer', new Hammer(this, options || {}));
			}
			// change the options
			else if(inst && options) {
				Hammer.utils.extend(inst.options, options);
			}
		});
	};

	//自定义部分
	$(function(){
		$(document.body).hammer({
			//允许用户选中文字
			stop_browser_behavior : {
				userSelect : ''
			},

			//使tap事件更容易触发
			tap_max_touchtime	: 350,

			//使swip事件更容易触发
			swipe_velocity : 0.2
		});
	});

});


/**
 * @fileoverview 封装使用transition的动画
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/core/extra/jquery/transit', function(require, exports, module) {

	var $ = require('lib/core/jquery/jquery');

	var prefix = '';
	var eventPrefix;
	var endEventName;
	var endAnimationName;
	var vendors = {
		Webkit: 'webkit',
		Moz: '',
		O: 'o',
		ms: 'MS'
	};
	var document = window.document;
	var testEl = document.createElement('div');
	var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
	var transform;
	var transitionProperty;
	var transitionDuration;
	var transitionTiming;
	var animationName;
	var animationDuration;
	var animationTiming;
	var cssReset = {};

	function dasherize(str) {
		return downcase(str.replace(/([a-z])([A-Z])/, '$1-$2'));
	}

	function downcase(str) {
		return str.toLowerCase();
	}

	function normalizeEvent(name) {
		return eventPrefix ? eventPrefix + name : downcase(name);
	}

	$.each(vendors, function(vendor, event) {
		if (testEl.style[vendor + 'TransitionProperty'] !== undefined) {
			prefix = '-' + downcase(vendor) + '-';
			eventPrefix = event;
			return false;
		}
	});

	transform = 'transform';
	cssReset[transitionProperty = 'transition-property'] =
		cssReset[transitionDuration = 'transition-duration'] =
		cssReset[transitionTiming = 'transition-timing-function'] =
		cssReset[animationName = 'animation-name'] =
		cssReset[animationDuration = 'animation-duration'] =
		cssReset[animationTiming = 'animation-timing-function'] = '';

	$.transition = {
		off: (eventPrefix === undefined && testEl.style.transitionProperty === undefined),
		speeds: {
			_default: 400,
			fast: 200,
			slow: 600
		},
		cssPrefix: prefix,
		transitionEnd: normalizeEvent('TransitionEnd'),
		animationEnd: normalizeEvent('AnimationEnd')
	};

	$.fn.transit = function(properties, duration, ease, callback) {
		if ($.isPlainObject(duration)){
			ease = duration.easing;
			callback = duration.complete;
			duration = duration.duration;
		}

		if (duration){
			duration = (typeof duration == 'number' ? duration :
				($.transition.speeds[duration] || $.transition.speeds._default)) / 1000;
		}
		return this._transit(properties, duration, ease, callback);
	};

	$.fn._transit = function(properties, duration, ease, callback) {
		var key;
		var cssValues = {};
		var cssProperties;
		var transforms = '';
		var that = this;
		var wrappedCallback;
		var endEvent = $.transition.transitionEnd;

		if (duration === undefined){
			duration = 0.4;
		}

		if ($.transition.off){
			duration = 0;
		}

		if (typeof properties == 'string') {
			// keyframe animation
			cssValues[animationName] = properties;
			cssValues[animationDuration] = duration + 's';
			cssValues[animationTiming] = (ease || 'linear');
			endEvent = $.transition.animationEnd;
		} else {
			cssProperties = [];
			// CSS transitions
			for (key in properties){
				if (supportedTransforms.test(key)){
					transforms += key + '(' + properties[key] + ') ';
				}else{
					cssValues[key] = properties[key];
					cssProperties.push(dasherize(key));
				}
			}

			if (transforms){
				cssValues[transform] = transforms;
				cssProperties.push(transform);
			}

			if (duration > 0 && typeof properties === 'object') {
				cssValues[transitionProperty] = '*';
				cssValues[transitionDuration] = duration + 's';
				cssValues[transitionTiming] = (ease || 'linear');
			}
		}

		wrappedCallback = function(event) {
			if (typeof event !== 'undefined') {
				if (event.target !== event.currentTarget){
					// makes sure the event didn't bubble from "below"
					return;
				}
				$(event.target).unbind(endEvent, wrappedCallback);
			}
			$(this).css(cssReset);

			if(callback){
				callback.call(this);
			}
		};

		if (duration > 0){
			this.bind(endEvent, wrappedCallback);
		}

		// trigger page reflow so new elements can transit
		this.size() && this.get(0).clientLeft;
		this.css(cssValues);

		//css样式无变化时，不会触发transit事件
		var hasChange = !(
			Object.keys(properties).every(function(prop){
				var original = that.css(prop) + '';
				var target = properties[prop] + '';
				return original === target;
			})
		);

		if (duration <= 0 || !hasChange){
			this.unbind(endEvent, wrappedCallback);
			setTimeout(function() {
				that.each(function() {
					wrappedCallback.call(this);
				});
			}, 0);
		}

		return this;
	};

	testEl = null;

});


/**
 * @fileoverview 模板渲染
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('vendor/mustache',function(require,exports,module){

/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

/*global define: false*/

  exports.name = "mustache.js";
  exports.version = "0.7.2";
  exports.tags = ["{{", "}}"];

  exports.Scanner = Scanner;
  exports.Context = Context;
  exports.Writer = Writer;

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var nonSpaceRe = /\S/;
  var eqRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  function testRe(re, string) {
    return RegExp.prototype.test.call(re, string);
  }

  function isWhitespace(string) {
    return !testRe(nonSpaceRe, string);
  }

  var isArray = Array.isArray || function (obj) {
    return Object.prototype.toString.call(obj) === "[object Array]";
  };

  function escapeRe(string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  var entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'\/]/g, function (s) {
      return entityMap[s];
    });
  }

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  exports.escape = escapeHtml;

  function Scanner(string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function () {
    return this.tail === "";
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function (re) {
    var match = this.tail.match(re);

    if (match && match.index === 0) {
      this.tail = this.tail.substring(match[0].length);
      this.pos += match[0].length;
      return match[0];
    }

    return "";
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function (re) {
    var match, pos = this.tail.search(re);

    switch (pos) {
    case -1:
      match = this.tail;
      this.pos += this.tail.length;
      this.tail = "";
      break;
    case 0:
      match = "";
      break;
    default:
      match = this.tail.substring(0, pos);
      this.tail = this.tail.substring(pos);
      this.pos += pos;
    }

    return match;
  };

  function Context(view, parent) {
    this.view = view;
    this.parent = parent;
    this._cache = {};
  }

  Context.make = function (view) {
    return (view instanceof Context) ? view : new Context(view);
  };

  Context.prototype.push = function (view) {
    return new Context(view, this);
  };

  Context.prototype.lookup = function (name) {
    var value = this._cache[name];

    if (!value) {
      if (name == '.') {
        value = this.view;
      } else {
        var context = this;

        while (context) {
          if (name.indexOf('.') > 0) {
            value = context.view;
            var names = name.split('.'), i = 0;
            while (value && i < names.length) {
              value = value[names[i++]];
            }
          } else {
            value = context.view[name];
          }

          if (value != null) break;

          context = context.parent;
        }
      }

      this._cache[name] = value;
    }

    if (typeof value === 'function') value = value.call(this.view);

    return value;
  };

  function Writer() {
    this.clearCache();
  }

  Writer.prototype.clearCache = function () {
    this._cache = {};
    this._partialCache = {};
  };

  Writer.prototype.compile = function (template, tags) {
    var fn = this._cache[template];

    if (!fn) {
      var tokens = exports.parse(template, tags);
      fn = this._cache[template] = this.compileTokens(tokens, template);
    }

    return fn;
  };

  Writer.prototype.compilePartial = function (name, template, tags) {
    var fn = this.compile(template, tags);
    this._partialCache[name] = fn;
    return fn;
  };

  Writer.prototype.getPartial = function (name) {
    if (!(name in this._partialCache) && this._loadPartial) {
      this.compilePartial(name, this._loadPartial(name));
    }

    return this._partialCache[name];
  };

  Writer.prototype.compileTokens = function (tokens, template) {
    var self = this;
    return function (view, partials) {
      if (partials) {
        if (typeof partials === 'function') {
          self._loadPartial = partials;
        } else {
          for (var name in partials) {
            self.compilePartial(name, partials[name]);
          }
        }
      }

      return renderTokens(tokens, self, Context.make(view), template);
    };
  };

  Writer.prototype.render = function (template, view, partials) {
    return this.compile(template)(view, partials);
  };

  /**
   * Low-level function that renders the given `tokens` using the given `writer`
   * and `context`. The `template` string is only needed for templates that use
   * higher-order sections to extract the portion of the original template that
   * was contained in that section.
   */
  function renderTokens(tokens, writer, context, template) {
    var buffer = '';

    var token, tokenValue, value;
    for (var i = 0, len = tokens.length; i < len; ++i) {
      token = tokens[i];
      tokenValue = token[1];

      switch (token[0]) {
      case '#':
        value = context.lookup(tokenValue);

        if (typeof value === 'object') {
          if (isArray(value)) {
            for (var j = 0, jlen = value.length; j < jlen; ++j) {
              buffer += renderTokens(token[4], writer, context.push(value[j]), template);
            }
          } else if (value) {
            buffer += renderTokens(token[4], writer, context.push(value), template);
          }
        } else if (typeof value === 'function') {
          var text = template == null ? null : template.slice(token[3], token[5]);
          value = value.call(context.view, text, function (template) {
            return writer.render(template, context);
          });
          if (value != null) buffer += value;
        } else if (value) {
          buffer += renderTokens(token[4], writer, context, template);
        }

        break;
      case '^':
        value = context.lookup(tokenValue);

        // Use JavaScript's definition of falsy. Include empty arrays.
        // See https://github.com/janl/mustache.js/issues/186
        if (!value || (isArray(value) && value.length === 0)) {
          buffer += renderTokens(token[4], writer, context, template);
        }

        break;
      case '>':
        value = writer.getPartial(tokenValue);
        if (typeof value === 'function') buffer += value(context);
        break;
      case '&':
        value = context.lookup(tokenValue);
        if (value != null) buffer += value;
        break;
      case 'name':
        value = context.lookup(tokenValue);
        if (value != null) buffer += exports.escape(value);
        break;
      case 'text':
        buffer += tokenValue;
        break;
      }
    }

    return buffer;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens(tokens) {
    var tree = [];
    var collector = tree;
    var sections = [];

    var token;
    for (var i = 0, len = tokens.length; i < len; ++i) {
      token = tokens[i];
      switch (token[0]) {
      case '#':
      case '^':
        sections.push(token);
        collector.push(token);
        collector = token[4] = [];
        break;
      case '/':
        var section = sections.pop();
        section[5] = token[2];
        collector = sections.length > 0 ? sections[sections.length - 1][4] : tree;
        break;
      default:
        collector.push(token);
      }
    }

    return tree;
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens(tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, len = tokens.length; i < len; ++i) {
      token = tokens[i];
      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          lastToken = token;
          squashedTokens.push(token);
        }
      }
    }

    return squashedTokens;
  }

  function escapeTags(tags) {
    return [
      new RegExp(escapeRe(tags[0]) + "\\s*"),
      new RegExp("\\s*" + escapeRe(tags[1]))
    ];
  }

  /**
   * Breaks up the given `template` string into a tree of token objects. If
   * `tags` is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. ["<%", "%>"]). Of
   * course, the default is to use mustaches (i.e. Mustache.tags).
   */
  exports.parse = function (template, tags) {
    template = template || '';
    tags = tags || exports.tags;

    if (typeof tags === 'string') tags = tags.split(spaceRe);
    if (tags.length !== 2) throw new Error('Invalid tags: ' + tags.join(', '));

    var tagRes = escapeTags(tags);
    var scanner = new Scanner(template);

    var sections = [];     // Stack to hold section tokens
    var tokens = [];       // Buffer to hold the tokens
    var spaces = [];       // Indices of whitespace tokens on the current line
    var hasTag = false;    // Is there a {{tag}} on the current line?
    var nonSpace = false;  // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace() {
      if (hasTag && !nonSpace) {
        while (spaces.length) {
          delete tokens[spaces.pop()];
        }
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var start, type, value, chr, token;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(tagRes[0]);
      if (value) {
        for (var i = 0, len = value.length; i < len; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push(['text', chr, start, start + 1]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr == '\n') stripSpace();
        }
      }

      // Match the opening tag.
      if (!scanner.scan(tagRes[0])) break;
      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(eqRe);
        scanner.scan(eqRe);
        scanner.scanUntil(tagRes[1]);
      } else if (type === '{') {
        value = scanner.scanUntil(new RegExp('\\s*' + escapeRe('}' + tags[1])));
        scanner.scan(curlyRe);
        scanner.scanUntil(tagRes[1]);
        type = '&';
      } else {
        value = scanner.scanUntil(tagRes[1]);
      }

      // Match the closing tag.
      if (!scanner.scan(tagRes[1])) throw new Error('Unclosed tag at ' + scanner.pos);

      token = [type, value, start, scanner.pos];
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        if (sections.length === 0) throw new Error('Unopened section "' + value + '" at ' + start);
        var openSection = sections.pop();
        if (openSection[1] !== value) throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        tags = value.split(spaceRe);
        if (tags.length !== 2) throw new Error('Invalid tags at ' + start + ': ' + tags.join(', '));
        tagRes = escapeTags(tags);
      }
    }

    // Make sure there are no open sections when we're done.
    var openSection = sections.pop();
    if (openSection) throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

    tokens = squashTokens(tokens);

    return nestTokens(tokens);
  };

  // All Mustache.* functions use this writer.
  var _writer = new Writer();

  /**
   * Clears all cached templates and partials in the default writer.
   */
  exports.clearCache = function () {
    return _writer.clearCache();
  };

  /**
   * Compiles the given `template` to a reusable function using the default
   * writer.
   */
  exports.compile = function (template, tags) {
    return _writer.compile(template, tags);
  };

  /**
   * Compiles the partial with the given `name` and `template` to a reusable
   * function using the default writer.
   */
  exports.compilePartial = function (name, template, tags) {
    return _writer.compilePartial(name, template, tags);
  };

  /**
   * Compiles the given array of tokens (the output of a parse) to a reusable
   * function using the default writer.
   */
  exports.compileTokens = function (tokens, template) {
    return _writer.compileTokens(tokens, template);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  exports.render = function (template, view, partials) {
    return _writer.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.
  exports.to_html = function (template, view, partials, send) {
    var result = exports.render(template, view, partials);

    if (typeof send === "function") {
      send(result);
    } else {
      return result;
    }
  };

});


/**
 * @fileoverview 隐藏iframe工具 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/kit/dom/hiddenIframe',function(require,exports,module){

	var $ = require('lib');
	var $hiddenContainer = require('lib/kit/dom/hiddenContainer');

	var HiddenIframe = {
		init : function(options){
			this.setOptions(options);
			this.build();
		},
		setOptions : function(options){
			this.conf = $.extend({

			}, options);
		},
		build : function(){
			this.iframe = $('<iframe></iframe>').css('display', 'none');
			$hiddenContainer.append(this.iframe);
			['window','document'].forEach(function(tag){
				this[tag] =  $(this.iframe[0].contentWindow[tag]);
			}, this);
			this.body = this.document.find('body');
			this.body.hide();
		},
		html : function(){
			return this.body.html.apply(this.body, arguments);
		},
		getNode : function(selector){
			return this.document.find(selector);
		},
		destroy : function(){
			this.conf = null;
			this.window = null;
			this.document = null;
			this.body = null;
		}
	};

	exports.create = function(options){
		var obj = Object.create(HiddenIframe);
		obj.init(options);
		return obj;
	};

});



/**
 * @fileoverview 构建一个Ready事件管理组件
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 * @example
	var prop = '';
	var obj = $makeReady({
		condition : function(){
			return !!prop;
		},
		ready : function(callback){
			setTimeout(function(){
				prop = 'ready';
				callback();
			});
		}
	});
	obj.exec(function(){
		console.debug(prop);
	});
	obj.exec(function(){
		console.debug(prop);
	});
 */

define('lib/kit/util/makeReady',function(require,exports,module){

	var $ = require('lib');

	//构建一个缓存队列，在回调完成前收集需要执行的任务
	module.exports = function(options){
		var conf = $.extend({
			condition : $.noop,	//判断什么条件下直接运行任务
			ready : $.noop		//回调任务，第一个参数必须为回调函数
		}, options);
		
		var cache;

		return {
			reset : function(){
				if(cache){
					cache.length = 0;
					cache = null;
				}
			},
			exec : function(fn){
				if($.type(fn) === 'function'){
					if(conf.condition()){
						fn();
					}else{
						if(!cache){
							cache = [];
							conf.ready(function(){
								while($.type(cache)==='array' && cache.length > 0){
									cache.shift()();
								}
							});
						}
						cache.push(fn);
					}
				}

			},
			destroy : function(){
				this.reset();
			}
		};
	};

});


/**
 * @fileoverview 解析URL 
 * @author Robin Young | yonglin@staff.sina.com.cn
 * @param {String} str
 * @return {Object} that
 * @example
	var $parseURL = require('lib/kit/str/parseURL');
	assertEqual( $parseURL('http://t.sina.com.cn/profile?beijing=huanyingni') , {
		hash : ''
		host : 't.sina.com.cn'
		path : 'profile'
		port : ''
		query : 'beijing=huanyingni'
		scheme : http
		slash : '//'
		url : 'http://t.sina.com.cn/profile?beijing=huanyingni'
	});
 */

define('lib/kit/str/parseURL',function(require,exports,module){

	module.exports = function(url){
		var parse_url = /^(?:([A-Za-z]+):(\/{0,3}))?([0-9.\-A-Za-z]+\.[0-9A-Za-z]+)?(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
		var names = ['url', 'scheme', 'slash', 'host', 'port', 'path', 'query', 'hash'];
		var results = parse_url.exec(url);
		var that = {};
		for (var i = 0, len = names.length; i < len; i += 1) {
			that[names[i]] = results[i] || '';
		}
		return that;
	};

});

/**
 * @fileoverview 包装为延迟触发的函数
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 * @param {Function} fn 要延迟触发的函数
 * @param {Number} delay 延迟时间[ms]
 * @param {Object} bind 函数的this指向
 * @example
	var comp = {
		countWords : function(){
			console.debug(this.length);
		}
	};
	$('#input').keydown($delay(function(){
		this.length = $('#input').val().length;
		this.countWords();
	}, 200, comp));
 */
define('lib/kit/func/delay',function(require,exports,module){

	module.exports = function(fn, delay, bind){
		var timer = null;
		return function(){
			bind = bind || this;
			if(timer)clearTimeout(timer);
			var args = arguments;
			timer = setTimeout(function(){
				fn.apply(bind, args);
			}, delay);
		};
	};
});


/**
 * @fileoverview alert对话框
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/alert',function(require,exports,module){

	var $ = require('lib');
	var $recycleConfirmBox = require('mods/dialog/recycleConfirmBox');
	var $reuse = require('mods/util/reuse');

	var TPL = {
		box : [
			'<div class="l-prompt">',
				'<p class="prompt b-txt4">',
					'<span data-role="icon" class="b-ft-icon">(</span>',
					'<span data-role="content" class="txt"></span>',
				'</p>',
				'<div class="btn">',
					//alert对话框ok按钮与cancel按钮等效
					//为了方便遮罩控制，在这里特地指定为cancel按钮
					'<a data-role="cancel" href="javascript:;" class="b-btn-a">确定</a>',
				'</div>',
			'</div>'
		].join('')
	};

	//缓存对象
	var cache = $reuse($recycleConfirmBox);

	module.exports = function(message, options){
		var conf = $.extend({
			template : TPL.box,
			msg : message,
			type : 'warn',
			okText : '确&nbsp;定',
			cancelText : '确&nbsp;定',
			ok : $.noop
		}, options);

		conf.cancelText = conf.okText;

		var box = cache.get(conf);

		//为了符合操作习惯，将ok回调绑定到cancel事件上去
		box.on('cancel', conf.ok);

		box.render();
		box.fxIn();
	};

});



/**
 * @fileoverview confirm对话框
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/confirm',function(require,exports,module){

	var $ = require('lib');
	var $recycleConfirmBox = require('mods/dialog/recycleConfirmBox');
	var $reuse = require('mods/util/reuse');

	//缓存对象
	var cache = $reuse($recycleConfirmBox);

	module.exports = function(message, options){
		var conf = $.extend({
			msg : message,
			type : 'confirm',
			ok : $.noop,
			cancel : $.noop
		}, options);
		var box = cache.get(conf);
		box.on('ok', conf.ok);
		box.on('cancel', conf.cancel);
		box.render();
		box.fxIn();
	};

});



/**
 * @fileoverview 提示信息浮层
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/tip',function(require,exports,module){

	var $ = require('lib');
	var $tipBox = require('mods/dialog/tipBox');
	var $reuse = require('mods/util/reuse');

	//自动隐藏的超时时间
	var AUTOHIDE_TIMEOUT = 2000;

	//缓存对象
	var cache = $reuse($tipBox);

	//显示消息盒子
	module.exports = function(message, options){
		var conf = $.extend({
			msg : message
		}, options);
		var tip = cache.get(conf);
		tip.render();
		tip.fxIn();
		setTimeout(function(){
			tip.fxOut();
		}, AUTOHIDE_TIMEOUT);
	};

});


/**
 * @fileoverview 加载中浮层
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/loading',function(require,exports,module){

	var $ = require('lib');
	var $loadingBox = require('mods/dialog/loadingBox');
	var $reuse = require('mods/util/reuse');

	//缓存对象
	var cache = $reuse($loadingBox);

	module.exports = function(options){
		var conf = $.extend({
			msg : '加载中',
			msgRetry : '请重试...',
			type : 'loading',
			timeout : 0,
			onCancel : null,
			onTimeout : null,
			onRetry : null,
			//loading样式
			styles : {
				'position' : 'fixed',
				'opacity' : 0,
				'display' : 'none'
			},
			cancel : false,
			parent : null
		}, options);

		var spec = {};

		spec.msg = conf.msg;

		['msgRetry','timeout','onCancel','onTimeout','onRetry'].forEach(function(key){
			spec[key] = conf[key];
			delete conf[key];
		});

		if($.type(spec.onCancel) === 'function'){
			spec.cancel = conf.cancel = true;
		}

		if(conf.parent){
			conf.styles.position = 'absolute';
		}

		var tip = cache.get(conf);
		tip.render();
		tip.fxIn();

		var that = {};
		var timer = null;

		var setTimer = function(){
			if(spec.timeout && $.type(spec.timeout) === 'number'){
				timer = setTimeout(function(){
					if($.type(spec.onTimeout) === 'function'){
						spec.onTimeout();
					}
					if($.type(spec.onRetry) === 'function'){
						tip.set('conf', {
							type : 'retry',
							cancel : spec.cancel,
							msg : spec.msgRetry
						});
						tip.setPosition();
					}else{
						that.hide();
					}
				}, spec.timeout);
			}
		};

		that.hide = function(){
			clearTimeout(timer);
			tip.fxOut();
		};

		that.cancel = function(){
			that.hide();
			if($.type(spec.onCancel) === 'function'){
				spec.onCancel();
			}
		};

		that.retry = function(){
			if($.type(spec.onRetry) === 'function'){
				spec.onRetry();
			}
			tip.set('conf',{
				type : 'loading',
				cancel : spec.cancel,
				msg : spec.msg
			});
			tip.setPosition();
			setTimer();
		};

		tip.on('retry', function(){
			that.retry();
		});

		tip.on('cancel', function(){
			that.cancel();
		});

		setTimer();
		return that;
	};

});


/**
 * @fileoverview 提供try catch 处理机制 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/kit/util/attempt',function(require,exports,module){

	var $ = require('lib');

	//提供一个默认的try catch处理机制
	//param {Function} fn 要尝试处理的函数
	//param {Object} options 选项
	/* example:
	attempt(function(){
		//do somthing ...
	}, {
		name : 'test',
		bind : window,
		time : true,
		error : function(){},
		next : function(){}
	});
	*/
	module.exports = function(fn, options){
		var t1, t2, error = false, log = $.log;
		options = $.extend({
			name : '',			//标记日志名称
		//	bind : null,		//默认应该为undefined，所以注释本行
			time : false,		//是否输出计时日志
			success : $.noop,	//无错回调
			error : $.noop,		//发生错误的回调
			next : $.noop		//无论成功失败都要执行的回调
		}, options);

		try{
			t1 = Date.now();
			if(typeof(options.bind) === 'undefined'){
				fn();
			}else{
				fn.call(options.bind);
			}
			t2 = Date.now();
		}catch(e){
			error = true;
			log('[' + options.name + ']:', e.toString(), e);
			options.error(e);
		}finally{
			if(options.time){
				log('[' + options.name + ']:', t2 - t1 + 'ms');
			}
			if(!error){
				options.success();
			}
			options.next();
		}
	};

});


/**
 * @fileoverview 网络环境检测
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/kit/env/network',function(require,exports,module){

	var supportOnlineCheck = 'onLine' in navigator;

	module.exports = {
		//是否联网
		onLine : function(){
			return supportOnlineCheck ? navigator.onLine : true;
		}
	};

});



/**
 * @fileoverview 设置、获取cookie
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */
define('lib/kit/util/cookie', function(require,exports,module){

    var $ = require('lib');

	var Cookie = {
		set: function(sKey, sValue, oOpts){
			var arr = [];
			var d, t;
			var cfg = $.extend({
				'expire': null,     //过期时间(小时)
				'path': '/',        //路径
				'domain': null,     //域名
				'secure': null,
				'encode': true
			}, oOpts);

			if (cfg.encode === true) {
				sValue = escape(sValue);
			}
			arr.push(sKey + '=' + sValue);

			if (cfg.path !== null) {
				arr.push('path=' + cfg.path);
			}
			if (cfg.domain !== null) {
				arr.push('domain=' + cfg.domain);
			}
			if (cfg.secure !== null) {
				arr.push(cfg.secure);
			}
			if (cfg.expire !== null) {
				d = new Date();
				t = d.getTime() + cfg.expire * 3600000;
				d.setTime(t);
				arr.push('expires=' + d.toGMTString());
			}
			document.cookie = arr.join(';');
		},
		get: function(sKey){
			sKey = sKey.replace( /([\.\[\]\$])/g, '\\$1');
			var rep = new RegExp(sKey + '=([^;]*)?;', 'i');
			var co = document.cookie + ';';
			var res = co.match(rep);
			if (res) {
				return res[1] || "";
			} else {
				return '';
			}
		},
		remove: function(sKey, oOpts){
			oOpts = oOpts || {};
			oOpts.expire = -10;
			this.set(sKey, '', oOpts);
		}
	};

	module.exports = Cookie;

});


/**
 * @fileoverview 加载单点登录文件
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/util/ssoReady',function(require,exports,module){

	var $makeReady = require('lib/kit/util/makeReady');
	var $loadScript = require('lib/kit/util/loadScript');

	var SSO_JS = 'https://i.sso.sina.com.cn/js/ssologin.js';

	var readyObj = null;
	var ssoReady = function(fn){
		if(!readyObj){
			readyObj = $makeReady({
				condition : function(){
					return !!window.sinaSSOController;
				},
				ready : function(callback){
					$.getScript(SSO_JS, callback);
				}
			});
		}
		readyObj.exec(fn);
	};

	ssoReady.reset = function(){
		readyObj.reset();
	};

	module.exports = ssoReady;

});

/**
 * @fileoverview 测试操作系统
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/kit/env/os',function(require,exports,module){

	var ua = navigator.userAgent.toLowerCase();
	var platform = navigator.platform.toLowerCase();
	var version, m;

	var numberify = function(s) {
		var c = 0;
		try{
			var arr = s.split(/[_\.]/);
			var main = arr.shift();
			c = parseFloat(main + '.' + arr.join(''), 10);
		}catch(e){}
		return c;
	};

	try{
		if( (m = ua.match(/\((ipad|iphone|ipod|itouch).*os\s([\d_\.]+)/)) && m[2]){
			version = numberify(m[2]);
		}else if( (m = ua.match(/android[^\d]+([\d_\.]+)/)) && m[1]){
			version = numberify(m[1]);
		}else if( (m = ua.match(/macintosh[^\d]+([\d_\.]+)/)) && m[1]){
			version = numberify(m[1]);
		}else if( (m = ua.match(/(windows|win32)[^\d]+([\d_\.]+)/)) && m[2]){
			version = numberify(m[2]);
		}else if( (m = ua.match(/rhino[^\d]+([\d_\.]+)/)) && m[1]){
			version = numberify(m[1]);
		}
	}catch(e){
		throw e;
	}

	var os = {
		'version' : version,
		'windows' : (/windows|win32/).test(ua),
		'macintosh' : (/macintosh/).test(ua),
		'rhino' : (/rhino/).test(ua)
	};

	os.android = (/android/).test(ua) || (/xiaomi/).test(ua);

	//MIUI5.0使用的浏览器UA是IOS3.0的，且未添加xiaomi标记。
	if(!(/(ipad|iphone|ipod|itouch)/).test(platform) && version <= 4){
		os.android = true;
	}

	os.ios = (/(ipad|iphone|ipod|itouch)/).test(ua) && !os.android;

	module.exports = os;

});



/**
 * @fileoverview 测试浏览器
 * browser test
 * @author Robin Young | yonglin@staff.sina.com.cn
 * @update Liangdong | liangdong2@staff.sina.com.cn
	{
		'OS':{String},			//操作系统
		'CORE':{String},		//浏览器内核
		'Version':{String},		//浏览器版本
		'EXTRA':{String},		//第三方浏览器
		'IE':{Boolean},			//是否是IE
		'OPERA':{Boolean},		//是否是opera
		'MOZ':{Boolean},		//是否是mozilla系
		'IE6':{Boolean},		//是否是IE6
		'IE7':{Boolean},		//是否是IE7
		'IE8':{Boolean},		//是否是IE8
		'IE9':{Boolean},		//是否是IE9
		'IE10':{Boolean},		//是否是IE10
		'SAFARI':{Boolean},		//是否是safari
		'CHROME':{Boolean},		//是否是chrome
		'IPAD':{Boolean},		//是否是ipad
		'IPHONE':{Boolean},		//是否是iphone
		'ITOUCH':{Boolean},		//是否是itouch
		'MOBILE':{Boolean}		//是否是mobile
	};
 * @example
 * var $browser = require('more/browser');
 * assertEqual($browser.IE, true);
 * assertEqual($browser.MOZ, true);
 */

define('lib/kit/env/browser',function(require,exports,module){

	var ua = navigator.userAgent.toLowerCase();
	var external = window.external || '';
	var core, m, extra, version, os;

	var numberify = function(s) {
		var c = 0;
		try{
			c = parseFloat(s.replace(/\./g, function() {
				return (c++ == 1) ? '' : '.';
			}));
		}catch(e){}
		return c;
	};

	try{
		if ((/windows|win32/i).test(ua)) {
			os = 'windows';
		} else if ((/macintosh/i).test(ua)) {
			os = 'macintosh';
		} else if ((/rhino/i).test(ua)) {
			os = 'rhino';
		} else if ((/like mac os x/i).test(ua)){
			os = 'ios';
		} else if ((/android/).test(ua)){
			os = 'android';
		}

		if((m = ua.match(/applewebkit\/([^\s]*)/)) && m[1]){
			core = 'webkit';
			version = numberify(m[1]);
		}else if((m = ua.match(/presto\/([\d.]*)/)) && m[1]){
			core = 'presto';
			version = numberify(m[1]);
		}else if(m = ua.match(/msie\s([^;]*)/)){
			core = 'trident';
			version = 1.0;
			if ((m = ua.match(/trident\/([\d.]*)/)) && m[1]) {
				version = numberify(m[1]);
			}
		}else if(/gecko/.test(ua)){
			core = 'gecko';
			version = 1.0;
			if((m = ua.match(/rv:([\d.]*)/)) && m[1]){
				version = numberify(m[1]);
			}
		}

		if(/world/.test(ua)){
			extra = 'world';
		}else if(/360se/.test(ua)){
			extra = '360';
		}else if((/maxthon/.test(ua)) || typeof external.max_version == 'number'){
			extra = 'maxthon';
		}else if(/tencenttraveler\s([\d.]*)/.test(ua)){
			extra = 'tt';
		}else if(/se\s([\d.]*)/.test(ua)){
			extra = 'sogou';
		}
	}catch(e){}

	var Browser = {
		'UA' : ua,
		'OS':os,
		'CORE':core,
		'Version':version,
		'EXTRA':(extra?extra:false),
		'IE': /msie/.test(ua),
		'OPERA': /opera/.test(ua),
		'UC': /UCBrowser/i.test(ua),
		'MOZ': /gecko/.test(ua) && !/(compatible|webkit)/.test(ua),
		'IE5': /msie 5 /.test(ua),
		'IE55': /msie 5.5/.test(ua),
		'IE6': /msie 6/.test(ua),
		'IE7': /msie 7/.test(ua),
		'IE8': /msie 8/.test(ua),
		'IE9': /msie 9/.test(ua),
		'IE10': /msie 10/.test(ua),
		'CHROME': /(chrome|crios)\/([\d.]*)/.test(ua),
		'IPAD':/\(ipad/i.test(ua),
		'IPHONE':/\(iphone/i.test(ua),
		'ITOUCH':/\((itouch|ipod)/i.test(ua),
		'MOBILE':/mobile/i.test(ua),
		'WX': /MicroMessenger/i.test(ua),
		'WB': /Weibo/i.test(ua),
		'QQ': /QQ\/\d/i.test(ua), //手机qq app中的浏览器
		'BAIDU':/baidu/i.test(ua),//测试是否是百度浏览器
		'XIAOMI_B': /xiaomi\/miuibrowser/i.test(ua),
		'IOS9_UPPER': /iPhone OS (\d+)/i.test(ua) ? (/iPhone OS (\d+)/i.exec(ua)[1] >= 9 ? true : false) : false
	};

	Browser.SAFARI = !Browser.CHROME && (/([\w.]*) safari/).test(ua);

	module.exports = Browser;

});

/**
 * @fileoverview 获取url中的参数
 * @author yifei2@staff.sina.com.cn
 * @param {String} str
 * @return {Object} that
 * @example
	
 */

define('lib/kit/str/getUrlParam',function(require,exports,module){
	var $parseURL = require('lib/kit/str/parseURL');

	module.exports = function(name, url){
		var reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)");
		var r = null;
		if(url) {
			r = $parseURL(url).query.match(reg);
		}else {
			r = window.location.search.substr(1).match(reg);
		}

		if(r) {
			return unescape(r[2]);
		} else {
			return null;
		}
	};

});

/**
 * @fileoverview 博客广播
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/channel/blog',function(require,exports,module){

	var $listener = require('lib/common/listener');
	module.exports = new $listener([
		//重新加载博文列表内容
		'reload-blog-list',
		//显示导航面板
		'show-nav-panel',
		//显示用户面板
		'show-user-panel',
		//显示评论面板
		'show-comment-panel',
		//显示分享面板
		'show-share-panel',
		//显示神回复面板
		'show-godreply-panel',
		//还原布局面板
		'layout-base-restore',
		//移动布局面板
		'move-layout-base',
		//还原布局面板
		'restore-layout-base',
		//布局面板动画显示
		'layout-base-fx-show',
		//布局面板动画隐藏
		'layout-base-fx-hide',
		//显示头部
		'show-navigation-bar',
		//隐藏头部
		'hide-navigation-bar',
		//要求全屏
		'need-full-screen',
		//显示图片幻灯
		'show-image-slides',
		//要求内容滚动到顶端
		'scroll-to-top',
		//显示转载面板
		'show-forward-panel',
		//发送评论面板
		'show-send-comment-panel',
		//显示博文设置面板
		'show-blogsetting-panel',
		//刷新好友动态列表
		'refresh-feedlist',

		//刷新评论列表
		'refresh-comment-list',
		//插入评论列表
		'insert-reply-list',

		//刷新消息页评论列表
		'refresh-msg-commentlist',
		//刷新消息页回复列表
		'refresh-msg-replylist',
		//刷新消息页通知列表
		'refresh-msg-notelist',
		//刷新消息页留言列表
		'refresh-msg-walllist',

		//显示app推广导航条
		'show-appdownload-bar',
		//隐藏app推广导航条
		'hide-appdownload-bar',

		//重新加载博文文章模块
		'reload-blog-article',
		//隐藏关注我的横幅（位置在最上面）
		'hide-fouce-me-bar',
		//展示关注我横幅（位置在最上面）
		'show-fouce-me-bar',
		//展开分享内容
		'show-share-pannel',
		//整个页面的分页机制完毕
		'article-page-done'
	]);
});

/**
 * @fileoverview 全局公共接口
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/trans/global',function(require,exports,module){
	var $transmission = require('lib/common/transmission');

	//以下面的方式注册接口
	var trans = new $transmission();
	var g = trans.register.bind(trans);
	var prefix = '/dpool/blog/newblog/riaapi/mblog';

	//登出
	g('logout', {url:'/api/auth/logout'});

	/**
	 * 布码接口
	 * 参数
	 * key: tracecode + _ + uid
	 * pageid: scope.$pageid
	 */
	g('traceAPI',{ url: 'http://hits.sinajs.cn/A2/b.html'});

	/**
	 * 其他统计杂项
	 * 参数: 任意
	 */
	g('traceStat', {url : 'http://blog.sina.cn/dpool/blog/newblog/riaapi/mblog/stat.php', type : 'GET'});

	/**
	 * 未读动态接口
	 * 参数
	 * uid: 登录用户ID
	 * varname: requestId_{8位随机整数}
	 */
	g('unread',{ url: prefix + '/notice.php'});

	/**
	 * 未读消息数清零
	 * 参数
	 * fields: 要清除未读数的标识字段，多个标识,分割
	 * (unread_msg_num:总未读数, wall_num:留言数, article_comment_num:评论数, article_reply_num:回复数, remind_num:通知数)
	 */
	g('clearUnread',{ url: prefix + '/unread_clear.php'});

	/**
	 * 积分兑换接口
	 * 参数
	 * uid: 登录用户uid
	 * type: 兑换项目  3 图片vip 4 私密博文 5 兑换勋章
	 */
	g('openVip',{ url: prefix + '/points_redeem.php'});

	/**
	 * 验证是否开通接口
	 * 参数
	 * type: 兑换项目  3 图片vip 4 私密博文 5 兑换勋章
	 */
	g('checkVip',{ url: prefix + '/check_vip.php'});

	/**
	 * 获取用户积分数接口
	 * 参数
	 * uid: 登录用户uid
	 */
	g('getUserPoint',{ url: prefix + '/get_user_point.php'});

	/**
	 * 判断用户是否签到接口(get)
	 * 用户签到接口(post)
	 * 参数
	 * 无
	 */
	g('qiandao',{ url: prefix + '/qiandao.php'});

	/**
	 * 手浪广告接口
	 * 参数
	 * uid: 登录用户uid
	 */
	g('saxAPI',{ url: 'http://sax.sina.cn/wap/impress'});

	/**
	原生广告接口
	@param adunit_id 广告位ID，多个用,分隔
	@param timestamp 时间戳，网站页面的打开时间，用于广告去重
	@param page_url 页面URL
	@param callback JSONP回调函数
	**/
	g('saxNative', {
		dataType : 'jsonp',
		processData : false,
		url : 'http://sax.sina.cn/native/impress'
	});

	/**
	 * 判断是否启用打赏功能
	 * @param seller 博主uid
	 */
	g('get_reward', {url: prefix + '/get_reward.php', type: 'GET'});

	module.exports = trans;

});



/**
 * @fileoverview base64编码和解码，from http://git.oschina.net/loonhxl/jbase64/blob/master/jbase64.js
 * @author yifei2 (yifei2@staff.sina.com.cn)
 *
 */
define('lib/kit/str/base64',function(require,exports,module){
	
	var BASE64_MAPPING = [
		'A','B','C','D','E','F','G','H',
		'I','J','K','L','M','N','O','P',
		'Q','R','S','T','U','V','W','X',
		'Y','Z','a','b','c','d','e','f',
		'g','h','i','j','k','l','m','n',
		'o','p','q','r','s','t','u','v',
		'w','x','y','z','0','1','2','3',
		'4','5','6','7','8','9','+','/'
	];

	/**
	 *ascii convert to binary
	 */
	var _toBinary = function(ascii){
		var binary = new Array();
		while(ascii > 0){
			var b = ascii%2;
			ascii = Math.floor(ascii/2);
			binary.push(b);
		}
		/*
		var len = binary.length;
		if(6-len > 0){
			for(var i = 6-len ; i > 0 ; --i){
				binary.push(0);
			}
		}*/
		binary.reverse();
		return binary;
	};

	/**
	 *binary convert to decimal
	 */
	var _toDecimal  = function(binary){
		var dec = 0;
		var p = 0;
		for(var i = binary.length-1 ; i >= 0 ; --i){
			var b = binary[i];
			if(b == 1){
				dec += Math.pow(2 , p);
			}
			++p;
		}
		return dec;
	};

	/**
	 *unicode convert to utf-8
	 */
	var _toUTF8Binary = function(c , binaryArray){
		var mustLen = (8-(c+1)) + ((c-1)*6);
		var fatLen = binaryArray.length;
		var diff = mustLen - fatLen;
		while(--diff >= 0){
			binaryArray.unshift(0);
		}
		var binary = [];
		var _c = c;
		while(--_c >= 0){
			binary.push(1);
		}
		binary.push(0);
		var i = 0 , len = 8 - (c+1);
		for(; i < len ; ++i){
			binary.push(binaryArray[i]);
		}

		for(var j = 0 ; j < c-1 ; ++j){
			binary.push(1);
			binary.push(0);
			var sum = 6;
			while(--sum >= 0){
				binary.push(binaryArray[i++]);
			}
		}
		return binary;
	};

	var __BASE64 = {
			/**
			 *BASE64 Encode
			 */
			encoder:function(str){
				var base64_Index = [];
				var binaryArray = [];
				for(var i = 0 , len = str.length ; i < len ; ++i){
					var unicode = str.charCodeAt(i);
					var _tmpBinary = _toBinary(unicode);
					if(unicode < 0x80){
						var _tmpdiff = 8 - _tmpBinary.length;
						while(--_tmpdiff >= 0){
							_tmpBinary.unshift(0);
						}
						binaryArray = binaryArray.concat(_tmpBinary);
					}else if(unicode >= 0x80 && unicode <= 0x7FF){
						binaryArray = binaryArray.concat(_toUTF8Binary(2 , _tmpBinary));
					}else if(unicode >= 0x800 && unicode <= 0xFFFF){//UTF-8 3byte
						binaryArray = binaryArray.concat(_toUTF8Binary(3 , _tmpBinary));
					}else if(unicode >= 0x10000 && unicode <= 0x1FFFFF){//UTF-8 4byte
						binaryArray = binaryArray.concat(_toUTF8Binary(4 , _tmpBinary));	
					}else if(unicode >= 0x200000 && unicode <= 0x3FFFFFF){//UTF-8 5byte
						binaryArray = binaryArray.concat(_toUTF8Binary(5 , _tmpBinary));
					}else if(unicode >= 4000000 && unicode <= 0x7FFFFFFF){//UTF-8 6byte
						binaryArray = binaryArray.concat(_toUTF8Binary(6 , _tmpBinary));
					}
				}

				var extra_Zero_Count = 0;
				for(var i = 0 , len = binaryArray.length ; i < len ; i+=6){
					var diff = (i+6)-len;
					if(diff == 2){
						extra_Zero_Count = 2;
					}else if(diff == 4){
						extra_Zero_Count = 4;
					}
					//if(extra_Zero_Count > 0){
					//	len += extra_Zero_Count+1;
					//}
					var _tmpExtra_Zero_Count = extra_Zero_Count;
					while(--_tmpExtra_Zero_Count >= 0){
						binaryArray.push(0);
					}
					base64_Index.push(_toDecimal(binaryArray.slice(i , i+6)));
				}

				var base64 = '';
				for(var i = 0 , len = base64_Index.length ; i < len ; ++i){
					base64 += BASE64_MAPPING[base64_Index[i]];
				}

				for(var i = 0 , len = extra_Zero_Count/2 ; i < len ; ++i){
					base64 += '=';
				}
				return base64;
			},
			/**
			 *BASE64  Decode for UTF-8 
			 */
			decoder : function(_base64Str){
				var _len = _base64Str.length;
				var extra_Zero_Count = 0;
				/**
				 *计算在进行BASE64编码的时候，补了几个0
				 */
				if(_base64Str.charAt(_len-1) == '='){
					//alert(_base64Str.charAt(_len-1));
					//alert(_base64Str.charAt(_len-2));
					if(_base64Str.charAt(_len-2) == '='){//两个等号说明补了4个0
						extra_Zero_Count = 4;
						_base64Str = _base64Str.substring(0 , _len-2);
					}else{//一个等号说明补了2个0
						extra_Zero_Count = 2;
						_base64Str = _base64Str.substring(0 , _len - 1);
					}
				}

				var binaryArray = [];
				for(var i = 0 , len = _base64Str.length; i < len ; ++i){
					var c = _base64Str.charAt(i);
					for(var j = 0 , size = BASE64_MAPPING.length ; j < size ; ++j){
						if(c == BASE64_MAPPING[j]){
							var _tmp = _toBinary(j);
							/*不足6位的补0*/
							var _tmpLen = _tmp.length;
							if(6-_tmpLen > 0){
								for(var k = 6-_tmpLen ; k > 0 ; --k){
									_tmp.unshift(0);
								}
							}
							binaryArray = binaryArray.concat(_tmp);
							break;
						}
					}
				}

				if(extra_Zero_Count > 0){
					binaryArray = binaryArray.slice(0 , binaryArray.length - extra_Zero_Count);
				}

				var unicode = [];
				var unicodeBinary = [];
				for(var i = 0 , len = binaryArray.length ; i < len ; ){
					if(binaryArray[i] == 0){
						unicode=unicode.concat(_toDecimal(binaryArray.slice(i,i+8)));
						i += 8;
					}else{
						var sum = 0;
						while(i < len){
							if(binaryArray[i] == 1){
								++sum;
							}else{
								break;
							}
							++i;
						}
						unicodeBinary = unicodeBinary.concat(binaryArray.slice(i+1 , i+8-sum));
						i += 8 - sum;
						while(sum > 1){
							unicodeBinary = unicodeBinary.concat(binaryArray.slice(i+2 , i+8));
							i += 8;
							--sum;
						}
						unicode = unicode.concat(_toDecimal(unicodeBinary));
						unicodeBinary = [];
					}
				}
				return unicode;
			}
	};
	
	module.exports = __BASE64;

});
/**
 * @fileoverview 触摸事件管理组件 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('vendor/hammer/hammer',function(require,exports,module){

/*! Hammer.JS - v1.0.6dev - 2013-12-14
 * http://eightmedia.github.com/hammer.js
 *
 * Copyright (c) 2013 Jorik Tangelder <j.tangelder@gmail.com>;
 * Licensed under the MIT license */

	/**
	 * Hammer
	 * use this to create instances
	 * @param   {HTMLElement}   element
	 * @param   {Object}        options
	 * @returns {Hammer.Instance}
	 * @constructor
	 */
	var Hammer = function(element, options) {
		return new Hammer.Instance(element, options || {});
	};

	// default settings
	Hammer.defaults = {
		// add styles and attributes to the element to prevent the browser from doing
		// its native behavior. this doesnt prevent the scrolling, but cancels
		// the contextmenu, tap highlighting etc
		// set to false to disable this
		stop_browser_behavior: {
			// this also triggers onselectstart=false for IE
			userSelect: 'none',
			// this makes the element blocking in IE10 >, you could experiment with the value
			// see for more options this issue; https://github.com/EightMedia/hammer.js/issues/241
			touchAction: 'none',
			touchCallout: 'none',
			contentZooming: 'none',
			userDrag: 'none',
			tapHighlightColor: 'rgba(0,0,0,0)'
		}

		//
		// more settings are defined per gesture at gestures.js
		//
	};

	// detect touchevents
	Hammer.HAS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;
	Hammer.HAS_TOUCHEVENTS = ('ontouchstart' in window);

	// dont use mouseevents on mobile devices
	Hammer.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;
	Hammer.NO_MOUSEEVENTS = Hammer.HAS_TOUCHEVENTS && window.navigator.userAgent.match(Hammer.MOBILE_REGEX);

	// eventtypes per touchevent (start, move, end)
	// are filled by Hammer.event.determineEventTypes on setup
	Hammer.EVENT_TYPES = {};

	// direction defines
	Hammer.DIRECTION_DOWN = 'down';
	Hammer.DIRECTION_LEFT = 'left';
	Hammer.DIRECTION_UP = 'up';
	Hammer.DIRECTION_RIGHT = 'right';

	// pointer type
	Hammer.POINTER_MOUSE = 'mouse';
	Hammer.POINTER_TOUCH = 'touch';
	Hammer.POINTER_PEN = 'pen';

	// touch event defines
	Hammer.EVENT_START = 'start';
	Hammer.EVENT_MOVE = 'move';
	Hammer.EVENT_END = 'end';

	// hammer document where the base events are added at
	Hammer.DOCUMENT = window.document;

	// plugins and gestures namespaces
	Hammer.plugins = Hammer.plugins || {};
	Hammer.gestures = Hammer.gestures || {};

	// if the window events are set...
	Hammer.READY = false;

	/**
	 * setup events to detect gestures on the document
	 */
	function setup() {
		if (Hammer.READY) {
			return;
		}

		// find what eventtypes we add listeners to
		Hammer.event.determineEventTypes();

		// Register all gestures inside Hammer.gestures
		Hammer.utils.each(Hammer.gestures, function(gesture) {
			Hammer.detection.register(gesture);
		});

		// Add touch events on the document
		Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_MOVE, Hammer.detection.detect);
		Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_END, Hammer.detection.detect);

		// Hammer is ready...!
		Hammer.READY = true;
	}

	Hammer.utils = {
		/**
		 * extend method,
		 * also used for cloning when dest is an empty object
		 * @param   {Object}    dest
		 * @param   {Object}    src
		 * @parm  {Boolean}  merge    do a merge
		 * @returns {Object}    dest
		 */
		extend: function extend(dest, src, merge) {
			for (var key in src) {
				if (dest[key] !== undefined && merge) {
					continue;
				}
				dest[key] = src[key];
			}
			return dest;
		},


		/**
		 * for each
		 * @param obj
		 * @param iterator
		 */
		each: function(obj, iterator, context) {
			var i, length;
			// native forEach on arrays
			if ('forEach' in obj) {
				obj.forEach(iterator, context);
			}
			// arrays
			else if (obj.length !== undefined) {
				for (i = 0, length = obj.length; i < length; i++) {
					if (iterator.call(context, obj[i], i, obj) === false) {
						return;
					}
				}
			}
			// objects
			else {
				for (i in obj) {
					if (obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj) === false) {
						return;
					}
				}
			}
		},

		/**
		 * find if a node is in the given parent
		 * used for event delegation tricks
		 * @param   {HTMLElement}   node
		 * @param   {HTMLElement}   parent
		 * @returns {boolean}       has_parent
		 */
		hasParent: function(node, parent) {
			while (node) {
				if (node == parent) {
					return true;
				}
				node = node.parentNode;
			}
			return false;
		},


		/**
		 * get the center of all the touches
		 * @param   {Array}     touches
		 * @returns {Object}    center
		 */
		getCenter: function getCenter(touches) {
			var valuesX = [],
				valuesY = [];

			Hammer.utils.each(touches, function(touch) {
				// I prefer clientX because it ignore the scrolling position
				valuesX.push(typeof touch.clientX !== 'undefined' ? touch.clientX : touch.pageX);
				valuesY.push(typeof touch.clientY !== 'undefined' ? touch.clientY : touch.pageY);
			});

			return {
				pageX: ((Math.min.apply(Math, valuesX) + Math.max.apply(Math, valuesX)) / 2),
				pageY: ((Math.min.apply(Math, valuesY) + Math.max.apply(Math, valuesY)) / 2)
			};
		},


		/**
		 * calculate the velocity between two points
		 * @param   {Number}    delta_time
		 * @param   {Number}    delta_x
		 * @param   {Number}    delta_y
		 * @returns {Object}    velocity
		 */
		getVelocity: function getVelocity(delta_time, delta_x, delta_y) {
			return {
				x: Math.abs(delta_x / delta_time) || 0,
				y: Math.abs(delta_y / delta_time) || 0
			};
		},


		/**
		 * calculate the angle between two coordinates
		 * @param   {Touch}     touch1
		 * @param   {Touch}     touch2
		 * @returns {Number}    angle
		 */
		getAngle: function getAngle(touch1, touch2) {
			var y = touch2.pageY - touch1.pageY,
				x = touch2.pageX - touch1.pageX;
			return Math.atan2(y, x) * 180 / Math.PI;
		},


		/**
		 * angle to direction define
		 * @param   {Touch}     touch1
		 * @param   {Touch}     touch2
		 * @returns {String}    direction constant, like Hammer.DIRECTION_LEFT
		 */
		getDirection: function getDirection(touch1, touch2) {
			var x = Math.abs(touch1.pageX - touch2.pageX),
				y = Math.abs(touch1.pageY - touch2.pageY);

			if (x >= y) {
				return touch1.pageX - touch2.pageX > 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;
			} else {
				return touch1.pageY - touch2.pageY > 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;
			}
		},


		/**
		 * calculate the distance between two touches
		 * @param   {Touch}     touch1
		 * @param   {Touch}     touch2
		 * @returns {Number}    distance
		 */
		getDistance: function getDistance(touch1, touch2) {
			var x = touch2.pageX - touch1.pageX,
				y = touch2.pageY - touch1.pageY;
			return Math.sqrt((x * x) + (y * y));
		},


		/**
		 * calculate the scale factor between two touchLists (fingers)
		 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
		 * @param   {Array}     start
		 * @param   {Array}     end
		 * @returns {Number}    scale
		 */
		getScale: function getScale(start, end) {
			// need two fingers...
			if (start.length >= 2 && end.length >= 2) {
				return this.getDistance(end[0], end[1]) /
					this.getDistance(start[0], start[1]);
			}
			return 1;
		},


		/**
		 * calculate the rotation degrees between two touchLists (fingers)
		 * @param   {Array}     start
		 * @param   {Array}     end
		 * @returns {Number}    rotation
		 */
		getRotation: function getRotation(start, end) {
			// need two fingers
			if (start.length >= 2 && end.length >= 2) {
				return this.getAngle(end[1], end[0]) -
					this.getAngle(start[1], start[0]);
			}
			return 0;
		},


		/**
		 * boolean if the direction is vertical
		 * @param    {String}    direction
		 * @returns  {Boolean}   is_vertical
		 */
		isVertical: function isVertical(direction) {
			return (direction == Hammer.DIRECTION_UP || direction == Hammer.DIRECTION_DOWN);
		},


		/**
		 * stop browser default behavior with css props
		 * @param   {HtmlElement}   element
		 * @param   {Object}        css_props
		 */
		stopDefaultBrowserBehavior: function stopDefaultBrowserBehavior(element, css_props) {
			if (!css_props || !element || !element.style) {
				return;
			}

			// with css properties for modern browsers
			Hammer.utils.each(['webkit', 'khtml', 'moz', 'Moz', 'ms', 'o', ''], function(vendor) {
				Hammer.utils.each(css_props, function(prop) {
					// vender prefix at the property
					if (vendor) {
						prop = vendor + prop.substring(0, 1).toUpperCase() + prop.substring(1);
					}
					// set the style
					if (prop in element.style) {
						element.style[prop] = prop;
					}
				});
			});

			// also the disable onselectstart
			if (css_props.userSelect == 'none') {
				element.onselectstart = function() {
					return false;
				};
			}

			// and disable ondragstart
			if (css_props.userDrag == 'none') {
				element.ondragstart = function() {
					return false;
				};
			}
		}
	};


	/**
	 * create new hammer instance
	 * all methods should return the instance itself, so it is chainable.
	 * @param   {HTMLElement}       element
	 * @param   {Object}            [options={}]
	 * @returns {Hammer.Instance}
	 * @constructor
	 */
	Hammer.Instance = function(element, options) {
		var self = this;

		// setup HammerJS window events and register all gestures
		// this also sets up the default options
		setup();

		this.element = element;

		// start/stop detection option
		this.enabled = true;

		// merge options
		this.options = Hammer.utils.extend(
			Hammer.utils.extend({}, Hammer.defaults),
			options || {});

		// add some css to the element to prevent the browser from doing its native behavoir
		if (this.options.stop_browser_behavior) {
			Hammer.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);
		}

		// start detection on touchstart
		Hammer.event.onTouch(element, Hammer.EVENT_START, function(ev) {
			if (self.enabled) {
				Hammer.detection.startDetect(self, ev);
			}
		});

		// return instance
		return this;
	};


	Hammer.Instance.prototype = {
		/**
		 * bind events to the instance
		 * @param   {String}      gesture
		 * @param   {Function}    handler
		 * @returns {Hammer.Instance}
		 */
		on: function onEvent(gesture, handler) {
			var gestures = gesture.split(' ');
			Hammer.utils.each(gestures, function(gesture) {
				this.element.addEventListener(gesture, handler, false);
			}, this);
			return this;
		},


		/**
		 * unbind events to the instance
		 * @param   {String}      gesture
		 * @param   {Function}    handler
		 * @returns {Hammer.Instance}
		 */
		off: function offEvent(gesture, handler) {
			var gestures = gesture.split(' ');
			Hammer.utils.each(gestures, function(gesture) {
				this.element.removeEventListener(gesture, handler, false);
			}, this);
			return this;
		},


		/**
		 * trigger gesture event
		 * @param   {String}      gesture
		 * @param   {Object}      [eventData]
		 * @returns {Hammer.Instance}
		 */
		trigger: function triggerEvent(gesture, eventData) {
			// optional
			if (!eventData) {
				eventData = {};
			}

			// create DOM event
			var event = Hammer.DOCUMENT.createEvent('Event');
			event.initEvent(gesture, true, true);
			event.gesture = eventData;

			// trigger on the target if it is in the instance element,
			// this is for event delegation tricks
			var element = this.element;
			if (Hammer.utils.hasParent(eventData.target, element)) {
				element = eventData.target;
			}

			element.dispatchEvent(event);
			return this;
		},


		/**
		 * enable of disable hammer.js detection
		 * @param   {Boolean}   state
		 * @returns {Hammer.Instance}
		 */
		enable: function enable(state) {
			this.enabled = state;
			return this;
		}
	};


	/**
	 * this holds the last move event,
	 * used to fix empty touchend issue
	 * see the onTouch event for an explanation
	 * @type {Object}
	 */
	var last_move_event = null;


	/**
	 * when the mouse is hold down, this is true
	 * @type {Boolean}
	 */
	var enable_detect = false;


	/**
	 * when touch events have been fired, this is true
	 * @type {Boolean}
	 */
	var touch_triggered = false;


	Hammer.event = {
		/**
		 * simple addEventListener
		 * @param   {HTMLElement}   element
		 * @param   {String}        type
		 * @param   {Function}      handler
		 */
		bindDom: function(element, type, handler) {
			var types = type.split(' ');
			Hammer.utils.each(types, function(type) {
				element.addEventListener(type, handler, false);
			});
		},


		/**
		 * touch events with mouse fallback
		 * @param   {HTMLElement}   element
		 * @param   {String}        eventType        like Hammer.EVENT_MOVE
		 * @param   {Function}      handler
		 */
		onTouch: function onTouch(element, eventType, handler) {
			var self = this;

			this.bindDom(element, Hammer.EVENT_TYPES[eventType], function bindDomOnTouch(ev) {
				var sourceEventType = ev.type.toLowerCase();

				// onmouseup, but when touchend has been fired we do nothing.
				// this is for touchdevices which also fire a mouseup on touchend
				if (sourceEventType.match(/mouse/) && touch_triggered) {
					return;
				}

				// mousebutton must be down or a touch event
				else if (sourceEventType.match(/touch/) || // touch events are always on screen
					sourceEventType.match(/pointerdown/) || // pointerevents touch
					(sourceEventType.match(/mouse/) && ev.which === 1) // mouse is pressed
				) {
					enable_detect = true;
				}

				// mouse isn't pressed
				else if (sourceEventType.match(/mouse/) && !ev.which) {
					enable_detect = false;
				}


				// we are in a touch event, set the touch triggered bool to true,
				// this for the conflicts that may occur on ios and android
				if (sourceEventType.match(/touch|pointer/)) {
					touch_triggered = true;
				}

				// count the total touches on the screen
				var count_touches = 0;

				// when touch has been triggered in this detection session
				// and we are now handling a mouse event, we stop that to prevent conflicts
				if (enable_detect) {
					// update pointerevent
					if (Hammer.HAS_POINTEREVENTS && eventType != Hammer.EVENT_END) {
						count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);
					}
					// touch
					else if (sourceEventType.match(/touch/)) {
						count_touches = ev.touches.length;
					}
					// mouse
					else if (!touch_triggered) {
						count_touches = sourceEventType.match(/up/) ? 0 : 1;
					}

					// if we are in a end event, but when we remove one touch and
					// we still have enough, set eventType to move
					if (count_touches > 0 && eventType == Hammer.EVENT_END) {
						eventType = Hammer.EVENT_MOVE;
					}
					// no touches, force the end event
					else if (!count_touches) {
						eventType = Hammer.EVENT_END;
					}

					// store the last move event
					if (count_touches || last_move_event === null) {
						last_move_event = ev;
					}

					// trigger the handler
					handler.call(Hammer.detection, self.collectEventData(element, eventType, self.getTouchList(last_move_event, eventType), ev));

					// remove pointerevent from list
					if (Hammer.HAS_POINTEREVENTS && eventType == Hammer.EVENT_END) {
						count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);
					}
				}

				// on the end we reset everything
				if (!count_touches) {
					last_move_event = null;
					enable_detect = false;
					touch_triggered = false;
					Hammer.PointerEvent.reset();
				}
			});
		},


		/**
		 * we have different events for each device/browser
		 * determine what we need and set them in the Hammer.EVENT_TYPES constant
		 */
		determineEventTypes: function determineEventTypes() {
			// determine the eventtype we want to set
			var types;

			// pointerEvents magic
			if (Hammer.HAS_POINTEREVENTS) {
				types = Hammer.PointerEvent.getEvents();
			}
			// on Android, iOS, blackberry, windows mobile we dont want any mouseevents
			else if (Hammer.NO_MOUSEEVENTS) {
				types = [
					'touchstart',
					'touchmove',
					'touchend touchcancel'
				];
			}
			// for non pointer events browsers and mixed browsers,
			// like chrome on windows8 touch laptop
			else {
				types = [
					'touchstart mousedown',
					'touchmove mousemove',
					'touchend touchcancel mouseup'
				];
			}

			Hammer.EVENT_TYPES[Hammer.EVENT_START] = types[0];
			Hammer.EVENT_TYPES[Hammer.EVENT_MOVE] = types[1];
			Hammer.EVENT_TYPES[Hammer.EVENT_END] = types[2];
		},


		/**
		 * create touchlist depending on the event
		 * @param   {Object}    ev
		 * @param   {String}    eventType   used by the fakemultitouch plugin
		 */
		getTouchList: function getTouchList(ev /*, eventType*/ ) {
			// get the fake pointerEvent touchlist
			if (Hammer.HAS_POINTEREVENTS) {
				return Hammer.PointerEvent.getTouchList();
			}
			// get the touchlist
			else if (ev.touches) {
				return ev.touches;
			}
			// make fake touchlist from mouse position
			else {
				ev.indentifier = 1;
				return [ev];
			}
		},


		/**
		 * collect event data for Hammer js
		 * @param   {HTMLElement}   element
		 * @param   {String}        eventType        like Hammer.EVENT_MOVE
		 * @param   {Object}        eventData
		 */
		collectEventData: function collectEventData(element, eventType, touches, ev) {
			// find out pointerType
			var pointerType = Hammer.POINTER_TOUCH;
			if (ev.type.match(/mouse/) || Hammer.PointerEvent.matchType(Hammer.POINTER_MOUSE, ev)) {
				pointerType = Hammer.POINTER_MOUSE;
			}

			return {
				center: Hammer.utils.getCenter(touches),
				timeStamp: new Date().getTime(),
				target: ev.target,
				touches: touches,
				eventType: eventType,
				pointerType: pointerType,
				srcEvent: ev,

				/**
				 * prevent the browser default actions
				 * mostly used to disable scrolling of the browser
				 */
				preventDefault: function() {
					if (this.srcEvent.preventManipulation) {
						this.srcEvent.preventManipulation();
					}

					if (this.srcEvent.preventDefault) {
						this.srcEvent.preventDefault();
					}
				},

				/**
				 * stop bubbling the event up to its parents
				 */
				stopPropagation: function() {
					this.srcEvent.stopPropagation();
				},

				/**
				 * immediately stop gesture detection
				 * might be useful after a swipe was detected
				 * @return {*}
				 */
				stopDetect: function() {
					return Hammer.detection.stopDetect();
				}
			};
		}
	};

	Hammer.PointerEvent = {
		/**
		 * holds all pointers
		 * @type {Object}
		 */
		pointers: {},

		/**
		 * get a list of pointers
		 * @returns {Array}     touchlist
		 */
		getTouchList: function() {
			var self = this;
			var touchlist = [];

			// we can use forEach since pointerEvents only is in IE10
			Hammer.utils.each(self.pointers, function(pointer) {
				touchlist.push(pointer);
			});

			return touchlist;
		},

		/**
		 * update the position of a pointer
		 * @param   {String}   type             Hammer.EVENT_END
		 * @param   {Object}   pointerEvent
		 */
		updatePointer: function(type, pointerEvent) {
			if (type == Hammer.EVENT_END) {
				this.pointers = {};
			} else {
				pointerEvent.identifier = pointerEvent.pointerId;
				this.pointers[pointerEvent.pointerId] = pointerEvent;
			}

			return Object.keys(this.pointers).length;
		},

		/**
		 * check if ev matches pointertype
		 * @param   {String}        pointerType     Hammer.POINTER_MOUSE
		 * @param   {PointerEvent}  ev
		 */
		matchType: function(pointerType, ev) {
			if (!ev.pointerType) {
				return false;
			}

			var pt = ev.pointerType,
				types = {};
			types[Hammer.POINTER_MOUSE] = (pt === ev.MSPOINTER_TYPE_MOUSE || pt === Hammer.POINTER_MOUSE);
			types[Hammer.POINTER_TOUCH] = (pt === ev.MSPOINTER_TYPE_TOUCH || pt === Hammer.POINTER_TOUCH);
			types[Hammer.POINTER_PEN] = (pt === ev.MSPOINTER_TYPE_PEN || pt === Hammer.POINTER_PEN);
			return types[pointerType];
		},


		/**
		 * get events
		 */
		getEvents: function() {
			return [
				'pointerdown MSPointerDown',
				'pointermove MSPointerMove',
				'pointerup pointercancel MSPointerUp MSPointerCancel'
			];
		},

		/**
		 * reset the list
		 */
		reset: function() {
			this.pointers = {};
		}
	};


	Hammer.detection = {
		// contains all registred Hammer.gestures in the correct order
		gestures: [],

		// data of the current Hammer.gesture detection session
		current: null,

		// the previous Hammer.gesture session data
		// is a full clone of the previous gesture.current object
		previous: null,

		// when this becomes true, no gestures are fired
		stopped: false,


		/**
		 * start Hammer.gesture detection
		 * @param   {Hammer.Instance}   inst
		 * @param   {Object}            eventData
		 */
		startDetect: function startDetect(inst, eventData) {
			// already busy with a Hammer.gesture detection on an element
			if (this.current) {
				return;
			}

			this.stopped = false;

			this.current = {
				inst: inst, // reference to HammerInstance we're working for
				startEvent: Hammer.utils.extend({}, eventData), // start eventData for distances, timing etc
				lastEvent: false, // last eventData
				name: '' // current gesture we're in/detected, can be 'tap', 'hold' etc
			};

			this.detect(eventData);
		},


		/**
		 * Hammer.gesture detection
		 * @param   {Object}    eventData
		 */
		detect: function detect(eventData) {
			if (!this.current || this.stopped) {
				return;
			}

			// extend event data with calculations about scale, distance etc
			eventData = this.extendEventData(eventData);

			// instance options
			var inst_options = this.current.inst.options;

			// call Hammer.gesture handlers
			Hammer.utils.each(this.gestures, function(gesture) {
				// only when the instance options have enabled this gesture
				if (!this.stopped && inst_options[gesture.name] !== false) {
					// if a handler returns false, we stop with the detection
					if (gesture.handler.call(gesture, eventData, this.current.inst) === false) {
						this.stopDetect();
						return false;
					}
				}
			}, this);

			// store as previous event event
			if (this.current) {
				this.current.lastEvent = eventData;
			}

			// endevent, but not the last touch, so dont stop
			if (eventData.eventType == Hammer.EVENT_END && !eventData.touches.length - 1) {
				this.stopDetect();
			}

			return eventData;
		},


		/**
		 * clear the Hammer.gesture vars
		 * this is called on endDetect, but can also be used when a final Hammer.gesture has been detected
		 * to stop other Hammer.gestures from being fired
		 */
		stopDetect: function stopDetect() {
			// clone current data to the store as the previous gesture
			// used for the double tap gesture, since this is an other gesture detect session
			this.previous = Hammer.utils.extend({}, this.current);

			// reset the current
			this.current = null;

			// stopped!
			this.stopped = true;
		},


		/**
		 * extend eventData for Hammer.gestures
		 * @param   {Object}   ev
		 * @returns {Object}   ev
		 */
		extendEventData: function extendEventData(ev) {
			var startEv = this.current.startEvent;

			// if the touches change, set the new touches over the startEvent touches
			// this because touchevents don't have all the touches on touchstart, or the
			// user must place his fingers at the EXACT same time on the screen, which is not realistic
			// but, sometimes it happens that both fingers are touching at the EXACT same time
			if (startEv && (ev.touches.length != startEv.touches.length || ev.touches === startEv.touches)) {
				// extend 1 level deep to get the touchlist with the touch objects
				startEv.touches = [];
				Hammer.utils.each(ev.touches, function(touch) {
					startEv.touches.push(Hammer.utils.extend({}, touch));
				});
			}

			var delta_time = ev.timeStamp - startEv.timeStamp,
				delta_x = ev.center.pageX - startEv.center.pageX,
				delta_y = ev.center.pageY - startEv.center.pageY,
				velocity = Hammer.utils.getVelocity(delta_time, delta_x, delta_y),
				interimAngle, interimDirection;

			// end events (e.g. dragend) don't have useful values for interimDirection & interimAngle
			// because the previous event has exactly the same coordinates
			// so for end events, take the previous values of interimDirection & interimAngle
			// instead of recalculating them and getting a spurious '0'
			if (ev.eventType === 'end') {
				interimAngle = this.current.lastEvent && this.current.lastEvent.interimAngle;
				interimDirection = this.current.lastEvent && this.current.lastEvent.interimDirection;
			} else {
				interimAngle = this.current.lastEvent && Hammer.utils.getAngle(this.current.lastEvent.center, ev.center);
				interimDirection = this.current.lastEvent && Hammer.utils.getDirection(this.current.lastEvent.center, ev.center);
			}

			Hammer.utils.extend(ev, {
				deltaTime: delta_time,

				deltaX: delta_x,
				deltaY: delta_y,

				velocityX: velocity.x,
				velocityY: velocity.y,

				distance: Hammer.utils.getDistance(startEv.center, ev.center),

				angle: Hammer.utils.getAngle(startEv.center, ev.center),
				interimAngle: interimAngle,

				direction: Hammer.utils.getDirection(startEv.center, ev.center),
				interimDirection: interimDirection,

				scale: Hammer.utils.getScale(startEv.touches, ev.touches),
				rotation: Hammer.utils.getRotation(startEv.touches, ev.touches),

				startEvent: startEv
			});

			return ev;
		},


		/**
		 * register new gesture
		 * @param   {Object}    gesture object, see gestures.js for documentation
		 * @returns {Array}     gestures
		 */
		register: function register(gesture) {
			// add an enable gesture options if there is no given
			var options = gesture.defaults || {};
			if (options[gesture.name] === undefined) {
				options[gesture.name] = true;
			}

			// extend Hammer default options with the Hammer.gesture options
			Hammer.utils.extend(Hammer.defaults, options, true);

			// set its index
			gesture.index = gesture.index || 1000;

			// add Hammer.gesture to the list
			this.gestures.push(gesture);

			// sort the list by index
			this.gestures.sort(function(a, b) {
				if (a.index < b.index) {
					return -1;
				}
				if (a.index > b.index) {
					return 1;
				}
				return 0;
			});

			return this.gestures;
		}
	};


	/**
	 * Drag
	 * Move with x fingers (default 1) around on the page. Blocking the scrolling when
	 * moving left and right is a good practice. When all the drag events are blocking
	 * you disable scrolling on that area.
	 * @events  drag, drapleft, dragright, dragup, dragdown
	 */
	Hammer.gestures.Drag = {
		name: 'drag',
		index: 50,
		defaults: {
			drag_min_distance: 10,

			// Set correct_for_drag_min_distance to true to make the starting point of the drag
			// be calculated from where the drag was triggered, not from where the touch started.
			// Useful to avoid a jerk-starting drag, which can make fine-adjustments
			// through dragging difficult, and be visually unappealing.
			correct_for_drag_min_distance: true,

			// set 0 for unlimited, but this can conflict with transform
			drag_max_touches: 1,

			// prevent default browser behavior when dragging occurs
			// be careful with it, it makes the element a blocking element
			// when you are using the drag gesture, it is a good practice to set this true
			drag_block_horizontal: false,
			drag_block_vertical: false,

			// drag_lock_to_axis keeps the drag gesture on the axis that it started on,
			// It disallows vertical directions if the initial direction was horizontal, and vice versa.
			drag_lock_to_axis: false,

			// drag lock only kicks in when distance > drag_lock_min_distance
			// This way, locking occurs only when the distance has become large enough to reliably determine the direction
			drag_lock_min_distance: 25
		},

		triggered: false,
		handler: function dragGesture(ev, inst) {
			// current gesture isnt drag, but dragged is true
			// this means an other gesture is busy. now call dragend
			if (Hammer.detection.current.name != this.name && this.triggered) {
				inst.trigger(this.name + 'end', ev);
				this.triggered = false;
				return;
			}

			// max touches
			if (inst.options.drag_max_touches > 0 &&
				ev.touches.length > inst.options.drag_max_touches) {
				return;
			}

			switch (ev.eventType) {
				case Hammer.EVENT_START:
					this.triggered = false;
					break;

				case Hammer.EVENT_MOVE:
					// when the distance we moved is too small we skip this gesture
					// or we can be already in dragging
					if (ev.distance < inst.options.drag_min_distance &&
						Hammer.detection.current.name != this.name) {
						return;
					}

					// we are dragging!
					if (Hammer.detection.current.name != this.name) {
						Hammer.detection.current.name = this.name;
						if (inst.options.correct_for_drag_min_distance && ev.distance > 0) {
							// When a drag is triggered, set the event center to drag_min_distance pixels from the original event center.
							// Without this correction, the dragged distance would jumpstart at drag_min_distance pixels instead of at 0.
							// It might be useful to save the original start point somewhere
							var factor = Math.abs(inst.options.drag_min_distance / ev.distance);
							Hammer.detection.current.startEvent.center.pageX += ev.deltaX * factor;
							Hammer.detection.current.startEvent.center.pageY += ev.deltaY * factor;

							// recalculate event data using new start point
							ev = Hammer.detection.extendEventData(ev);
						}
					}

					// lock drag to axis?
					if (Hammer.detection.current.lastEvent.drag_locked_to_axis || (inst.options.drag_lock_to_axis && inst.options.drag_lock_min_distance <= ev.distance)) {
						ev.drag_locked_to_axis = true;
					}
					var last_direction = Hammer.detection.current.lastEvent.direction;
					if (ev.drag_locked_to_axis && last_direction !== ev.direction) {
						// keep direction on the axis that the drag gesture started on
						if (Hammer.utils.isVertical(last_direction)) {
							ev.direction = (ev.deltaY < 0) ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;
						} else {
							ev.direction = (ev.deltaX < 0) ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;
						}
					}

					// first time, trigger dragstart event
					if (!this.triggered) {
						inst.trigger(this.name + 'start', ev);
						this.triggered = true;
					}

					// trigger normal event
					inst.trigger(this.name, ev);

					// direction event, like dragdown
					inst.trigger(this.name + ev.direction, ev);

					// block the browser events
					if ((inst.options.drag_block_vertical && Hammer.utils.isVertical(ev.direction)) ||
						(inst.options.drag_block_horizontal && !Hammer.utils.isVertical(ev.direction))) {
						ev.preventDefault();
					}
					break;

				case Hammer.EVENT_END:
					// trigger dragend
					if (this.triggered) {
						inst.trigger(this.name + 'end', ev);
					}

					this.triggered = false;
					break;
			}
		}
	};

	/**
	 * Hold
	 * Touch stays at the same place for x time
	 * @events  hold
	 */
	Hammer.gestures.Hold = {
		name: 'hold',
		index: 10,
		defaults: {
			hold_timeout: 500,
			hold_threshold: 1
		},
		timer: null,
		handler: function holdGesture(ev, inst) {
			switch (ev.eventType) {
				case Hammer.EVENT_START:
					// clear any running timers
					clearTimeout(this.timer);

					// set the gesture so we can check in the timeout if it still is
					Hammer.detection.current.name = this.name;

					// set timer and if after the timeout it still is hold,
					// we trigger the hold event
					this.timer = setTimeout(function() {
						if (Hammer.detection.current.name == 'hold') {
							inst.trigger('hold', ev);
						}
					}, inst.options.hold_timeout);
					break;

					// when you move or end we clear the timer
				case Hammer.EVENT_MOVE:
					if (ev.distance > inst.options.hold_threshold) {
						clearTimeout(this.timer);
					}
					break;

				case Hammer.EVENT_END:
					clearTimeout(this.timer);
					break;
			}
		}
	};

	/**
	 * Release
	 * Called as last, tells the user has released the screen
	 * @events  release
	 */
	Hammer.gestures.Release = {
		name: 'release',
		index: Infinity,
		handler: function releaseGesture(ev, inst) {
			if (ev.eventType == Hammer.EVENT_END) {
				inst.trigger(this.name, ev);
			}
		}
	};

	/**
	 * Swipe
	 * triggers swipe events when the end velocity is above the threshold
	 * @events  swipe, swipeleft, swiperight, swipeup, swipedown
	 */
	Hammer.gestures.Swipe = {
		name: 'swipe',
		index: 40,
		defaults: {
			// set 0 for unlimited, but this can conflict with transform
			swipe_min_touches: 1,
			swipe_max_touches: 1,
			swipe_velocity: 0.7
		},
		handler: function swipeGesture(ev, inst) {
			if (ev.eventType == Hammer.EVENT_END) {
				// max touches
				if (inst.options.swipe_max_touches > 0 &&
					ev.touches.length < inst.options.swipe_min_touches &&
					ev.touches.length > inst.options.swipe_max_touches) {
					return;
				}

				// when the distance we moved is too small we skip this gesture
				// or we can be already in dragging
				if (ev.velocityX > inst.options.swipe_velocity ||
					ev.velocityY > inst.options.swipe_velocity) {
					// trigger swipe events
					inst.trigger(this.name, ev);
					inst.trigger(this.name + ev.direction, ev);
				}
			}
		}
	};

	/**
	 * Tap/DoubleTap
	 * Quick touch at a place or double at the same place
	 * @events  tap, doubletap
	 */
	Hammer.gestures.Tap = {
		name: 'tap',
		index: 100,
		defaults: {
			tap_max_touchtime: 250,
			tap_max_distance: 10,
			tap_always: true,
			doubletap_distance: 20,
			doubletap_interval: 300
		},
		handler: function tapGesture(ev, inst) {
			if (ev.eventType == Hammer.EVENT_END && ev.srcEvent.type != 'touchcancel') {
				// previous gesture, for the double tap since these are two different gesture detections
				var prev = Hammer.detection.previous,
					did_doubletap = false;

				// when the touchtime is higher then the max touch time
				// or when the moving distance is too much
				if (ev.deltaTime > inst.options.tap_max_touchtime ||
					ev.distance > inst.options.tap_max_distance) {
					return;
				}

				// check if double tap
				if (prev && prev.name == 'tap' &&
					(ev.timeStamp - prev.lastEvent.timeStamp) < inst.options.doubletap_interval &&
					ev.distance < inst.options.doubletap_distance) {
					inst.trigger('doubletap', ev);
					did_doubletap = true;
				}

				// do a single tap
				if (!did_doubletap || inst.options.tap_always) {
					Hammer.detection.current.name = 'tap';
					inst.trigger(Hammer.detection.current.name, ev);
				}
			}
		}
	};

	/**
	 * Touch
	 * Called as first, tells the user has touched the screen
	 * @events  touch
	 */
	Hammer.gestures.Touch = {
		name: 'touch',
		index: -Infinity,
		defaults: {
			// call preventDefault at touchstart, and makes the element blocking by
			// disabling the scrolling of the page, but it improves gestures like
			// transforming and dragging.
			// be careful with using this, it can be very annoying for users to be stuck
			// on the page
			prevent_default: false,

			// disable mouse events, so only touch (or pen!) input triggers events
			prevent_mouseevents: false
		},
		handler: function touchGesture(ev, inst) {
			if (inst.options.prevent_mouseevents && ev.pointerType == Hammer.POINTER_MOUSE) {
				ev.stopDetect();
				return;
			}

			if (inst.options.prevent_default) {
				ev.preventDefault();
			}

			if (ev.eventType == Hammer.EVENT_START) {
				inst.trigger(this.name, ev);
			}
		}
	};

	/**
	 * Transform
	 * User want to scale or rotate with 2 fingers
	 * @events  transform, pinch, pinchin, pinchout, rotate
	 */
	Hammer.gestures.Transform = {
		name: 'transform',
		index: 45,
		defaults: {
			// factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1
			transform_min_scale: 0.01,
			// rotation in degrees
			transform_min_rotation: 1,
			// prevent default browser behavior when two touches are on the screen
			// but it makes the element a blocking element
			// when you are using the transform gesture, it is a good practice to set this true
			transform_always_block: false
		},
		triggered: false,
		handler: function transformGesture(ev, inst) {
			// current gesture isnt drag, but dragged is true
			// this means an other gesture is busy. now call dragend
			if (Hammer.detection.current.name != this.name && this.triggered) {
				inst.trigger(this.name + 'end', ev);
				this.triggered = false;
				return;
			}

			// atleast multitouch
			if (ev.touches.length < 2) {
				return;
			}

			// prevent default when two fingers are on the screen
			if (inst.options.transform_always_block) {
				ev.preventDefault();
			}

			switch (ev.eventType) {
				case Hammer.EVENT_START:
					this.triggered = false;
					break;

				case Hammer.EVENT_MOVE:
					var scale_threshold = Math.abs(1 - ev.scale);
					var rotation_threshold = Math.abs(ev.rotation);

					// when the distance we moved is too small we skip this gesture
					// or we can be already in dragging
					if (scale_threshold < inst.options.transform_min_scale &&
						rotation_threshold < inst.options.transform_min_rotation) {
						return;
					}

					// we are transforming!
					Hammer.detection.current.name = this.name;

					// first time, trigger dragstart event
					if (!this.triggered) {
						inst.trigger(this.name + 'start', ev);
						this.triggered = true;
					}

					inst.trigger(this.name, ev); // basic transform event

					// trigger rotate event
					if (rotation_threshold > inst.options.transform_min_rotation) {
						inst.trigger('rotate', ev);
					}

					// trigger pinch event
					if (scale_threshold > inst.options.transform_min_scale) {
						inst.trigger('pinch', ev);
						inst.trigger('pinch' + ((ev.scale < 1) ? 'in' : 'out'), ev);
					}
					break;

				case Hammer.EVENT_END:
					// trigger dragend
					if (this.triggered) {
						inst.trigger(this.name + 'end', ev);
					}

					this.triggered = false;
					break;
			}
		}
	};

	// Based off Lo-Dash's excellent UMD wrapper (slightly modified) - https://github.com/bestiejs/lodash/blob/master/lodash.js#L5515-L5543
	// some AMD build optimizers, like r.js, check for specific condition patterns like the following:
	if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
		// define as an anonymous module
		define(function() {
			return Hammer;
		});
		// check for `exports` after `define` in case a build optimizer adds an `exports` object
	} else if (typeof module === 'object' && typeof module.exports === 'object') {
		module.exports = Hammer;
	} else {
		window.Hammer = Hammer;
	}

});


/**
 * @fileoverview 页面统一隐藏容器工具 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('lib/kit/dom/hiddenContainer',function(require,exports,module){

	var $ = require('lib');

/**
 * 页面统一隐藏容器工具
 * @author liangdong2@staff.sina.com.cn
 * @example
	var $hiddenContainer = require('lib/kit/dom/hiddenContainer');
	$hiddenContainer.append('<div></div>');
 */
	var hiddenNode;

	var getHiddenNode = function(){
		if(!hiddenNode){
			hiddenNode = $('<div></div>').css({
				'display' : 'none',
				'position' : 'absolute',
				'top' : '-9999px',
				'left' : '-9999px'
			}).appendTo($('body'));
		}
		return hiddenNode;
	};

	module.exports = {
		append : function(node){
			getHiddenNode().append($(node));
		},
		clear : function(){
			getHiddenNode().html('');
		},
		get : function(){
			return getHiddenNode();
		}
	};

});

/**
 * @fileoverview confirm 可回收对话框盒子
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/recycleConfirmBox',function(require,exports,module){

	var $ = require('lib');
	var $confirmBox = require('mods/dialog/confirmBox');

	var $parent = $confirmBox.prototype;

	//模板对象
	var TPL = {
		box : [
			'<div class="l-prompt">',
				'<p class="prompt b-txt4">',
					'<span data-role="icon" class="b-ft-icon">(</span>',
					'<span data-role="content" class="txt"></span>',
				'</p>',
				'<div class="btn">',
					'<a data-role="ok" href="javascript:;" class="b-btn-a">确定</a>',
					'<a data-role="cancel" href="javascript:;" class="b-btn-a">取消</a>',
				'</div>',
			'</div>'
		].join('')
	};

	//可用的类型
	var TYPES = {
		'confirm' : '('
	};

	//可回收的，带有确认，取消按钮的对话框
	var RecycleConfirmBox = $confirmBox.extend({
		options : {
			msg : '',				//消息文案
			mask : true,			//显示消息盒子时是否显示遮罩
			type : 'confirm',		//消息盒子类型
			template : TPL.box,		//消息盒子模板
			parent : null,			//消息盒子插入到哪个元素
			okText : '确&nbsp;定',	//确认按钮文案
			cancelText : '取&nbsp;消',	//取消按钮文案
			styles : {				//消息盒子样式
				'position' : 'fixed',
				'opacity' : 0,
				'display' : 'none'
			}
		},
		setCustEvents : function(action){
			$parent.setCustEvents.apply(this, arguments);
			action = action === 'add' ? 'on' : 'off';
			this[action]('hide', this.getBound('recycle'));
		},
		//重设对象，加载自己相关的关联事件
		reset : function(){
			var nodes = this.nodes;
			nodes.icon.html(TYPES.confirm);
			nodes.content.html('');

			this.build();
		},
		//回收对象，解除所有关联的事件
		recycle : function(){
			this.trigger('recycle');
		},
		//渲染浮层
		render : function(){
			var conf = this.get('conf');
			var nodes = this.nodes;
			var type = TYPES[conf.type] || conf.type;
			var msg = conf.msg;

			nodes.icon.html(type);
			nodes.content.html(msg);
			nodes.ok.html(conf.okText);
			nodes.cancel.html(conf.cancelText);

			this.trigger('render');
		}
	});

	module.exports = RecycleConfirmBox;

});



/**
 * @fileoverview 重复利用组件 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/util/reuse',function(require,exports,module){
	var $ = require('lib');

	//重复利用符合特定规则的类
	//避免类的过多重复创建，主要是避免DOM的重复创建

	//可重用的类必须符合下面的规则：
	//--类需要提供事件处理机制(掺元Events)
	//--提供setOptions函数，用于重置选项
	//--提供reset函数，用于重置对象到原始状态
	//--提供recycle事件，用于在此时回收对象
	//--提供destroy方法，用于在缓存队列过长时销毁对象
	var reuse = function(klass, conf){

		var cache = [];
		conf = $.extend({
			//缓存队列最大长度，队列中超过这个限制的对象，在回收后会被销毁
			//为0则不会销毁任何已创建的对象
			maxlength : 0
		}, conf);

		var checkCache = function(){
			if(conf.maxlength > 0 && cache.length > conf.maxlength){
				var obj = cache.shift();
				if($.type(obj.destroy) === 'function'){
					obj.destroy();
				}
			}
		};

		return {
			get : function(options){
				var obj = cache.shift();
				if(obj){
					obj.setOptions(options);
					obj.reset();
					obj.attach();
				}else{
					obj = new klass(options);
				}

				obj.on('recycle', function(){
					//用延时避免激发recycle的事件相关的其他事件函数未执行就被解绑
					setTimeout(function(){
						obj.detach();
						obj.off();
						cache.push(obj);
						checkCache();
					});
				});

				return obj;
			}
		};
	};

	module.exports = reuse;
});


/**
 * @fileoverview 提示信息盒子
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/tipBox',function(require,exports,module){

	var $ = require('lib');
	var $position = require('lib/more/position');
	var $layer = require('lib/ui/layer');
	var $parseDom = require('lib/kit/dom/parseDom');
	var $updateZindex = require('mods/util/updateZindex');

	//模板对象
	var TPL = {
		box : [
			'<div class="l-prompt">',
				'<p class="prompt b-txt4">',
					'<span data-role="icon" class="b-ft-icon">)</span>',
					'<span data-role="content" class="txt">已喜欢</span>',
				'</p>',
			'</div>'
		].join('')
	};

	//可用的类型
	var TYPES = {
		'warn' : '(',
		'error' : '%',
		'love' : ')',
		'star' : '&'
	};

	//消息盒子类，显示一段时间后自动隐藏
	var TipBox = $layer.extend({
		options : {
			msg : '',				//消息文案
			type : 'warn',			//消息盒子类型
			template : TPL.box,		//消息盒子模板
			parent : null,			//消息盒子插入到哪个元素
			styles : {				//消息盒子样式
				'position' : 'fixed',
				'opacity' : 0,
				'display' : 'none'
			}
		},
		parseDom : function(){
			this.nodes = $parseDom(this.conf.template, {
				roles : ['icon', 'content']
			});
		},
		setCustEvents : function(action){
			action = action === 'add' ? 'on' : 'off';
			this[action]('show', this.getBound('updateZindex'));
			this[action]('hide', this.getBound('recycle'));
		},
		//更新浮层的zIndex，使其盖到顶部
		updateZindex : function(){
			var styles = this.conf.styles;
			if(!styles.hasOwnProperty('z-index') && !styles.hasOwnProperty('zIndex')){
				$updateZindex('dialog', this.nodes.root);
			}
		},
		//重设对象，加载自己相关的关联事件
		reset : function(){
			var nodes = this.nodes;
			nodes.icon.html(TYPES.warn);
			nodes.content.html('');

			this.build();
		},
		//回收对象，解除所有关联的事件
		recycle : function(){
			this.trigger('recycle');
		},
		//渲染浮层
		render : function(){
			var conf = this.get('conf');
			var nodes = this.nodes;
			var type = TYPES[conf.type] || TYPES.warn;
			var msg = conf.msg;

			nodes.icon.html(type);
			nodes.content.html(msg);

			this.trigger('render');
		},
		setPosition : function(){
			var conf = this.conf;
			var nodes = this.nodes;
			var prevDisplay = nodes.root.css('display');
			nodes.root.css({
				'visibility' : 'hidden',
				'display' : 'block'
			});
			$position.pin({
				element : nodes.root,
				x : '50%',
				y : '150%'
			}, {
				element : conf.parent || $position.VIEWPORT,
				x : '50%',
				y : '100%'
			});
			nodes.root.css({
				'visibility' : '',
				'display' : prevDisplay
			});
		},
		//动画方式显示
		fxIn : function(){
			this.show();
			this.nodes.root.transit({
				'opacity' : 1
			}, 300, 'ease-in');
		},
		//动画方式消失
		fxOut : function(){
			var that = this;
			this.nodes.root.transit({
				'opacity' : 0
			}, 300, 'ease-in', function(){
				that.hide();
			});
		}
	});

	module.exports = TipBox;

});



/**
 * @fileoverview 加载中对话框
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/loadingBox',function(require,exports,module){

	var $ = require('lib');
	var $layer = require('lib/ui/layer');
	var $parseDom = require('lib/kit/dom/parseDom');
	var $updateZindex = require('mods/util/updateZindex');

	//模板对象
	var TPL = {
		box : [
			'<div class="l-prompt">',
				'<p class="prompt b-txt4">',
					'<span data-role="icon" class="b-ft-icon b-load-icn">4<span class="a"></span></span>',
					'<span data-role="content" class="txt">请重试...</span>',
				'</p>',
				'<div class="reload" style="display:none">',
					'<span data-role="operation" class="b-ft-icon b-txt3">%</span>',
				'</div>',
			'</div>'
		].join(''),
		iconLoading : '4<span class="a"></span>'
	};

	//消息盒子类，显示一段时间后自动隐藏
	var LoadingBox = $layer.extend({
		options : {
			msg : '',				//消息文案
			type : 'loading',		//浮层状态
			cancel : false,			//是否可以取消loading
			template : TPL.box,		//消息盒子模板
			parent : null,			//消息盒子插入到哪个元素
			styles : {				//消息盒子样式
				'position' : 'fixed',
				'opacity' : 0,
				'display' : 'none'
			}
		},
		parseDom : function(){
			this.nodes = $parseDom(this.conf.template, {
				roles : ['icon','content','operation']
			});
		},
		setDomEvents : function(action){
			var conf = this.conf;
			var nodes = this.nodes;
			var getBound = this.getBound();
			var delegate = action === 'add' ? 'delegate' : 'undelegate';
			nodes.root[delegate]('[data-role="operation"]', 'tap', getBound('operate'));

			action = action === 'add' ? 'bind' : 'unbind';
			nodes.root[action]('touchmove', getBound('onTouchMove'));
			$(window)[action]('resize', getBound('onResize'));
		},
		setCustEvents : function(action){
			action = action === 'add' ? 'on' : 'off';
			this[action]('show', this.getBound('updateZindex'));
			this[action]('hide', this.getBound('recycle'));
			this[action]('change:conf', this.getBound('render'));
		},
		//更新浮层的zIndex，使其盖到顶部
		updateZindex : function(){
			var conf = this.get('conf');
			var styles = this.conf.styles;
			var zIndex = styles['z-index'] || styles.zIndex;
			var root = this.nodes.root;
			if(!conf.parent){
				if($.type(zIndex) !== 'number'){
					$updateZindex('dialog', root);
				}
			}else{
				if($.type(zIndex) !== 'number'){
					root.css('z-index', 10);
				}
			}
		},
		//重设对象，加载自己相关的关联事件
		reset : function(){
			this.build();
		},
		//回收对象，解除所有关联的事件
		recycle : function(){
			this.trigger('recycle');
		},
		//渲染浮层
		render : function(){
			var conf = this.get('conf');
			var nodes = this.nodes;
			var msg = conf.msg;
			var type = conf.type;
			
			if(msg){
				nodes.content.html(msg);
			}
			if(type === 'retry'){
				nodes.icon.removeClass('b-load-icn').html('%');
				nodes.operation.html('-').parent().show();
			}else{
				nodes.icon.addClass('b-load-icn').html(TPL.iconLoading);
				if(conf.cancel){
					nodes.operation.html('#').parent().show();
				}else{
					nodes.operation.html('').parent().hide();
				}
			}
			this.trigger('render');
		},
		//浮层操作
		operate : function(){
			var conf = this.get('conf');
			if(conf.type === 'retry'){
				this.trigger('retry');
			}else{
				this.trigger('cancel');
			}
		},
		//动画方式显示
		fxIn : function(){
			this.show();
			this.nodes.root.transit({
				'opacity' : 1
			}, 300, 'ease-in');
		},
		//动画方式消失
		fxOut : function(){
			var that = this;
			this.nodes.root.transit({
				'opacity' : 0
			}, 300, 'ease-in', function(){
				that.hide();
			});
		}
	});

	module.exports = LoadingBox;

});



/**
 * @fileoverview 加载script
 * @desc 该方法为zepto而存在，使用jquery请用$.getScript替代
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/kit/util/loadScript',function(require,exports,module){

	var $ = require('lib');

	module.exports = function(options){
		var conf = $.extend({
			url : '',
			type : 'text/javascript',
			charset : 'utf-8',
			onLoad : $.noop
		}, options);

		var script = $(document.createElement('script'));
		script.on('load', function(){
			conf.onLoad();
			delete script.onload;
			$(script).off().remove();
		}).attr({
			src : conf.url,
			charset : conf.charset,
			type : conf.type
		}).appendTo( $('head') );
	};

});


/**
 * @fileoverview 通用 confirm 对话框盒子
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/dialog/confirmBox',function(require,exports,module){

	var $ = require('lib');
	var $dialog = require('lib/ui/dialog');
	var $parseDom = require('lib/kit/dom/parseDom');
	var $updateZindex = require('mods/util/updateZindex');
	var $channel = require('mods/channel/global');
	var $mask = require('lib/ui/mask');
	var $channelCommon = require('lib/common/channel');

	var TPL = {
		box : [
			'<div>',
				'<button data-role="ok">ok</button>',
				'<button data-role="cancel">cancel</button>',
			'</div>'
		].join('')
	};

	//带有确认，取消按钮的对话框
	var ConfirmBox = $dialog.extend({
		options : {
			//显示消息盒子时是否显示遮罩
			mask : true,
			//消息盒子模板
			template : TPL.box,
			//消息盒子插入到哪个元素
			parent : null,
			//消息盒子样式
			styles : {
				'position' : 'fixed',
				'opacity' : 0,
				'display' : 'none'
			}
		},
		parseDom : function(){
			this.nodes = $parseDom(this.conf.template, {
				roles : ['ok', 'cancel']
			});
		},
		build : function(){
			this.buildMask();
			this.insert();
			this.setStyles();
		},
		setCustEvents : function(action){
			var objs = this.objs;
			action = action === 'add' ? 'on' : 'off';
			this[action]('show', this.getBound('updateZindex'));
			this[action]('show', this.getBound('openMask'));
			this[action]('fxOut', this.getBound('closeMask'));
			objs.mask[action]('hide', this.getBound('cancel'));
		},
		setListener : function(action){
			var getBound = this.getBound();
			action = action === 'add' ? 'add' : 'remove';
			$channelCommon[action]('content-update', getBound('fxOut'));
		},
		//构建遮罩
		buildMask : function(){
			var objs = this.objs;
			if(!objs.mask){
				objs.mask = new $mask({
					target : 'screen',
					tapHide : true,
					styles : {
						'position' : 'fixed'
					}
				});
			}
		},
		//打开遮罩
		openMask : function(){
			var objs = this.objs;
			if(this.conf.mask){
				objs.mask.show();
				objs.mask.nodes.root.css('z-index', this.nodes.root.css('z-index'));
				$channel.fire('dialog-show-mask');
			}
		},
		//关闭遮罩
		closeMask : function(){
			var objs = this.objs;
			if(this.conf.mask){
				objs.mask.hide();
				$channel.fire('dialog-hide-mask');
			}
		},
		//更新浮层的zIndex，使其盖到顶部
		updateZindex : function(){
			var styles = this.conf.styles;
			if(!styles.hasOwnProperty('z-index') && !styles.hasOwnProperty('zIndex')){
				$updateZindex('dialog', this.nodes.root);
			}
		},
		//淡入
		fxIn : function(){
			var that = this;
			var nodes = this.nodes;
			if(!this.get('visible')){
				this.show();
				nodes.root.transit({
					'opacity' : 1
				}, 300, 'ease-in', function(){
					that.trigger('fxIn');
				});
			}
		},
		//淡出
		fxOut : function(){
			var that = this;
			if(this.get('visible')){
				this.set('visible', false);
				this.trigger('fxOut');
				this.nodes.root.transit({
					'opacity' : 0
				}, 300, 'ease-in', function(){
					that.hide();
				});
			}
		},
		validate : function(){
			return true;
		},
		ok : function(){
			if(this.get('visible')){
				this.trigger('ok');
				if(this.validate()){
					this.fxOut();
				}
			}
		},
		cancel : function(){
			if(this.get('visible')){
				this.trigger('cancel');
				this.fxOut();
			}
		}
	});

	module.exports = ConfirmBox;

});



/**
 * @fileoverview 浮层基本UI
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/ui/layer',function(require,exports,module){

	var $ = require('lib');
	var $overlay = require('lib/ui/overlay');
	var $position = require('lib/more/position');

	//浮层
	var Layer = $overlay.extend({
		options : {
			template : '<div></div>',	//浮层模板
			parent : null,				//浮层插入到哪个元素
			styles : {					//浮层样式
				'z-index' : 100,
				'position' : 'absolute',
				'display' : 'none'
			}
		},
		build : function(){
			this.insert();
			this.setStyles();
		},
		setDomEvents : function(action){
			var conf = this.conf;
			var nodes = this.nodes;
			var getBound = this.getBound();
			action = action === 'add' ? 'bind' : 'unbind';
			nodes.root[action]('touchmove', getBound('onTouchMove'));
			$(window)[action]('resize', getBound('onResize'));
		},
		onTouchMove : function(evt){
			evt.preventDefault();
		},
		onResize : function(){
			this.setPosition();
		},
		insert : function(){
			var conf = this.conf;
			var nodes = this.nodes;
			var parent = conf.parent ? $(conf.parent) : $('body');
			nodes.root.appendTo(parent);
		},
		setStyles : function(styles){
			var conf = this.conf;
			var nodes = this.nodes;
			styles = styles || conf.styles || {};
			nodes.root.css(styles);
		},
		setPosition : function(){
			var conf = this.conf;
			var nodes = this.nodes;
			var prevDisplay = nodes.root.css('display');
			nodes.root.css({
				'visibility' : 'hidden',
				'display' : 'block'
			});
			$position.pin({
				element : nodes.root,
				x : '50%',
				y : '50%'
			}, {
				element : conf.parent || $position.VIEWPORT,
				x : '50%',
				y : '50%'
			});
			nodes.root.css({
				'visibility' : '',
				'display' : prevDisplay
			});
		}
	});

	module.exports = Layer;

});



/**
 * @fileoverview dom解析 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/kit/dom/parseDom',function(require,exports,module){

	var $ = require('lib');

	//简单的dom解析
	//根据一个父元素和内部自定义属性为data-role="xxx"的元素，取得dom元素列表
	//nodes.root为根节点
	//param {Element} node 做DOM解析的根节点
	//param {Object} options 其他选项
	/* example
	<div id="box">
		<div data-role="content"></div>
		<p data-role="item"></p>
		<p data-role="item"></p>
	</div>
	parseDom('#box') === {
		content : $('#box [data-role="content"]'),
		item : $('#box [data-role="item"]')
	};

	parseDom('#box', {
		roles : ['content', 'target']
	}) === { content : $('#box [data-role="content"]') }
	//日志：Node [data-role="target"] not exists in #box
	*/
	var parseDom = function(node, options){
		var conf = $.extend({
			camelCase : true,	//是否将角色名称转换为驼峰格式
			merge : true,		//是否自动检查DOM，混合未经roles定义的元素
			log : false,		//是否输出元素检查日志
			prop : 'data-role',	//检查的自定义属性，判断以何种自定义属性解析DOM

			//期望的角色列表，存在这个列表，则会以这个列表为准。
			//在查找不到对应元素时输出日志
			roles : []
		}, options);

		var nodes = {};
		var selector = '';
		var log = $.log;
		var prop = conf.prop.toString();
		var roles = Array.isArray(conf.roles) ? conf.roles : [];

		node = $(node);
		selector = node.selector;

		//先检查预定的角色列表( conf.roles )，用 null 填充 nodes 对象
		//以便之后遍历生成元素并检查DOM元素存在性
		if(roles.length > 0){
			roles.forEach(function(role){
				var name = conf.camelCase ? $.camelCase(role) : role;
				nodes[name] = null;
			});
		}

		//查找根节点下所有带有自定义属性[data-role]的元素
		//如果允许合并DOM元素(默认 conf.mrege === true)，则会将不在conf.roles列表中的元素也混合到nodes对象中
		if(roles.length <= 0 || conf.merge){
			node.find('[' + prop + ']').each(function(){
				var role = $(this).attr(prop);
				var name = conf.camelCase ? $.camelCase(role) : role;
				if(!nodes[name] && nodes[name] !== null){
					nodes[name] = null;
					roles.push(role);
				}
			});
		}

		//遍历 conf.roles 列表，将所需的 dom 元素查找出来混合入 nodes 对象
		//这样即使实际不存在DOM元素，而nodes对象中也存在对应可操作的zepto对象
		$.each(roles, function(index, role){
			var roleSelector = '[' + prop + '="' + role + '"]';
			var name = conf.camelCase ? $.camelCase(role) : role;
			nodes[name] = node.find(roleSelector);
			if(nodes[name].length <= 0 && conf.log){
				log('Node: ' + roleSelector + ' not exists in ' + selector);
			}
		});

		//设置nodes对象的root属性为根节点
		if(!nodes.root){
			nodes.root = node;
		}
		return nodes;
	};

	module.exports = parseDom;

});


/**
 * @fileoverview 统一管理zIndex更新 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('mods/util/updateZindex',function(require,exports,module){
	var $ = require('lib');

	var zIndex = {
		'dialog' : 1000
	};

	//浮层zIndex更新管理器
	module.exports = function(type, node){
		node = $(node);
		if(zIndex[type]){
			node.css('z-index', ++zIndex[type]);
		}
	};
});


/**
 * @fileoverview 对话框基本UI
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/ui/dialog',function(require,exports,module){

	var $ = require('lib');
	var $layer = require('lib/ui/layer');
	var $parseDom = require('lib/kit/dom/parseDom');

	//对话框
	var Dialog = $layer.extend({
		options : {
			//对话框模板
			template : '<div><button data-role="ok">ok</button></div>',
			//对话框插入到哪个元素
			parent : null,
			//对话框样式
			styles : {
				'z-index' : 100,
				'position' : 'absolute',
				'display' : 'none'
			}
		},
		parseDom : function(){
			this.nodes = $parseDom(this.conf.template, {
				roles : ['ok', 'cancel']
			});
		},
		setDomEvents : function(action){
			var conf = this.conf;
			var nodes = this.nodes;
			var getBound = this.getBound();
			var delegate = action === 'add' ? 'delegate' : 'undelegate';
			action = action === 'add' ? 'bind' : 'unbind';
			nodes.root[action]('touchmove', getBound('onTouchMove'));
			$(window)[action]('resize', getBound('onResize'));
			nodes.root[delegate]('[data-role="ok"]', 'tap', getBound('ok'));
			nodes.root[delegate]('[data-role="cancel"]', 'tap', getBound('cancel'));
		},
		validate : function(){
			return true;
		},
		ok : function(){
			this.trigger('ok');
			if(this.validate()){
				this.hide();
			}
		},
		cancel : function(){
			this.trigger('cancel');
			this.hide();
		}
	});

	module.exports = Dialog;

});



/**
 * @fileoverview 遮罩基本UI 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/ui/mask',function(require,exports,module){

	var $ = require('lib');
	var $overlay = require('lib/ui/overlay');
	var $parseDom = require('lib/kit/dom/parseDom');
	var $position = require('lib/more/position');

	//遮罩
	var Mask = $overlay.extend({
		options : {
			target : 'screen',			//要遮挡的目标区域
			template : '<div></div>',	//遮罩的模板
			tapHide : false,			//点击/触摸后隐藏
			styles : {					//遮罩的样式
				'z-index' : 100,
				'position' : 'absolute',
				'background' : 'rgba(0,0,0,0.3)',
				'display' : 'none'
			}
		},
		parseDom : function(){
			this.nodes = $parseDom(this.conf.template);
		},
		build : function(){
			this.setStyles();
			this.insert();
		},
		setDomEvents : function(action){
			var conf = this.conf;
			var nodes = this.nodes;
			var getBound = this.getBound();
			action = action === 'add' ? 'bind' : 'unbind';
			nodes.root[action]('touchmove', getBound('onTouchMove'));
			nodes.root[action]('tap', getBound('close'));

			var listen = conf.target === 'screen' ? $(window) : $(conf.target);
			listen[action]('resize', getBound('onResize'));
		},
		onTouchMove : function(evt){
			evt.preventDefault();
		},
		onResize : function(){
			this.setPosition();
		},
		insert : function(){
			var conf = this.conf;
			var nodes = this.nodes;
			var parent = conf.target === 'screen' ? $('body') : $(conf.target).parent();
			nodes.root.appendTo(parent);
		},
		setStyles : function(styles){
			var conf = this.conf;
			var nodes = this.nodes;
			styles = styles || conf.styles || {};
			nodes.root.css(styles);
		},
		setPosition : function(){
			var conf = this.conf;
			var nodes = this.nodes;
			var target = conf.target === 'screen' ? $(window) : $(conf.target);
			$position.pin({
				element : nodes.root,
				x : '0%',
				y : '0%'
			}, {
				element : conf.target === 'screen' ? $position.VIEWPORT : target,
				x : '0%',
				y : '0%'
			});
			var styles = {
				'width' : target.width() + 'px',
				'height' : target.height() + 100 + 'px'
			};
			nodes.root.css(styles);
		},
		close : function(){
			var conf = this.conf;
			if(conf.tapHide){
				this.hide();
			}
		}
	});

	module.exports = Mask;

});



/**
 * @fileoverview 覆盖物基本UI
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('lib/ui/overlay',function(require,exports,module){

	var $ = require('lib');
	var $base = require('lib/base/base');
	var $parseDom = require('lib/kit/dom/parseDom');

	//覆盖物类
	var Overlay = $base.extend({
		options : {
			template : null
		},
		parseDom : function(){
			this.nodes = $parseDom(this.conf.template);
		},
		setPosition : $.noop,
		show : function(){
			this.setPosition();
			this.nodes.root.show();
			this.set('visible', true);
			this.trigger('show');
		},
		hide : function(){
			this.nodes.root.hide();
			this.set('visible', false);
			this.trigger('hide');
		}
	});

	module.exports = Overlay;

});



/**
 * @fileoverview 公共组件 
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('conf/global',function(require,exports,module){
	require('lib');

	require('lib/kit/util/template');

	require('lib/more/es5-safe');
	require('lib/more/class');
	require('lib/more/events');
	require('lib/base/base');
	require('lib/more/querystring');
	require('lib/more/mustache');
	require('lib/more/position');

	require('lib/common/channel');
	require('lib/common/contentM');
	require('lib/common/historyM');
	require('lib/common/layer');
	require('lib/common/layoutM');
	require('lib/common/listener');
	require('lib/common/location');
	require('lib/common/pageletM');
	require('lib/common/router');
	require('lib/common/scope');
	require('lib/common/transmission');
	require('lib/common/transport');
	require('lib/common/user');

	require('lib/base/layout');
	require('lib/base/module');
	require('lib/base/pagelet');

	require('lib/mvc/base');
	require('lib/mvc/controller');
	require('lib/mvc/delegate');
	require('lib/mvc/model');
	require('lib/mvc/view');

	require('mods/channel/global');

	require('mods/common/env');
	require('mods/common/active');
	require('mods/common/checkLink');

	require('mods/util/load');
	require('mods/util/loader');

	require('mods/ui/win');

	require('mods/other/sidePanel');
	
	require('mods/common/trace');

});


/**
 * @fileoverview 根节点布局
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('mods/layout/root',function(require,exports,module){
	var $ = require('lib');
	var $view = require('lib/mvc/view');
	var $layout = require('lib/base/layout');

	var $layoutM = require('lib/common/layoutM');
	var $tpl = require('lib/kit/util/template');
	var $win = require('mods/ui/win');

	var TPL = $tpl({
		layout : [
			'<div id="layout-root">',
				'<div id="layout-root-pllist"></div>',
			'</div>'
		]
	});

	var View = $view.extend({
		defaults : {
			node : '#layout-root',
			template : TPL.layout,
			role : {
				box : '#layout-root-pllist'
			}
		},
		setEvents : function(action){
			var proxy = this.proxy();
			this.delegate(action);
			$win[action]('resize', proxy('checkStyle'));
		},
		checkStyle : function(){
			var root = this.role('root');
			var wSize = $win.getSize();
			root.css({
				'width' : '100%',
				'min-height' : wSize.height + 'px',
				'overflow' : 'hidden'
			});
			$('body').css({
				'overflow-x' : 'hidden'
			});
		},
		deploy : function(){
			if(!$(this.conf.node).length){
				$(document.body).prepend(this.role('root'));
			}
		}
	});

	//页面根节点布局模块
	var LayoutRoot = $layout.extend({
		defaults : {
			map : {
				'#layout-root-pllist' : [
					// 登录浮层
					'#pl-login-panel',
					// 侧边栏搜索浮层
					'#pl-nav-panel',
					// 侧边栏用户浮层
					'#pl-user-panel',
					// 评论浮层
					'#pl-comment-panel',
					// 分享浮层
					'#pl-share-panel',
					// 转载浮层
					'#pl-forward-panel',
					// 发评论浮层
					'#pl-send-comment-panel',
					// 发博文编辑博文，博文设置浮层
					'#pl-blogsetting-panel',
					'#layout-base',
					//神回复
					'#pl-godreply-panel'
				]
			}
		},
		build : function(){
			this.view = new View();
			this.root = this.view.role('root');
		},
		onAttach : function(){
			var view = this.view;
			view.deploy();
			$layoutM.insert(view.conf.node, this);
			view.checkStyle();
		}
	});

	module.exports = LayoutRoot;

});


/**
 * @fileoverview 业务入口
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('conf/page/main',function(require,exports,module){
	
	var $router = require('lib/common/router');
	var $LayoutRoot = require('mods/layout/root');

	var layoutRoot = new $LayoutRoot();

	//博客首页
	//example: /dpool/blog/pillar0514 
	//example: /dpool/blog/u/1409250070
	$router.register('conf/routes/blogHome', {
		match : function(url){
			var regSelfDomain = /^\/dpool\/blog\/[\w\d]+(\?.*|\#.*|$)/;
			var regSelfUid = /^\/dpool\/blog\/u\/[\d]+(\?.*|\#.*|$)/;
			return regSelfDomain.test(url) || regSelfUid.test(url);
		}
	});

	//博客正文页
	//example: /dpool/blog/s/blog_46e7b3fd0102e7gg.html
	$router.register('conf/routes/nBlogArticle', (/^\/dpool\/blog\/s\/blog_[\w\d]+\.html(\?.*|\#.*|$)/));
	//$router.register('conf/routes/nBlogArticle', (/^\/.*.html/));

	//财经博客 - 首页
	// $router.register('conf/routes/blogFinance', (/^\/blog\/ria\/h5\/v2\/html-finance\/index\.html(\?.*|\#.*|$)/));
	$router.register('conf/routes/blogFinance', (/^\/dpool\/blog\/finance\.html(\?.*|\#.*|$)/));

	//财经博客 - 博主列表页
	// $router.register('conf/routes/bloggerFinance', (/^\/blog\/ria\/h5\/v2\/html-finance\/hot-list\.html(\?.*|\#.*|$)/));
	$router.register('conf/routes/bloggerFinance', (/^\/dpool\/blog\/finance_hot\.html(\?.*|\#.*|$)/));

	//单独幻灯页面
	//example: /dpool/blog/imgslide_a34dac810101g3fi.html
	$router.register('conf/routes/imgSlide', (/^\/dpool\/blog\/newblog\/mblog\/controllers\/articleimages\.php(\?.*|\#.*|$)/));

	//好友动态页面
	//http://blog.sina.cn/dpool/blog/newblog/mblog/controllers/feedlist.php
	$router.register('conf/routes/feedPage', (/^\/dpool\/blog\/newblog\/mblog\/controllers\/feedlist\.php/));

	//消息页面
	//http://blog.sina.cn/dpool/blog/newblog/mblog/controllers/message.php
	$router.register('conf/routes/messagePage', (/^\/dpool\/blog\/newblog\/mblog\/controllers\/message\.php/));

	//发博文，编辑博文页
	//http://blog.sina.cn/dpool/blog/newblog/mblog/controllers/articleedit.php?blogid=593bcdce0101v6q5
	//http://blog.sina.cn/dpool/blog/newblog/mblog/controllers/articleadd.php
	$router.register('conf/routes/blogPost', {
		match : function(url){
			var articleAdd = /^\/dpool\/blog\/newblog\/mblog\/controllers\/articleadd\.php/;
			var articleEdit = /^\/dpool\/blog\/newblog\/mblog\/controllers\/articleedit\.php/;
			return articleAdd.test(url) || articleEdit.test(url);
		}
	});
	
	//积分页面
	//http://blog.sina.cn/dpool/blog/newblog/mblog/controllers/jifen.php
	$router.register('conf/routes/jfPage', (/^\/dpool\/blog\/newblog\/mblog\/controllers\/jifen\.php/));

	//签到页面
	//http://blog.sina.cn/dpool/blog/newblog/mblog/controllers/qiandao.php
	$router.register('conf/routes/signPage', (/^\/dpool\/blog\/newblog\/mblog\/controllers\/qiandao\.php/));

	//异常页面
	//example: /dpool/blog/newblog/mblog/controllers/exception.php?sign=isPrivate&uid=0
	$router.register('conf/routes/exception', (/^\/dpool\/blog\/newblog\/mblog\/controllers\/exception.php(\?.*|\#.*|$)/));

	$router.init({
		root : 'http://' + location.host,
		//root : 'http://baidu.com',
		pageletM : {
			log : false
		}
	});

});



/**
 * @fileoverview 博客正文页
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('conf/routes/blogArticle',function(require,exports,module){
	
	module.exports = [
		//移动博客基本布局模块
		'conf/pl/layout/base',
		//顶部导航广告位
		'conf/pl/adTopBar',
		//移动博客导航条
		'conf/pl/navigationBar',
		//移动博客文章页
		'conf/pl/blogArticle', 
		//博文页底部浮层
		'conf/pl/floatBar',
		//移动博客通用模块
		'conf/pl/common' 
	];
});



/**
 * @fileoverview 博客财经页
 * @authors zhiyou <zhiyou@staff.sina.com.cn>
 */
define('conf/routes/blogFinance',function(require,exports,module){
	module.exports = [
		//移动博客基本布局模块
		// 'conf/pl/layout/base',

		'conf/pl/blogFinance',

		//移动博客通用模块
		// 'conf/pl/common' 
	];
});



/**
 * @fileoverview 博客首页
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('conf/routes/blogHome',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/navigationBar',
		'conf/pl/blogHome',
		'conf/pl/common'
	];
});



/**
 * @fileoverview 发布，编辑博文页
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */
define('conf/routes/blogPost',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/blogPost',
		'conf/pl/common'
	];
});

/**
 * @fileoverview 博主财经页
 * @authors zhiyou <zhiyou@staff.sina.com.cn>
 */
define('conf/routes/bloggerFinance',function(require,exports,module){
	module.exports = [
		//移动博客基本布局模块
		// 'conf/pl/layout/base',

		'conf/pl/bloggerFinance',

		//移动博客通用模块
		// 'conf/pl/common' 
	];
});



/**
 * @fileoverview 错误页
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */
define('conf/routes/exception',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/navigationBar',
		'conf/pl/exception',
		'conf/pl/common'
	];
});



/**
 * @fileoverview 好友动态feed列表
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */
define('conf/routes/feedPage',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/feedPage',
		'conf/pl/common'
	];
});

/**
 * @fileoverview 单独幻灯页面
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */
define('conf/routes/imgSlide',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/imgSlide'
	];
});



/**
 * @fileoverview 积分页面
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */
define('conf/routes/jfPage',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/jfPage',
		'conf/pl/common'
	];
});

/**
 * @fileoverview 消息页面
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */
define('conf/routes/messagePage',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/messagePage',
		'conf/pl/common'
	];
});

/**
 * @fileoverview 博客正文页
 * @authors liangdong2 <liangdong2@staff.sina.com.cn>
 */

define('conf/routes/nBlogArticle',function(require,exports,module){
	module.exports = [
		//移动博客基本布局模块
		'conf/pl/layout/base',
		//顶部导航广告位
		'conf/pl/adTopBar',
		//移动博客导航条
		'conf/pl/navigationBar',
		//移动博客文章页
		'conf/pl/nBlogArticle',
		//博文页底部浮层
		'conf/pl/floatBar',
		//移动博客通用模块
		'conf/pl/common' 
	];
});


/**
 * @fileoverview 签到详情页面
 * @authors yifei2 <yifei2@staff.sina.com.cn>
 */
define('conf/routes/signPage',function(require,exports,module){
	module.exports = [
		'conf/pl/layout/base',
		'conf/pl/signPage',
		'conf/pl/common'
	];
});
